
MusicTunerPiezo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800b288  0800b288  0000c288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b880  0800b880  0000d360  2**0
                  CONTENTS
  4 .ARM          00000008  0800b880  0800b880  0000c880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b888  0800b888  0000d360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b888  0800b888  0000c888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b88c  0800b88c  0000c88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  0800b890  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  20000360  0800bbf0  0000d360  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  0800bbf0  0000dc58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012196  00000000  00000000  0000d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a09  00000000  00000000  0001f526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  00022e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e5e  00000000  00000000  0002398e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b74  00000000  00000000  0004c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f392f  00000000  00000000  00061360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154c8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  00154cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000360 	.word	0x20000360
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b26c 	.word	0x0800b26c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000364 	.word	0x20000364
 800020c:	0800b26c 	.word	0x0800b26c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <MX_GPIO_Init>:
/** Configure pins
     PB8   ------> S_TIM4_CH3
     PB9   ------> S_TIM4_CH4
*/
void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b38      	ldr	r3, [pc, #224]	@ (800113c <MX_GPIO_Init+0xf8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a37      	ldr	r2, [pc, #220]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a31      	ldr	r2, [pc, #196]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800108a:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <MX_GPIO_Init+0xf8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_GPIO_Init+0xf8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_GPIO_Init+0xf8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a25      	ldr	r2, [pc, #148]	@ (800113c <MX_GPIO_Init+0xf8>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_GPIO_Init+0xf8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010c0:	481f      	ldr	r0, [pc, #124]	@ (8001140 <MX_GPIO_Init+0xfc>)
 80010c2:	f001 fc2d 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010d8:	2302      	movs	r3, #2
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_GPIO_Init+0xfc>)
 80010e4:	f001 fa70 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 80010e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	@ (8001144 <MX_GPIO_Init+0x100>)
 8001100:	f001 fa62 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4808      	ldr	r0, [pc, #32]	@ (8001140 <MX_GPIO_Init+0xfc>)
 800111e:	f001 fa53 	bl	80025c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2028      	movs	r0, #40	@ 0x28
 8001128:	f001 fa24 	bl	8002574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112c:	2028      	movs	r0, #40	@ 0x28
 800112e:	f001 fa3d 	bl	80025ac <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40022000 	.word	0x40022000

08001148 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001150:	1d39      	adds	r1, r7, #4
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2201      	movs	r2, #1
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <__io_putchar+0x20>)
 800115a:	f003 ff8d 	bl	8005078 <HAL_UART_Transmit>
return ch;
 800115e:	687b      	ldr	r3, [r7, #4]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000a80 	.word	0x20000a80

0800116c <__io_getchar>:
GETCHAR_PROTOTYPE
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
__HAL_UART_CLEAR_OREFLAG(&huart1);
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <__io_getchar+0x2c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2208      	movs	r2, #8
 800117c:	621a      	str	r2, [r3, #32]
HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800117e:	1df9      	adds	r1, r7, #7
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2201      	movs	r2, #1
 8001186:	4804      	ldr	r0, [pc, #16]	@ (8001198 <__io_getchar+0x2c>)
 8001188:	f003 ffff 	bl	800518a <HAL_UART_Receive>
return ch;
 800118c:	79fb      	ldrb	r3, [r7, #7]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000a80 	.word	0x20000a80

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80011a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <main+0xb8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6858      	ldr	r0, [r3, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2202      	movs	r2, #2
 80011aa:	2100      	movs	r1, #0
 80011ac:	f005 fc12 	bl	80069d4 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f001 f8d7 	bl	8002362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f860 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f7ff ff44 	bl	8001044 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011bc:	f000 fd0a 	bl	8001bd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011c0:	f000 fd80 	bl	8001cc4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80011c4:	f000 fdf6 	bl	8001db4 <MX_TIM5_Init>
  MX_TIM12_Init();
 80011c8:	f000 fe6c 	bl	8001ea4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80011cc:	f000 ffee 	bl	80021ac <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*  PINS:  *  PB4(TIM3_CH1), PA15(TIM2_CH1), PH6(TIM12_CH1), PI0 (TIM5_CH4)
 * 		Board PINS: D3, D9, D6, D10*/

  initializeNoteFrequencies();
 80011d0:	f000 face 	bl	8001770 <initializeNoteFrequencies>
  getFreq("A#0");
  getFreq("D#7");
  getFreq("D#4");
  getFreq("B6 ");*/

  initPiezo();
 80011d4:	f000 f928 	bl	8001428 <initPiezo>

  while (1)
  {
	  playNoteTIM2("A4 ", true);
 80011d8:	2101      	movs	r1, #1
 80011da:	481f      	ldr	r0, [pc, #124]	@ (8001258 <main+0xbc>)
 80011dc:	f000 f964 	bl	80014a8 <playNoteTIM2>
	  playNoteTIM3("G2 ", false);
 80011e0:	2100      	movs	r1, #0
 80011e2:	481e      	ldr	r0, [pc, #120]	@ (800125c <main+0xc0>)
 80011e4:	f000 f99e 	bl	8001524 <playNoteTIM3>
	  playNoteTIM5("B2 ", false);
 80011e8:	2100      	movs	r1, #0
 80011ea:	481d      	ldr	r0, [pc, #116]	@ (8001260 <main+0xc4>)
 80011ec:	f000 f9d8 	bl	80015a0 <playNoteTIM5>
	  playNoteTIM12("D2 ", false);
 80011f0:	2100      	movs	r1, #0
 80011f2:	481c      	ldr	r0, [pc, #112]	@ (8001264 <main+0xc8>)
 80011f4:	f000 fa12 	bl	800161c <playNoteTIM12>
	  //stopAll();
	  HAL_Delay(1500);
 80011f8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80011fc:	f001 f8de 	bl	80023bc <HAL_Delay>

	  playNoteTIM2("A4 ", true);
 8001200:	2101      	movs	r1, #1
 8001202:	4815      	ldr	r0, [pc, #84]	@ (8001258 <main+0xbc>)
 8001204:	f000 f950 	bl	80014a8 <playNoteTIM2>
	  playNoteTIM3("G4 ", true);
 8001208:	2101      	movs	r1, #1
 800120a:	4817      	ldr	r0, [pc, #92]	@ (8001268 <main+0xcc>)
 800120c:	f000 f98a 	bl	8001524 <playNoteTIM3>
	  playNoteTIM5("B4 ", true);
 8001210:	2101      	movs	r1, #1
 8001212:	4816      	ldr	r0, [pc, #88]	@ (800126c <main+0xd0>)
 8001214:	f000 f9c4 	bl	80015a0 <playNoteTIM5>
	  playNoteTIM12("D4 ", true);
 8001218:	2101      	movs	r1, #1
 800121a:	4815      	ldr	r0, [pc, #84]	@ (8001270 <main+0xd4>)
 800121c:	f000 f9fe 	bl	800161c <playNoteTIM12>
	  HAL_Delay(1500);
 8001220:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001224:	f001 f8ca 	bl	80023bc <HAL_Delay>

	  playNoteTIM2("A2 ", true);
 8001228:	2101      	movs	r1, #1
 800122a:	4812      	ldr	r0, [pc, #72]	@ (8001274 <main+0xd8>)
 800122c:	f000 f93c 	bl	80014a8 <playNoteTIM2>
	  playNoteTIM3("G2 ", true);
 8001230:	2101      	movs	r1, #1
 8001232:	480a      	ldr	r0, [pc, #40]	@ (800125c <main+0xc0>)
 8001234:	f000 f976 	bl	8001524 <playNoteTIM3>
	  playNoteTIM5("B2 ", true);
 8001238:	2101      	movs	r1, #1
 800123a:	4809      	ldr	r0, [pc, #36]	@ (8001260 <main+0xc4>)
 800123c:	f000 f9b0 	bl	80015a0 <playNoteTIM5>
	  playNoteTIM12("D2 ", true);
 8001240:	2101      	movs	r1, #1
 8001242:	4808      	ldr	r0, [pc, #32]	@ (8001264 <main+0xc8>)
 8001244:	f000 f9ea 	bl	800161c <playNoteTIM12>
	  HAL_Delay(1500);
 8001248:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800124c:	f001 f8b6 	bl	80023bc <HAL_Delay>
	  playNoteTIM2("A4 ", true);
 8001250:	bf00      	nop
 8001252:	e7c1      	b.n	80011d8 <main+0x3c>
 8001254:	20000190 	.word	0x20000190
 8001258:	0800b288 	.word	0x0800b288
 800125c:	0800b28c 	.word	0x0800b28c
 8001260:	0800b290 	.word	0x0800b290
 8001264:	0800b294 	.word	0x0800b294
 8001268:	0800b298 	.word	0x0800b298
 800126c:	0800b29c 	.word	0x0800b29c
 8001270:	0800b2a0 	.word	0x0800b2a0
 8001274:	0800b2a4 	.word	0x0800b2a4

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	@ 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	@ 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fcbb 	bl	8006c02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <SystemClock_Config+0xd0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a29      	ldr	r2, [pc, #164]	@ (8001348 <SystemClock_Config+0xd0>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <SystemClock_Config+0xd4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <SystemClock_Config+0xd4>)
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <SystemClock_Config+0xd4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012e4:	23d8      	movs	r3, #216	@ 0xd8
 80012e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fb95 	bl	8002a24 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001300:	f000 f88c 	bl	800141c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001304:	f001 fb3e 	bl	8002984 <HAL_PWREx_EnableOverDrive>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800130e:	f000 f885 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001328:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2107      	movs	r1, #7
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fe1b 	bl	8002f6c <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800133c:	f000 f86e 	bl	800141c <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	@ 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin == BLUE_Pin){
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001360:	d137      	bne.n	80013d2 <HAL_GPIO_EXTI_Callback+0x82>
	  if(up == false){
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_GPIO_EXTI_Callback+0x2c>
		  volume -= 5;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b05      	subs	r3, #5
 8001376:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e008      	b.n	800138e <HAL_GPIO_EXTI_Callback+0x3e>
	  } else if(up == true){
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x90>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_GPIO_EXTI_Callback+0x3e>
		  volume += 5;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3305      	adds	r3, #5
 800138a:	4a16      	ldr	r2, [pc, #88]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 800138c:	6013      	str	r3, [r2, #0]
	  }

	  if(volume == 0){
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_GPIO_EXTI_Callback+0x4c>
		  up = true;
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
	  }
	  if(volume == 50){
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b32      	cmp	r3, #50	@ 0x32
 80013a2:	d102      	bne.n	80013aa <HAL_GPIO_EXTI_Callback+0x5a>
		  up = false;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (volume));
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_GPIO_EXTI_Callback+0x98>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (volume));
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_GPIO_EXTI_Callback+0x9c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4, (volume));
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1, (volume));
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <HAL_GPIO_EXTI_Callback+0xa4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <HAL_GPIO_EXTI_Callback+0x94>)
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	2000037c 	.word	0x2000037c
 80013e8:	2000099c 	.word	0x2000099c
 80013ec:	20000950 	.word	0x20000950
 80013f0:	200009e8 	.word	0x200009e8
 80013f4:	20000a34 	.word	0x20000a34

080013f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140a:	f000 ffb7 	bl	800237c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40010000 	.word	0x40010000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <initPiezo>:
static int volChange = 5;

/**
 @brief sets all timer volume to 15 and stops all timers
 */
void initPiezo(){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	volumeUp();
 800142c:	f000 f934 	bl	8001698 <volumeUp>
	stopAll();
 8001430:	f000 f802 	bl	8001438 <stopAll>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <stopAll>:

/**
 @brief stops all timers
 */
void stopAll(){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 800143c:	2100      	movs	r1, #0
 800143e:	4808      	ldr	r0, [pc, #32]	@ (8001460 <stopAll+0x28>)
 8001440:	f002 fdc8 	bl	8003fd4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001444:	210c      	movs	r1, #12
 8001446:	4807      	ldr	r0, [pc, #28]	@ (8001464 <stopAll+0x2c>)
 8001448:	f002 fdc4 	bl	8003fd4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800144c:	2100      	movs	r1, #0
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <stopAll+0x30>)
 8001450:	f002 fdc0 	bl	8003fd4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001454:	2100      	movs	r1, #0
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <stopAll+0x34>)
 8001458:	f002 fdbc 	bl	8003fd4 <HAL_TIM_PWM_Stop>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000a34 	.word	0x20000a34
 8001464:	200009e8 	.word	0x200009e8
 8001468:	20000950 	.word	0x20000950
 800146c:	2000099c 	.word	0x2000099c

08001470 <calcReload>:
/**
 @brief calculates output frequency
 @param freq -> output frequency for timer
 @return output frequency for timer
 */
int calcReload(double freq){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	ed87 0b00 	vstr	d0, [r7]
	return (TIMER_SPEED/freq);
 800147a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800147e:	a108      	add	r1, pc, #32	@ (adr r1, 80014a0 <calcReload+0x30>)
 8001480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001484:	f7ff fa12 	bl	80008ac <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb92 	bl	8000bb8 <__aeabi_d2iz>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	00000000 	.word	0x00000000
 80014a4:	411e8480 	.word	0x411e8480

080014a8 <playNoteTIM2>:

/**
 @brief outputs note to timer 2, outputs on piezo
 @param note -> note to be played on piezo
 */
void playNoteTIM2(char * note, bool on){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	if(on == true){
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d024      	beq.n	8001504 <playNoteTIM2+0x5c>
		//pitch map to get freq
		int freq = getFreq(note);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f91e 	bl	80016fc <getFreq>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb76 	bl	8000bb8 <__aeabi_d2iz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	60fb      	str	r3, [r7, #12]
		int reload = calcReload(freq);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff f857 	bl	8000584 <__aeabi_i2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	ec43 2b10 	vmov	d0, r2, r3
 80014de:	f7ff ffc7 	bl	8001470 <calcReload>
 80014e2:	60b8      	str	r0, [r7, #8]
		//printf("!!!play note - %d\n", freq);

		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	480e      	ldr	r0, [pc, #56]	@ (8001520 <playNoteTIM2+0x78>)
 80014e8:	f002 fd74 	bl	8003fd4 <HAL_TIM_PWM_Stop>

		__HAL_TIM_SET_AUTORELOAD(&htim2, reload);
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <playNoteTIM2+0x78>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <playNoteTIM2+0x78>)
 80014f8:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	@ (8001520 <playNoteTIM2+0x78>)
 80014fe:	f002 fc6f 	bl	8003de0 <HAL_TIM_PWM_Start>
	} else if (on == false){
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	}
}
 8001502:	e009      	b.n	8001518 <playNoteTIM2+0x70>
	} else if (on == false){
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f083 0301 	eor.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <playNoteTIM2+0x70>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001510:	2100      	movs	r1, #0
 8001512:	4803      	ldr	r0, [pc, #12]	@ (8001520 <playNoteTIM2+0x78>)
 8001514:	f002 fd5e 	bl	8003fd4 <HAL_TIM_PWM_Stop>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000950 	.word	0x20000950

08001524 <playNoteTIM3>:

/**
 @brief outputs note to timer 3, outputs on piezo
 @param note -> note to be played on piezo
 */
void playNoteTIM3(char * note, bool on){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
	if(on == true){
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d024      	beq.n	8001580 <playNoteTIM3+0x5c>
		//pitch map to get freq
		int freq = getFreq(note);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8e0 	bl	80016fc <getFreq>
 800153c:	ec53 2b10 	vmov	r2, r3, d0
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb38 	bl	8000bb8 <__aeabi_d2iz>
 8001548:	4603      	mov	r3, r0
 800154a:	60fb      	str	r3, [r7, #12]
		int reload = calcReload(freq);
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f7ff f819 	bl	8000584 <__aeabi_i2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b10 	vmov	d0, r2, r3
 800155a:	f7ff ff89 	bl	8001470 <calcReload>
 800155e:	60b8      	str	r0, [r7, #8]
		//printf("!!!play note - %d\n", freq);

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001560:	2100      	movs	r1, #0
 8001562:	480e      	ldr	r0, [pc, #56]	@ (800159c <playNoteTIM3+0x78>)
 8001564:	f002 fd36 	bl	8003fd4 <HAL_TIM_PWM_Stop>

		__HAL_TIM_SET_AUTORELOAD(&htim3, reload);
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <playNoteTIM3+0x78>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <playNoteTIM3+0x78>)
 8001574:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001576:	2100      	movs	r1, #0
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <playNoteTIM3+0x78>)
 800157a:	f002 fc31 	bl	8003de0 <HAL_TIM_PWM_Start>
	} else if (on == false){
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
	}
}
 800157e:	e009      	b.n	8001594 <playNoteTIM3+0x70>
	} else if (on == false){
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f083 0301 	eor.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <playNoteTIM3+0x70>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800158c:	2100      	movs	r1, #0
 800158e:	4803      	ldr	r0, [pc, #12]	@ (800159c <playNoteTIM3+0x78>)
 8001590:	f002 fd20 	bl	8003fd4 <HAL_TIM_PWM_Stop>
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000099c 	.word	0x2000099c

080015a0 <playNoteTIM5>:

/**
 @brief outputs note to timer 5, outputs on piezo
 @param note -> note to be played on piezo
 */
void playNoteTIM5(char * note, bool on){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
	if(on == true){
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d024      	beq.n	80015fc <playNoteTIM5+0x5c>
		//pitch map to get freq
		int freq = getFreq(note);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8a2 	bl	80016fc <getFreq>
 80015b8:	ec53 2b10 	vmov	r2, r3, d0
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fafa 	bl	8000bb8 <__aeabi_d2iz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]
		int reload = calcReload(freq);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7fe ffdb 	bl	8000584 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	ec43 2b10 	vmov	d0, r2, r3
 80015d6:	f7ff ff4b 	bl	8001470 <calcReload>
 80015da:	60b8      	str	r0, [r7, #8]
		//printf("!!!play note - %d\n", freq);

		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80015dc:	210c      	movs	r1, #12
 80015de:	480e      	ldr	r0, [pc, #56]	@ (8001618 <playNoteTIM5+0x78>)
 80015e0:	f002 fcf8 	bl	8003fd4 <HAL_TIM_PWM_Stop>

		__HAL_TIM_SET_AUTORELOAD(&htim5, reload);
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <playNoteTIM5+0x78>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <playNoteTIM5+0x78>)
 80015f0:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80015f2:	210c      	movs	r1, #12
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <playNoteTIM5+0x78>)
 80015f6:	f002 fbf3 	bl	8003de0 <HAL_TIM_PWM_Start>
	} else if (on == false){
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
	}
}
 80015fa:	e009      	b.n	8001610 <playNoteTIM5+0x70>
	} else if (on == false){
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <playNoteTIM5+0x70>
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001608:	210c      	movs	r1, #12
 800160a:	4803      	ldr	r0, [pc, #12]	@ (8001618 <playNoteTIM5+0x78>)
 800160c:	f002 fce2 	bl	8003fd4 <HAL_TIM_PWM_Stop>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200009e8 	.word	0x200009e8

0800161c <playNoteTIM12>:

/**
 @brief outputs note to timer 12, outputs on piezo
 @param note -> note to be played on piezo
 */
void playNoteTIM12(char * note, bool on){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
	if(on == true){
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <playNoteTIM12+0x5c>
		//pitch map to get freq
		int freq = getFreq(note);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f864 	bl	80016fc <getFreq>
 8001634:	ec53 2b10 	vmov	r2, r3, d0
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fabc 	bl	8000bb8 <__aeabi_d2iz>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
		int reload = calcReload(freq);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7fe ff9d 	bl	8000584 <__aeabi_i2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ec43 2b10 	vmov	d0, r2, r3
 8001652:	f7ff ff0d 	bl	8001470 <calcReload>
 8001656:	60b8      	str	r0, [r7, #8]
		//printf("!!!play note - %d\n", freq);

		HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001658:	2100      	movs	r1, #0
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <playNoteTIM12+0x78>)
 800165c:	f002 fcba 	bl	8003fd4 <HAL_TIM_PWM_Stop>

		__HAL_TIM_SET_AUTORELOAD(&htim12, reload);
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <playNoteTIM12+0x78>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <playNoteTIM12+0x78>)
 800166c:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800166e:	2100      	movs	r1, #0
 8001670:	4808      	ldr	r0, [pc, #32]	@ (8001694 <playNoteTIM12+0x78>)
 8001672:	f002 fbb5 	bl	8003de0 <HAL_TIM_PWM_Start>
	} else if (on == false){
		HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
	}
}
 8001676:	e009      	b.n	800168c <playNoteTIM12+0x70>
	} else if (on == false){
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f083 0301 	eor.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <playNoteTIM12+0x70>
		HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001684:	2100      	movs	r1, #0
 8001686:	4803      	ldr	r0, [pc, #12]	@ (8001694 <playNoteTIM12+0x78>)
 8001688:	f002 fca4 	bl	8003fd4 <HAL_TIM_PWM_Stop>
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000a34 	.word	0x20000a34

08001698 <volumeUp>:

/**
 @brief increases volume on all piezos by 10%
 */
void volumeUp(){
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

	if(volume <= 45){
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <volumeUp+0x4c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80016a2:	dc1a      	bgt.n	80016da <volumeUp+0x42>
		volume += volChange;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <volumeUp+0x4c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <volumeUp+0x50>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <volumeUp+0x4c>)
 80016b0:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (volume));
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <volumeUp+0x4c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <volumeUp+0x54>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (volume));
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <volumeUp+0x4c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <volumeUp+0x58>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4, (volume));
 80016c6:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <volumeUp+0x4c>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <volumeUp+0x5c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1, (volume));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <volumeUp+0x4c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <volumeUp+0x60>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	//printf("Vol up - %d\n", volume);
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20000004 	.word	0x20000004
 80016e8:	20000008 	.word	0x20000008
 80016ec:	2000099c 	.word	0x2000099c
 80016f0:	20000950 	.word	0x20000950
 80016f4:	200009e8 	.word	0x200009e8
 80016f8:	20000a34 	.word	0x20000a34

080016fc <getFreq>:

/**
 * getFreq
 *  - Returns frequency of corresponding note from noteFrequencies[]
 */
double getFreq(char *note) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	numNotes = sizeof(noteFrequencies) / sizeof(noteFrequencies[0]);
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <getFreq+0x6c>)
 8001706:	2258      	movs	r2, #88	@ 0x58
 8001708:	601a      	str	r2, [r3, #0]
	int freqNum = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
	double freq;
	//printf("Array Size(getFreq) - %d\n", numNotes);

	for (int x = 0; x < numNotes; x++) {
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	e00f      	b.n	8001734 <getFreq+0x38>
		if (strcmp(noteFrequencies[x].note, note) == 0) {
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <getFreq+0x70>)
 800171a:	4413      	add	r3, r2
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fd76 	bl	8000210 <strcmp>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <getFreq+0x32>
			freqNum = x;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	617b      	str	r3, [r7, #20]
	for (int x = 0; x < numNotes; x++) {
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3301      	adds	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <getFreq+0x6c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	429a      	cmp	r2, r3
 800173c:	dbea      	blt.n	8001714 <getFreq+0x18>
		}
	}

	freq = noteFrequencies[freqNum].frequency;
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <getFreq+0x70>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	3308      	adds	r3, #8
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf("Freq - %f, %s\n", freq, noteFrequencies[freqNum].note);
	//printf("Freq - %d, %s\n", (int)freq, noteFrequencies[freqNum].note);

	return freq;
 8001750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001754:	ec43 2b17 	vmov	d7, r2, r3
}
 8001758:	eeb0 0a47 	vmov.f32	s0, s14
 800175c:	eef0 0a67 	vmov.f32	s1, s15
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000000c 	.word	0x2000000c
 800176c:	20000380 	.word	0x20000380

08001770 <initializeNoteFrequencies>:

/**
 * Initializes note frequencies based on the global concert pitch.
 */
void initializeNoteFrequencies() {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
	for (int i = 0; i < 88; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e03a      	b.n	80017f2 <initializeNoteFrequencies+0x82>
		double semitoneOffset = i - A4_INDEX;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b30      	subs	r3, #48	@ 0x30
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe feff 	bl	8000584 <__aeabi_i2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	e9c7 2300 	strd	r2, r3, [r7]
		noteFrequencies[i].frequency = concert_pitch
				* pow(2, semitoneOffset / 12.0);
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <initializeNoteFrequencies+0xa0>)
 8001794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001798:	f7ff f888 	bl	80008ac <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b17 	vmov	d7, r2, r3
 80017a4:	eeb0 1a47 	vmov.f32	s2, s14
 80017a8:	eef0 1a67 	vmov.f32	s3, s15
 80017ac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001808 <initializeNoteFrequencies+0x98>
 80017b0:	f008 fdfc 	bl	800a3ac <pow>
 80017b4:	ec51 0b10 	vmov	r0, r1, d0
 80017b8:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <initializeNoteFrequencies+0xa4>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff4b 	bl	8000658 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
		noteFrequencies[i].frequency = concert_pitch
 80017c6:	4814      	ldr	r0, [pc, #80]	@ (8001818 <initializeNoteFrequencies+0xa8>)
 80017c8:	68f9      	ldr	r1, [r7, #12]
 80017ca:	0109      	lsls	r1, r1, #4
 80017cc:	4401      	add	r1, r0
 80017ce:	3108      	adds	r1, #8
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]
		sprintf(noteFrequencies[i].note, "%s", noteNames[i]);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <initializeNoteFrequencies+0xa8>)
 80017da:	1898      	adds	r0, r3, r2
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <initializeNoteFrequencies+0xac>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	461a      	mov	r2, r3
 80017e6:	490e      	ldr	r1, [pc, #56]	@ (8001820 <initializeNoteFrequencies+0xb0>)
 80017e8:	f005 f9a8 	bl	8006b3c <siprintf>
	for (int i = 0; i < 88; i++) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b57      	cmp	r3, #87	@ 0x57
 80017f6:	ddc1      	ble.n	800177c <initializeNoteFrequencies+0xc>
		//printf("%s, %f\n", noteFrequencies[i].note, noteFrequencies[i].frequency);
	}
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	00000000 	.word	0x00000000
 800180c:	40000000 	.word	0x40000000
 8001810:	40280000 	.word	0x40280000
 8001814:	20000010 	.word	0x20000010
 8001818:	20000380 	.word	0x20000380
 800181c:	20000018 	.word	0x20000018
 8001820:	0800b408 	.word	0x0800b408

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_MspInit+0x44>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a0e      	ldr	r2, [pc, #56]	@ (8001868 <HAL_MspInit+0x44>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_MspInit+0x44>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_MspInit+0x44>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_MspInit+0x44>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_MspInit+0x44>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	@ 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800187c:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <HAL_InitTick+0xd0>)
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	4a2e      	ldr	r2, [pc, #184]	@ (800193c <HAL_InitTick+0xd0>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6453      	str	r3, [r2, #68]	@ 0x44
 8001888:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <HAL_InitTick+0xd0>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001894:	f107 020c 	add.w	r2, r7, #12
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fd4a 	bl	8003338 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018a4:	f001 fd34 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <HAL_InitTick+0xd4>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	3b01      	subs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018bc:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <HAL_InitTick+0xd8>)
 80018be:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <HAL_InitTick+0xdc>)
 80018c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_InitTick+0xd8>)
 80018c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <HAL_InitTick+0xd8>)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <HAL_InitTick+0xd8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_InitTick+0xd8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_InitTick+0xd8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018e2:	4818      	ldr	r0, [pc, #96]	@ (8001944 <HAL_InitTick+0xd8>)
 80018e4:	f002 f94a 	bl	8003b7c <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11b      	bne.n	800192e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018f6:	4813      	ldr	r0, [pc, #76]	@ (8001944 <HAL_InitTick+0xd8>)
 80018f8:	f002 f998 	bl	8003c2c <HAL_TIM_Base_Start_IT>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001906:	2b00      	cmp	r3, #0
 8001908:	d111      	bne.n	800192e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800190a:	2019      	movs	r0, #25
 800190c:	f000 fe4e 	bl	80025ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d808      	bhi.n	8001928 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	2019      	movs	r0, #25
 800191c:	f000 fe2a 	bl	8002574 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001920:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <HAL_InitTick+0xe0>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e002      	b.n	800192e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800192e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001932:	4618      	mov	r0, r3
 8001934:	3730      	adds	r7, #48	@ 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	431bde83 	.word	0x431bde83
 8001944:	20000900 	.word	0x20000900
 8001948:	40010000 	.word	0x40010000
 800194c:	2000017c 	.word	0x2000017c

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <NMI_Handler+0x4>

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <MemManage_Handler+0x4>

08001968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <UsageFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019b6:	f002 fb8d 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000900 	.word	0x20000900

080019c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM2_IRQHandler+0x10>)
 80019ca:	f002 fb83 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000950 	.word	0x20000950

080019d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM3_IRQHandler+0x10>)
 80019de:	f002 fb79 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000099c 	.word	0x2000099c

080019ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_Pin);
 80019f0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019f4:	f000 ffae 	bl	8002954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001a02:	f002 fb67 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000a34 	.word	0x20000a34

08001a10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM5_IRQHandler+0x10>)
 8001a16:	f002 fb5d 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200009e8 	.word	0x200009e8

08001a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_kill>:

int _kill(int pid, int sig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3e:	f005 f933 	bl	8006ca8 <__errno>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_exit>:

void _exit (int status)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe7 	bl	8001a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a66:	bf00      	nop
 8001a68:	e7fd      	b.n	8001a66 <_exit+0x12>

08001a6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e00a      	b.n	8001a92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7c:	f7ff fb76 	bl	800116c <__io_getchar>
 8001a80:	4601      	mov	r1, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	b2ca      	uxtb	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf0      	blt.n	8001a7c <_read+0x12>
  }

  return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e009      	b.n	8001aca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fb42 	bl	8001148 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf1      	blt.n	8001ab6 <_write+0x12>
  }
  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_close>:

int _close(int file)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b04:	605a      	str	r2, [r3, #4]
  return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_isatty>:

int _isatty(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f005 f898 	bl	8006ca8 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20050000 	.word	0x20050000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	2000094c 	.word	0x2000094c
 8001bac:	20000c58 	.word	0x20000c58

08001bb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	@ 0x38
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c10:	22d7      	movs	r2, #215	@ 0xd7
 8001c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1135;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c1c:	f240 426f 	movw	r2, #1135	@ 0x46f
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c28:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c2e:	4824      	ldr	r0, [pc, #144]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c30:	f001 ffa4 	bl	8003b7c <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c3a:	f7ff fbef 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481d      	ldr	r0, [pc, #116]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c4c:	f002 fc5e 	bl	800450c <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c56:	f7ff fbe1 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c5a:	4819      	ldr	r0, [pc, #100]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c5c:	f002 f85e 	bl	8003d1c <HAL_TIM_PWM_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c66:	f7ff fbd9 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4811      	ldr	r0, [pc, #68]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001c7a:	f003 f903 	bl	8004e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c84:	f7ff fbca 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c88:	2360      	movs	r3, #96	@ 0x60
 8001c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1135;
 8001c8c:	f240 436f 	movw	r3, #1135	@ 0x46f
 8001c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001ca2:	f002 fb1f 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001cac:	f7ff fbb6 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <MX_TIM2_Init+0xec>)
 8001cb2:	f000 f9d3 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001cb6:	bf00      	nop
 8001cb8:	3738      	adds	r7, #56	@ 0x38
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000950 	.word	0x20000950

08001cc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	@ 0x38
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001db0 <MX_TIM3_Init+0xec>)
 8001cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001cfe:	22d7      	movs	r2, #215	@ 0xd7
 8001d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1135;
 8001d08:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d0a:	f240 426f 	movw	r2, #1135	@ 0x46f
 8001d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d16:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d1c:	4823      	ldr	r0, [pc, #140]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d1e:	f001 ff2d 	bl	8003b7c <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d28:	f7ff fb78 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d36:	4619      	mov	r1, r3
 8001d38:	481c      	ldr	r0, [pc, #112]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d3a:	f002 fbe7 	bl	800450c <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d44:	f7ff fb6a 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d48:	4818      	ldr	r0, [pc, #96]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d4a:	f001 ffe7 	bl	8003d1c <HAL_TIM_PWM_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d54:	f7ff fb62 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4811      	ldr	r0, [pc, #68]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d68:	f003 f88c 	bl	8004e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d72:	f7ff fb53 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d76:	2360      	movs	r3, #96	@ 0x60
 8001d78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1135;
 8001d7a:	f240 436f 	movw	r3, #1135	@ 0x46f
 8001d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001d90:	f002 faa8 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001d9a:	f7ff fb3f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d9e:	4803      	ldr	r0, [pc, #12]	@ (8001dac <MX_TIM3_Init+0xe8>)
 8001da0:	f000 f95c 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001da4:	bf00      	nop
 8001da6:	3738      	adds	r7, #56	@ 0x38
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000099c 	.word	0x2000099c
 8001db0:	40000400 	.word	0x40000400

08001db4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	@ 0x38
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001de8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea0 <MX_TIM5_Init+0xec>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 215;
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001dee:	22d7      	movs	r2, #215	@ 0xd7
 8001df0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1135;
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001dfa:	f240 426f 	movw	r2, #1135	@ 0x46f
 8001dfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e06:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e0c:	4823      	ldr	r0, [pc, #140]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e0e:	f001 feb5 	bl	8003b7c <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001e18:	f7ff fb00 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e26:	4619      	mov	r1, r3
 8001e28:	481c      	ldr	r0, [pc, #112]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e2a:	f002 fb6f 	bl	800450c <HAL_TIM_ConfigClockSource>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001e34:	f7ff faf2 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e38:	4818      	ldr	r0, [pc, #96]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e3a:	f001 ff6f 	bl	8003d1c <HAL_TIM_PWM_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001e44:	f7ff faea 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4811      	ldr	r0, [pc, #68]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e58:	f003 f814 	bl	8004e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001e62:	f7ff fadb 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e66:	2360      	movs	r3, #96	@ 0x60
 8001e68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1135;
 8001e6a:	f240 436f 	movw	r3, #1135	@ 0x46f
 8001e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e80:	f002 fa30 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8001e8a:	f7ff fac7 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e8e:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <MX_TIM5_Init+0xe8>)
 8001e90:	f000 f8e4 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001e94:	bf00      	nop
 8001e96:	3738      	adds	r7, #56	@ 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200009e8 	.word	0x200009e8
 8001ea0:	40000c00 	.word	0x40000c00

08001ea4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001eca:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001ecc:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <MX_TIM12_Init+0xc4>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 215;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001ed2:	22d7      	movs	r2, #215	@ 0xd7
 8001ed4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1135;
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001ede:	f240 426f 	movw	r2, #1135	@ 0x46f
 8001ee2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001eec:	2280      	movs	r2, #128	@ 0x80
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ef0:	481c      	ldr	r0, [pc, #112]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001ef2:	f001 fe43 	bl	8003b7c <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001efc:	f7ff fa8e 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f04:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4815      	ldr	r0, [pc, #84]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001f0e:	f002 fafd 	bl	800450c <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001f18:	f7ff fa80 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f1c:	4811      	ldr	r0, [pc, #68]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001f1e:	f001 fefd 	bl	8003d1c <HAL_TIM_PWM_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001f28:	f7ff fa78 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2c:	2360      	movs	r3, #96	@ 0x60
 8001f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1135;
 8001f30:	f240 436f 	movw	r3, #1135	@ 0x46f
 8001f34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001f46:	f002 f9cd 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001f50:	f7ff fa64 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f54:	4803      	ldr	r0, [pc, #12]	@ (8001f64 <MX_TIM12_Init+0xc0>)
 8001f56:	f000 f881 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001f5a:	bf00      	nop
 8001f5c:	3730      	adds	r7, #48	@ 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000a34 	.word	0x20000a34
 8001f68:	40001800 	.word	0x40001800

08001f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d114      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7e:	4b33      	ldr	r3, [pc, #204]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a32      	ldr	r2, [pc, #200]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	201c      	movs	r0, #28
 8001f9c:	f000 faea 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fa0:	201c      	movs	r0, #28
 8001fa2:	f000 fb03 	bl	80025ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001fa6:	e04c      	b.n	8002042 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a28      	ldr	r2, [pc, #160]	@ (8002050 <HAL_TIM_Base_MspInit+0xe4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a25      	ldr	r2, [pc, #148]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201d      	movs	r0, #29
 8001fd0:	f000 fad0 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fd4:	201d      	movs	r0, #29
 8001fd6:	f000 fae9 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 8001fda:	e032      	b.n	8002042 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_TIM_Base_MspInit+0xe8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d114      	bne.n	8002010 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a18      	ldr	r2, [pc, #96]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2032      	movs	r0, #50	@ 0x32
 8002004:	f000 fab6 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002008:	2032      	movs	r0, #50	@ 0x32
 800200a:	f000 facf 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 800200e:	e018      	b.n	8002042 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM12)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a10      	ldr	r2, [pc, #64]	@ (8002058 <HAL_TIM_Base_MspInit+0xec>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d113      	bne.n	8002042 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800201a:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a0b      	ldr	r2, [pc, #44]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8002020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_TIM_Base_MspInit+0xe0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	202b      	movs	r0, #43	@ 0x2b
 8002038:	f000 fa9c 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800203c:	202b      	movs	r0, #43	@ 0x2b
 800203e:	f000 fab5 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40000400 	.word	0x40000400
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40001800 	.word	0x40001800

0800205c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207c:	d11d      	bne.n	80020ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a42      	ldr	r2, [pc, #264]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a8:	2301      	movs	r3, #1
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	4837      	ldr	r0, [pc, #220]	@ (8002190 <HAL_TIM_MspPostInit+0x134>)
 80020b4:	f000 fa88 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80020b8:	e064      	b.n	8002184 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a35      	ldr	r2, [pc, #212]	@ (8002194 <HAL_TIM_MspPostInit+0x138>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d11c      	bne.n	80020fe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	4a30      	ldr	r2, [pc, #192]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020dc:	2310      	movs	r3, #16
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ec:	2302      	movs	r3, #2
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4828      	ldr	r0, [pc, #160]	@ (8002198 <HAL_TIM_MspPostInit+0x13c>)
 80020f8:	f000 fa66 	bl	80025c8 <HAL_GPIO_Init>
}
 80020fc:	e042      	b.n	8002184 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM5)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a26      	ldr	r2, [pc, #152]	@ (800219c <HAL_TIM_MspPostInit+0x140>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d11c      	bne.n	8002142 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002108:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002112:	6313      	str	r3, [r2, #48]	@ 0x30
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002120:	2301      	movs	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002130:	2302      	movs	r3, #2
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	4819      	ldr	r0, [pc, #100]	@ (80021a0 <HAL_TIM_MspPostInit+0x144>)
 800213c:	f000 fa44 	bl	80025c8 <HAL_GPIO_Init>
}
 8002140:	e020      	b.n	8002184 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM12)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a17      	ldr	r2, [pc, #92]	@ (80021a4 <HAL_TIM_MspPostInit+0x148>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d11b      	bne.n	8002184 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 8002152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002156:	6313      	str	r3, [r2, #48]	@ 0x30
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_TIM_MspPostInit+0x130>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002164:	2340      	movs	r3, #64	@ 0x40
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002174:	2309      	movs	r3, #9
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <HAL_TIM_MspPostInit+0x14c>)
 8002180:	f000 fa22 	bl	80025c8 <HAL_GPIO_Init>
}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	@ 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000
 8002194:	40000400 	.word	0x40000400
 8002198:	40020400 	.word	0x40020400
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40001800 	.word	0x40001800
 80021a8:	40021c00 	.word	0x40021c00

080021ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021b2:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <MX_USART1_UART_Init+0x5c>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021b6:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	@ (8002204 <MX_USART1_UART_Init+0x58>)
 80021f0:	f002 fef4 	bl	8004fdc <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021fa:	f7ff f90f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000a80 	.word	0x20000a80
 8002208:	40011000 	.word	0x40011000

0800220c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0ac      	sub	sp, #176	@ 0xb0
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	2284      	movs	r2, #132	@ 0x84
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fce8 	bl	8006c02 <memset>
  if(uartHandle->Instance==USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a32      	ldr	r2, [pc, #200]	@ (8002300 <HAL_UART_MspInit+0xf4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d15c      	bne.n	80022f6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800223c:	2340      	movs	r3, #64	@ 0x40
 800223e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002240:	2300      	movs	r3, #0
 8002242:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	4618      	mov	r0, r3
 800224a:	f001 f8a7 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002254:	f7ff f8e2 	bl	800141c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002258:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	4a29      	ldr	r2, [pc, #164]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 800225e:	f043 0310 	orr.w	r3, r3, #16
 8002262:	6453      	str	r3, [r2, #68]	@ 0x44
 8002264:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
 800227c:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6313      	str	r3, [r2, #48]	@ 0x30
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_UART_MspInit+0xf8>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b8:	2307      	movs	r3, #7
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022c2:	4619      	mov	r1, r3
 80022c4:	4810      	ldr	r0, [pc, #64]	@ (8002308 <HAL_UART_MspInit+0xfc>)
 80022c6:	f000 f97f 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e4:	2307      	movs	r3, #7
 80022e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022ee:	4619      	mov	r1, r3
 80022f0:	4806      	ldr	r0, [pc, #24]	@ (800230c <HAL_UART_MspInit+0x100>)
 80022f2:	f000 f969 	bl	80025c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	37b0      	adds	r7, #176	@ 0xb0
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40011000 	.word	0x40011000
 8002304:	40023800 	.word	0x40023800
 8002308:	40020400 	.word	0x40020400
 800230c:	40020000 	.word	0x40020000

08002310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002348 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002314:	f7ff fc4c 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	@ (800234c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	@ (8002350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	@ (800235c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800233e:	f004 fcb9 	bl	8006cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002342:	f7fe ff2b 	bl	800119c <main>
  bx  lr    
 8002346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8002354:	0800b890 	.word	0x0800b890
  ldr r2, =_sbss
 8002358:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 800235c:	20000c58 	.word	0x20000c58

08002360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC_IRQHandler>

08002362 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002366:	2003      	movs	r0, #3
 8002368:	f000 f8f9 	bl	800255e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236c:	200f      	movs	r0, #15
 800236e:	f7ff fa7d 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002372:	f7ff fa57 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000180 	.word	0x20000180
 80023a0:	20000b08 	.word	0x20000b08

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000b08 	.word	0x20000b08

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000180 	.word	0x20000180

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <__NVIC_SetPriorityGrouping+0x40>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	4313      	orrs	r3, r2
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <__NVIC_SetPriorityGrouping+0x40>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	05fa0000 	.word	0x05fa0000

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	@ (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	@ (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	@ (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff4c 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002586:	f7ff ff61 	bl	800244c <__NVIC_GetPriorityGrouping>
 800258a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	6978      	ldr	r0, [r7, #20]
 8002592:	f7ff ffb1 	bl	80024f8 <NVIC_EncodePriority>
 8002596:	4602      	mov	r2, r0
 8002598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff80 	bl	80024a4 <__NVIC_SetPriority>
}
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff54 	bl	8002468 <__NVIC_EnableIRQ>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e175      	b.n	80028d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 8164 	bne.w	80028ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_GPIO_Init+0x56>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d130      	bne.n	8002680 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b03      	cmp	r3, #3
 800268a:	d017      	beq.n	80026bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d123      	bne.n	8002710 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80be 	beq.w	80028ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <HAL_GPIO_Init+0x324>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_GPIO_Init+0x324>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800275c:	6453      	str	r3, [r2, #68]	@ 0x44
 800275e:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <HAL_GPIO_Init+0x324>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800276a:	4a61      	ldr	r2, [pc, #388]	@ (80028f0 <HAL_GPIO_Init+0x328>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a58      	ldr	r2, [pc, #352]	@ (80028f4 <HAL_GPIO_Init+0x32c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d037      	beq.n	8002806 <HAL_GPIO_Init+0x23e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_GPIO_Init+0x330>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_GPIO_Init+0x23a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <HAL_GPIO_Init+0x334>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <HAL_GPIO_Init+0x236>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a55      	ldr	r2, [pc, #340]	@ (8002900 <HAL_GPIO_Init+0x338>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x232>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a54      	ldr	r2, [pc, #336]	@ (8002904 <HAL_GPIO_Init+0x33c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x22e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a53      	ldr	r2, [pc, #332]	@ (8002908 <HAL_GPIO_Init+0x340>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x22a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_GPIO_Init+0x344>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x226>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a51      	ldr	r2, [pc, #324]	@ (8002910 <HAL_GPIO_Init+0x348>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x222>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a50      	ldr	r2, [pc, #320]	@ (8002914 <HAL_GPIO_Init+0x34c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x21e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002918 <HAL_GPIO_Init+0x350>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x21a>
 80027de:	2309      	movs	r3, #9
 80027e0:	e012      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027e2:	230a      	movs	r3, #10
 80027e4:	e010      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027e6:	2308      	movs	r3, #8
 80027e8:	e00e      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e00c      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027ee:	2306      	movs	r3, #6
 80027f0:	e00a      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027f2:	2305      	movs	r3, #5
 80027f4:	e008      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e004      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027fe:	2302      	movs	r3, #2
 8002800:	e002      	b.n	8002808 <HAL_GPIO_Init+0x240>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x240>
 8002806:	2300      	movs	r3, #0
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f002 0203 	and.w	r2, r2, #3
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	4093      	lsls	r3, r2
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002818:	4935      	ldr	r1, [pc, #212]	@ (80028f0 <HAL_GPIO_Init+0x328>)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <HAL_GPIO_Init+0x354>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284a:	4a34      	ldr	r2, [pc, #208]	@ (800291c <HAL_GPIO_Init+0x354>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002850:	4b32      	ldr	r3, [pc, #200]	@ (800291c <HAL_GPIO_Init+0x354>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002874:	4a29      	ldr	r2, [pc, #164]	@ (800291c <HAL_GPIO_Init+0x354>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287a:	4b28      	ldr	r3, [pc, #160]	@ (800291c <HAL_GPIO_Init+0x354>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289e:	4a1f      	ldr	r2, [pc, #124]	@ (800291c <HAL_GPIO_Init+0x354>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_GPIO_Init+0x354>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <HAL_GPIO_Init+0x354>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	f67f ae86 	bls.w	80025e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	@ 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020c00 	.word	0x40020c00
 8002904:	40021000 	.word	0x40021000
 8002908:	40021400 	.word	0x40021400
 800290c:	40021800 	.word	0x40021800
 8002910:	40021c00 	.word	0x40021c00
 8002914:	40022000 	.word	0x40022000
 8002918:	40022400 	.word	0x40022400
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800296a:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fcec 	bl	8001350 <HAL_GPIO_EXTI_Callback>
  }
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40013c00 	.word	0x40013c00

08002984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b23      	ldr	r3, [pc, #140]	@ (8002a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a22      	ldr	r2, [pc, #136]	@ (8002a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <HAL_PWREx_EnableOverDrive+0x98>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b2:	f7ff fcf7 	bl	80023a4 <HAL_GetTick>
 80029b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029b8:	e009      	b.n	80029ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029ba:	f7ff fcf3 	bl	80023a4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029c8:	d901      	bls.n	80029ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e022      	b.n	8002a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029da:	d1ee      	bne.n	80029ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e8:	f7ff fcdc 	bl	80023a4 <HAL_GetTick>
 80029ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ee:	e009      	b.n	8002a04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029f0:	f7ff fcd8 	bl	80023a4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029fe:	d901      	bls.n	8002a04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e007      	b.n	8002a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a10:	d1ee      	bne.n	80029f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40007000 	.word	0x40007000

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e291      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	4b96      	ldr	r3, [pc, #600]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a54:	4b93      	ldr	r3, [pc, #588]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d112      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62>
 8002a60:	4b90      	ldr	r3, [pc, #576]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d06c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x130>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d168      	bne.n	8002b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e26b      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x7a>
 8002a90:	4b84      	ldr	r3, [pc, #528]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a83      	ldr	r2, [pc, #524]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e02e      	b.n	8002afc <HAL_RCC_OscConfig+0xd8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x9c>
 8002aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xd8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xc0>
 8002aca:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a75      	ldr	r2, [pc, #468]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b73      	ldr	r3, [pc, #460]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a72      	ldr	r2, [pc, #456]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xd8>
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff fc4e 	bl	80023a4 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff fc4a 	bl	80023a4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e21f      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe8>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fc3a 	bl	80023a4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff fc36 	bl	80023a4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e20b      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b57      	ldr	r3, [pc, #348]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x110>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d069      	beq.n	8002c36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b62:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x190>
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1df      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	493d      	ldr	r1, [pc, #244]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e040      	b.n	8002c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a38      	ldr	r2, [pc, #224]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff fbec 	bl	80023a4 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7ff fbe8 	bl	80023a4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1bd      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4929      	ldr	r1, [pc, #164]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
 8002c02:	e018      	b.n	8002c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c04:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a26      	ldr	r2, [pc, #152]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7ff fbc8 	bl	80023a4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c18:	f7ff fbc4 	bl	80023a4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e199      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d038      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d019      	beq.n	8002c7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7ff fba5 	bl	80023a4 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fba1 	bl	80023a4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e176      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x23a>
 8002c7c:	e01a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c82:	4a08      	ldr	r2, [pc, #32]	@ (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7ff fb8b 	bl	80023a4 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7ff fb87 	bl	80023a4 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d903      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e15c      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
 8002ca4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b91      	ldr	r3, [pc, #580]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a4 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b88      	ldr	r3, [pc, #544]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	4a87      	ldr	r2, [pc, #540]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cda:	4b85      	ldr	r3, [pc, #532]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cea:	4b82      	ldr	r3, [pc, #520]	@ (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7ff fb4f 	bl	80023a4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7ff fb4b 	bl	80023a4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	@ 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e120      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x31a>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d34:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x376>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x33c>
 8002d46:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	4a69      	ldr	r2, [pc, #420]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d52:	4b67      	ldr	r3, [pc, #412]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d56:	4a66      	ldr	r2, [pc, #408]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x376>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x35e>
 8002d68:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a60      	ldr	r2, [pc, #384]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d74:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x376>
 8002d82:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	4b58      	ldr	r3, [pc, #352]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a57      	ldr	r2, [pc, #348]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7ff faff 	bl	80023a4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7ff fafb 	bl	80023a4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ce      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x386>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7ff fae9 	bl	80023a4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7ff fae5 	bl	80023a4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0b8      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a4 	beq.w	8002f5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d06b      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d149      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7ff fab6 	bl	80023a4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7ff fab2 	bl	80023a4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e087      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	019b      	lsls	r3, r3, #6
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7ff fa86 	bl	80023a4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7ff fa82 	bl	80023a4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e057      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x478>
 8002eba:	e04f      	b.n	8002f5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7ff fa6c 	bl	80023a4 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7ff fa68 	bl	80023a4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e03d      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4ac>
 8002eee:	e035      	b.n	8002f5c <HAL_RCC_OscConfig+0x538>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <HAL_RCC_OscConfig+0x544>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d028      	beq.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d0      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d910      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b67      	ldr	r3, [pc, #412]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	4965      	ldr	r1, [pc, #404]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b8      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe4:	4b53      	ldr	r3, [pc, #332]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	494d      	ldr	r1, [pc, #308]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d040      	beq.n	8003090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e073      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4936      	ldr	r1, [pc, #216]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003060:	f7ff f9a0 	bl	80023a4 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7ff f99c 	bl	80023a4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e053      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2d      	ldr	r3, [pc, #180]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d210      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 020f 	bic.w	r2, r3, #15
 80030a6:	4922      	ldr	r1, [pc, #136]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e032      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4916      	ldr	r1, [pc, #88]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	490e      	ldr	r1, [pc, #56]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fe:	f000 f821 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490a      	ldr	r1, [pc, #40]	@ (8003138 <HAL_RCC_ClockConfig+0x1cc>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	4a09      	ldr	r2, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1d0>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <HAL_RCC_ClockConfig+0x1d4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fba4 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023c00 	.word	0x40023c00
 8003134:	40023800 	.word	0x40023800
 8003138:	0800b40c 	.word	0x0800b40c
 800313c:	20000178 	.word	0x20000178
 8003140:	2000017c 	.word	0x2000017c

08003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003148:	b090      	sub	sp, #64	@ 0x40
 800314a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003150:	2300      	movs	r3, #0
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315c:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d00d      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x40>
 8003168:	2b08      	cmp	r3, #8
 800316a:	f200 80a1 	bhi.w	80032b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x34>
 8003172:	2b04      	cmp	r3, #4
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x3a>
 8003176:	e09b      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800317c:	e09b      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317e:	4b53      	ldr	r3, [pc, #332]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003182:	e098      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003184:	4b4f      	ldr	r3, [pc, #316]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800318e:	4b4d      	ldr	r3, [pc, #308]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d028      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319a:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	099b      	lsrs	r3, r3, #6
 80031a0:	2200      	movs	r2, #0
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031ac:	2100      	movs	r1, #0
 80031ae:	4b47      	ldr	r3, [pc, #284]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x188>)
 80031b0:	fb03 f201 	mul.w	r2, r3, r1
 80031b4:	2300      	movs	r3, #0
 80031b6:	fb00 f303 	mul.w	r3, r0, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	4a43      	ldr	r2, [pc, #268]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x188>)
 80031be:	fba0 1202 	umull	r1, r2, r0, r2
 80031c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c4:	460a      	mov	r2, r1
 80031c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ca:	4413      	add	r3, r2
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d0:	2200      	movs	r2, #0
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	61fa      	str	r2, [r7, #28]
 80031d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031de:	f7fd fd83 	bl	8000ce8 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4613      	mov	r3, r2
 80031e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ea:	e053      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ec:	4b35      	ldr	r3, [pc, #212]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	2200      	movs	r2, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	617a      	str	r2, [r7, #20]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031fe:	f04f 0b00 	mov.w	fp, #0
 8003202:	4652      	mov	r2, sl
 8003204:	465b      	mov	r3, fp
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003214:	0150      	lsls	r0, r2, #5
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	ebb2 080a 	subs.w	r8, r2, sl
 800321e:	eb63 090b 	sbc.w	r9, r3, fp
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800322e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003232:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003236:	ebb2 0408 	subs.w	r4, r2, r8
 800323a:	eb63 0509 	sbc.w	r5, r3, r9
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	00eb      	lsls	r3, r5, #3
 8003248:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324c:	00e2      	lsls	r2, r4, #3
 800324e:	4614      	mov	r4, r2
 8003250:	461d      	mov	r5, r3
 8003252:	eb14 030a 	adds.w	r3, r4, sl
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	eb45 030b 	adc.w	r3, r5, fp
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326a:	4629      	mov	r1, r5
 800326c:	028b      	lsls	r3, r1, #10
 800326e:	4621      	mov	r1, r4
 8003270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003274:	4621      	mov	r1, r4
 8003276:	028a      	lsls	r2, r1, #10
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	2200      	movs	r2, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	60fa      	str	r2, [r7, #12]
 8003284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003288:	f7fd fd2e 	bl	8000ce8 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4613      	mov	r3, r2
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	3301      	adds	r3, #1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80032b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3740      	adds	r7, #64	@ 0x40
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	017d7840 	.word	0x017d7840

080032d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000178 	.word	0x20000178

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff0 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4903      	ldr	r1, [pc, #12]	@ (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	0800b41c 	.word	0x0800b41c

08003310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003314:	f7ff ffdc 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0b5b      	lsrs	r3, r3, #13
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	@ (8003334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	0800b41c 	.word	0x0800b41c

08003338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	220f      	movs	r2, #15
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003354:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003360:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800336c:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800337a:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <HAL_RCC_GetClockConfig+0x60>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	40023c00 	.word	0x40023c00

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033c4:	4b69      	ldr	r3, [pc, #420]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a68      	ldr	r2, [pc, #416]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	4b66      	ldr	r3, [pc, #408]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d8:	4964      	ldr	r1, [pc, #400]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f6:	4b5d      	ldr	r3, [pc, #372]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	4959      	ldr	r1, [pc, #356]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003414:	d101      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d017      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003432:	4b4e      	ldr	r3, [pc, #312]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003438:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	494a      	ldr	r1, [pc, #296]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003450:	d101      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 808b 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	4a39      	ldr	r2, [pc, #228]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348a:	6413      	str	r3, [r2, #64]	@ 0x40
 800348c:	4b37      	ldr	r3, [pc, #220]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003498:	4b35      	ldr	r3, [pc, #212]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a34      	ldr	r2, [pc, #208]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe ff7e 	bl	80023a4 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7fe ff7a 	bl	80023a4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e357      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034be:	4b2c      	ldr	r3, [pc, #176]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ca:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d035      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d02e      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e8:	4b20      	ldr	r3, [pc, #128]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034fe:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003508:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800350a:	4a18      	ldr	r2, [pc, #96]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003510:	4b16      	ldr	r3, [pc, #88]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d114      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe ff42 	bl	80023a4 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe ff3e 	bl	80023a4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e319      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ee      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003552:	d111      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003560:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003562:	400b      	ands	r3, r1
 8003564:	4901      	ldr	r1, [pc, #4]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e00b      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800356c:	40023800 	.word	0x40023800
 8003570:	40007000 	.word	0x40007000
 8003574:	0ffffcff 	.word	0x0ffffcff
 8003578:	4baa      	ldr	r3, [pc, #680]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4aa9      	ldr	r2, [pc, #676]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003582:	6093      	str	r3, [r2, #8]
 8003584:	4ba7      	ldr	r3, [pc, #668]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	49a4      	ldr	r1, [pc, #656]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003592:	4313      	orrs	r3, r2
 8003594:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a8:	4a9e      	ldr	r2, [pc, #632]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035b2:	4b9c      	ldr	r3, [pc, #624]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	4999      	ldr	r1, [pc, #612]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d0:	4b94      	ldr	r3, [pc, #592]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035de:	4991      	ldr	r1, [pc, #580]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003600:	4988      	ldr	r1, [pc, #544]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003614:	4b83      	ldr	r3, [pc, #524]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003622:	4980      	ldr	r1, [pc, #512]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003636:	4b7b      	ldr	r3, [pc, #492]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4977      	ldr	r1, [pc, #476]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003658:	4b72      	ldr	r3, [pc, #456]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	496f      	ldr	r1, [pc, #444]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800367a:	4b6a      	ldr	r3, [pc, #424]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003680:	f023 020c 	bic.w	r2, r3, #12
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003688:	4966      	ldr	r1, [pc, #408]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369c:	4b61      	ldr	r3, [pc, #388]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	495e      	ldr	r1, [pc, #376]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036be:	4b59      	ldr	r3, [pc, #356]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	4955      	ldr	r1, [pc, #340]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036e0:	4b50      	ldr	r3, [pc, #320]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	494d      	ldr	r1, [pc, #308]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003702:	4b48      	ldr	r3, [pc, #288]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	4944      	ldr	r1, [pc, #272]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003724:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003732:	493c      	ldr	r1, [pc, #240]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003746:	4b37      	ldr	r3, [pc, #220]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	4933      	ldr	r1, [pc, #204]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003768:	4b2e      	ldr	r3, [pc, #184]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003776:	492b      	ldr	r1, [pc, #172]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d011      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800378a:	4b26      	ldr	r3, [pc, #152]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003790:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003798:	4922      	ldr	r1, [pc, #136]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ca:	4b16      	ldr	r3, [pc, #88]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d8:	4912      	ldr	r1, [pc, #72]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fc:	4909      	ldr	r1, [pc, #36]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d006      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80d9 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003818:	4b02      	ldr	r3, [pc, #8]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a01      	ldr	r2, [pc, #4]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003824:	40023800 	.word	0x40023800
 8003828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382a:	f7fe fdbb 	bl	80023a4 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003832:	f7fe fdb7 	bl	80023a4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	@ 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e194      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003844:	4b6c      	ldr	r3, [pc, #432]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d021      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003860:	2b00      	cmp	r3, #0
 8003862:	d11d      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003864:	4b64      	ldr	r3, [pc, #400]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003872:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003878:	0e1b      	lsrs	r3, r3, #24
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	019a      	lsls	r2, r3, #6
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	431a      	orrs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	071b      	lsls	r3, r3, #28
 8003898:	4957      	ldr	r1, [pc, #348]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02e      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ca:	d129      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038cc:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e0:	0f1b      	lsrs	r3, r3, #28
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	019a      	lsls	r2, r3, #6
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	431a      	orrs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	071b      	lsls	r3, r3, #28
 8003900:	493d      	ldr	r1, [pc, #244]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003908:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800390e:	f023 021f 	bic.w	r2, r3, #31
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	3b01      	subs	r3, #1
 8003918:	4937      	ldr	r1, [pc, #220]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800392c:	4b32      	ldr	r3, [pc, #200]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003932:	0e1b      	lsrs	r3, r3, #24
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800393a:	4b2f      	ldr	r3, [pc, #188]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003940:	0f1b      	lsrs	r3, r3, #28
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	019a      	lsls	r2, r3, #6
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	431a      	orrs	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	071b      	lsls	r3, r3, #28
 8003960:	4925      	ldr	r1, [pc, #148]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d011      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	019a      	lsls	r2, r3, #6
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	071b      	lsls	r3, r3, #28
 8003990:	4919      	ldr	r1, [pc, #100]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003998:	4b17      	ldr	r3, [pc, #92]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a16      	ldr	r2, [pc, #88]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fe fcfe 	bl	80023a4 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ac:	f7fe fcfa 	bl	80023a4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0d7      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039be:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 80cd 	bne.w	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039d2:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a08      	ldr	r2, [pc, #32]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039de:	f7fe fce1 	bl	80023a4 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039e6:	f7fe fcdd 	bl	80023a4 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b64      	cmp	r3, #100	@ 0x64
 80039f2:	d903      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0ba      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80039f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a08:	d0ed      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d12a      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a32:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a40:	4b4d      	ldr	r3, [pc, #308]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a46:	0f1b      	lsrs	r3, r3, #28
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	019a      	lsls	r2, r3, #6
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	4944      	ldr	r1, [pc, #272]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a6e:	4b42      	ldr	r3, [pc, #264]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	493d      	ldr	r1, [pc, #244]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d022      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a9c:	d11d      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a9e:	4b36      	ldr	r3, [pc, #216]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	0e1b      	lsrs	r3, r3, #24
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003aac:	4b32      	ldr	r3, [pc, #200]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	0f1b      	lsrs	r3, r3, #28
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	019a      	lsls	r2, r3, #6
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	071b      	lsls	r3, r3, #28
 8003ad2:	4929      	ldr	r1, [pc, #164]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d028      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	0e1b      	lsrs	r3, r3, #24
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003af4:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	019a      	lsls	r2, r3, #6
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	071b      	lsls	r3, r3, #28
 8003b1a:	4917      	ldr	r1, [pc, #92]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	4911      	ldr	r1, [pc, #68]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fe fc2e 	bl	80023a4 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b4c:	f7fe fc2a 	bl	80023a4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e007      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6a:	d1ef      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e049      	b.n	8003c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe f9e2 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fd98 	bl	80046f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e054      	b.n	8003cee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6e:	d01d      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a21      	ldr	r2, [pc, #132]	@ (8003d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1e      	ldr	r2, [pc, #120]	@ (8003d0c <HAL_TIM_Base_Start_IT+0xe0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d10 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d14 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d115      	bne.n	8003cd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <HAL_TIM_Base_Start_IT+0xec>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d015      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0xbe>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc4:	d011      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	e008      	b.n	8003cea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40001800 	.word	0x40001800
 8003d18:	00010007 	.word	0x00010007

08003d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e049      	b.n	8003dc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f841 	bl	8003dca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fcc8 	bl	80046f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_TIM_PWM_Start+0x24>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e03c      	b.n	8003e7e <HAL_TIM_PWM_Start+0x9e>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d109      	bne.n	8003e1e <HAL_TIM_PWM_Start+0x3e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e02f      	b.n	8003e7e <HAL_TIM_PWM_Start+0x9e>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d109      	bne.n	8003e38 <HAL_TIM_PWM_Start+0x58>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e022      	b.n	8003e7e <HAL_TIM_PWM_Start+0x9e>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d109      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x72>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e015      	b.n	8003e7e <HAL_TIM_PWM_Start+0x9e>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d109      	bne.n	8003e6c <HAL_TIM_PWM_Start+0x8c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e008      	b.n	8003e7e <HAL_TIM_PWM_Start+0x9e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e092      	b.n	8003fac <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0xb6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e94:	e023      	b.n	8003ede <HAL_TIM_PWM_Start+0xfe>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0xc6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea4:	e01b      	b.n	8003ede <HAL_TIM_PWM_Start+0xfe>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0xd6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb4:	e013      	b.n	8003ede <HAL_TIM_PWM_Start+0xfe>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b0c      	cmp	r3, #12
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_PWM_Start+0xe6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ec4:	e00b      	b.n	8003ede <HAL_TIM_PWM_Start+0xfe>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0xf6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed4:	e003      	b.n	8003ede <HAL_TIM_PWM_Start+0xfe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 ffa6 	bl	8004e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <HAL_TIM_PWM_Start+0x1d4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIM_PWM_Start+0x120>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <HAL_TIM_PWM_Start+0x1d8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_PWM_Start+0x124>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_TIM_PWM_Start+0x126>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	@ (8003fb4 <HAL_TIM_PWM_Start+0x1d4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2c:	d01d      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <HAL_TIM_PWM_Start+0x1dc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	@ (8003fc0 <HAL_TIM_PWM_Start+0x1e0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc4 <HAL_TIM_PWM_Start+0x1e4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a19      	ldr	r2, [pc, #100]	@ (8003fb8 <HAL_TIM_PWM_Start+0x1d8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc8 <HAL_TIM_PWM_Start+0x1e8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x18a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a19      	ldr	r2, [pc, #100]	@ (8003fcc <HAL_TIM_PWM_Start+0x1ec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d115      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <HAL_TIM_PWM_Start+0x1f0>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d015      	beq.n	8003fa8 <HAL_TIM_PWM_Start+0x1c8>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f82:	d011      	beq.n	8003fa8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	e008      	b.n	8003fa8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e000      	b.n	8003faa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40001800 	.word	0x40001800
 8003fd0:	00010007 	.word	0x00010007

08003fd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ff26 	bl	8004e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a36      	ldr	r2, [pc, #216]	@ (80040cc <HAL_TIM_PWM_Stop+0xf8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_PWM_Stop+0x2c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a35      	ldr	r2, [pc, #212]	@ (80040d0 <HAL_TIM_PWM_Stop+0xfc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_PWM_Stop+0x30>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_TIM_PWM_Stop+0x32>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d017      	beq.n	800403a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_TIM_PWM_Stop+0x66>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	f240 4344 	movw	r3, #1092	@ 0x444
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <HAL_TIM_PWM_Stop+0x66>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_TIM_PWM_Stop+0x96>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	f240 4344 	movw	r3, #1092	@ 0x444
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_TIM_PWM_Stop+0x96>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_TIM_PWM_Stop+0xa6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004078:	e023      	b.n	80040c2 <HAL_TIM_PWM_Stop+0xee>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b04      	cmp	r3, #4
 800407e:	d104      	bne.n	800408a <HAL_TIM_PWM_Stop+0xb6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004088:	e01b      	b.n	80040c2 <HAL_TIM_PWM_Stop+0xee>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Stop+0xc6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004098:	e013      	b.n	80040c2 <HAL_TIM_PWM_Stop+0xee>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Stop+0xd6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_PWM_Stop+0xee>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Stop+0xe6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_PWM_Stop+0xee>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400

080040d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01b      	beq.n	8004138 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0202 	mvn.w	r2, #2
 8004108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fac8 	bl	80046b4 <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 faba 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 facb 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0204 	mvn.w	r2, #4
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 faa2 	bl	80046b4 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa94 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 faa5 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0208 	mvn.w	r2, #8
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2204      	movs	r2, #4
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fa7c 	bl	80046b4 <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa6e 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fa7f 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0210 	mvn.w	r2, #16
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2208      	movs	r2, #8
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa56 	bl	80046b4 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa48 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa59 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0201 	mvn.w	r2, #1
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd f8dc 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00c      	beq.n	800426e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fea3 	bl	8004fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00c      	beq.n	8004292 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fe9b 	bl	8004fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa13 	bl	80046dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0220 	mvn.w	r2, #32
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fe63 	bl	8004fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0ff      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b14      	cmp	r3, #20
 800430e:	f200 80f0 	bhi.w	80044f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004312:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	0800436d 	.word	0x0800436d
 800431c:	080044f3 	.word	0x080044f3
 8004320:	080044f3 	.word	0x080044f3
 8004324:	080044f3 	.word	0x080044f3
 8004328:	080043ad 	.word	0x080043ad
 800432c:	080044f3 	.word	0x080044f3
 8004330:	080044f3 	.word	0x080044f3
 8004334:	080044f3 	.word	0x080044f3
 8004338:	080043ef 	.word	0x080043ef
 800433c:	080044f3 	.word	0x080044f3
 8004340:	080044f3 	.word	0x080044f3
 8004344:	080044f3 	.word	0x080044f3
 8004348:	0800442f 	.word	0x0800442f
 800434c:	080044f3 	.word	0x080044f3
 8004350:	080044f3 	.word	0x080044f3
 8004354:	080044f3 	.word	0x080044f3
 8004358:	08004471 	.word	0x08004471
 800435c:	080044f3 	.word	0x080044f3
 8004360:	080044f3 	.word	0x080044f3
 8004364:	080044f3 	.word	0x080044f3
 8004368:	080044b1 	.word	0x080044b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fa68 	bl	8004848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
      break;
 80043aa:	e0a5      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 faba 	bl	800492c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6999      	ldr	r1, [r3, #24]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
      break;
 80043ec:	e084      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fb11 	bl	8004a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0208 	orr.w	r2, r2, #8
 8004408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0204 	bic.w	r2, r2, #4
 8004418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69d9      	ldr	r1, [r3, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]
      break;
 800442c:	e064      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fb67 	bl	8004b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69d9      	ldr	r1, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	61da      	str	r2, [r3, #28]
      break;
 800446e:	e043      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fb9e 	bl	8004bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044ae:	e023      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fbd0 	bl	8004c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044f0:	e002      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
      break;
 80044f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004500:	7dfb      	ldrb	r3, [r7, #23]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop

0800450c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIM_ConfigClockSource+0x1c>
 8004524:	2302      	movs	r3, #2
 8004526:	e0b4      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x186>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	4b56      	ldr	r3, [pc, #344]	@ (800469c <HAL_TIM_ConfigClockSource+0x190>)
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800454e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004560:	d03e      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004566:	f200 8087 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	f000 8086 	beq.w	800467e <HAL_TIM_ConfigClockSource+0x172>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004576:	d87f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b70      	cmp	r3, #112	@ 0x70
 800457a:	d01a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xa6>
 800457c:	2b70      	cmp	r3, #112	@ 0x70
 800457e:	d87b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b60      	cmp	r3, #96	@ 0x60
 8004582:	d050      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x11a>
 8004584:	2b60      	cmp	r3, #96	@ 0x60
 8004586:	d877      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b50      	cmp	r3, #80	@ 0x50
 800458a:	d03c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xfa>
 800458c:	2b50      	cmp	r3, #80	@ 0x50
 800458e:	d873      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	d058      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x13a>
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d86f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b30      	cmp	r3, #48	@ 0x30
 800459a:	d064      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b30      	cmp	r3, #48	@ 0x30
 800459e:	d86b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d060      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d867      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05c      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d05a      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	e062      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	f000 fc19 	bl	8004df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e04f      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	f000 fc02 	bl	8004df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e03c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fb76 	bl	8004d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2150      	movs	r1, #80	@ 0x50
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fbcf 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004624:	e02c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fb95 	bl	8004d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2160      	movs	r1, #96	@ 0x60
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fbbf 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004644:	e01c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fb56 	bl	8004d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2140      	movs	r1, #64	@ 0x40
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fbaf 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004664:	e00c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fba6 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004676:	e003      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e000      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800467e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	fffeff88 	.word	0xfffeff88

080046a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a46      	ldr	r2, [pc, #280]	@ (800481c <TIM_Base_SetConfig+0x12c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470e:	d00f      	beq.n	8004730 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a43      	ldr	r2, [pc, #268]	@ (8004820 <TIM_Base_SetConfig+0x130>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a42      	ldr	r2, [pc, #264]	@ (8004824 <TIM_Base_SetConfig+0x134>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a41      	ldr	r2, [pc, #260]	@ (8004828 <TIM_Base_SetConfig+0x138>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a40      	ldr	r2, [pc, #256]	@ (800482c <TIM_Base_SetConfig+0x13c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d108      	bne.n	8004742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a35      	ldr	r2, [pc, #212]	@ (800481c <TIM_Base_SetConfig+0x12c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d02b      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004750:	d027      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a32      	ldr	r2, [pc, #200]	@ (8004820 <TIM_Base_SetConfig+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d023      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a31      	ldr	r2, [pc, #196]	@ (8004824 <TIM_Base_SetConfig+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01f      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a30      	ldr	r2, [pc, #192]	@ (8004828 <TIM_Base_SetConfig+0x138>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01b      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2f      	ldr	r2, [pc, #188]	@ (800482c <TIM_Base_SetConfig+0x13c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d017      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2e      	ldr	r2, [pc, #184]	@ (8004830 <TIM_Base_SetConfig+0x140>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2d      	ldr	r2, [pc, #180]	@ (8004834 <TIM_Base_SetConfig+0x144>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00f      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2c      	ldr	r2, [pc, #176]	@ (8004838 <TIM_Base_SetConfig+0x148>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a2b      	ldr	r2, [pc, #172]	@ (800483c <TIM_Base_SetConfig+0x14c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2a      	ldr	r2, [pc, #168]	@ (8004840 <TIM_Base_SetConfig+0x150>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a29      	ldr	r2, [pc, #164]	@ (8004844 <TIM_Base_SetConfig+0x154>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a10      	ldr	r2, [pc, #64]	@ (800481c <TIM_Base_SetConfig+0x12c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_Base_SetConfig+0xf8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a12      	ldr	r2, [pc, #72]	@ (800482c <TIM_Base_SetConfig+0x13c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]
  }
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40010400 	.word	0x40010400
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800
 800483c:	40001800 	.word	0x40001800
 8004840:	40001c00 	.word	0x40001c00
 8004844:	40002000 	.word	0x40002000

08004848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f023 0201 	bic.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <TIM_OC1_SetConfig+0xd8>)
 8004874:	4013      	ands	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0303 	bic.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 0302 	bic.w	r3, r3, #2
 8004890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a21      	ldr	r2, [pc, #132]	@ (8004924 <TIM_OC1_SetConfig+0xdc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_OC1_SetConfig+0x64>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a20      	ldr	r2, [pc, #128]	@ (8004928 <TIM_OC1_SetConfig+0xe0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10c      	bne.n	80048c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0308 	bic.w	r3, r3, #8
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <TIM_OC1_SetConfig+0xdc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_OC1_SetConfig+0x8e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <TIM_OC1_SetConfig+0xe0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d111      	bne.n	80048fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	fffeff8f 	.word	0xfffeff8f
 8004924:	40010000 	.word	0x40010000
 8004928:	40010400 	.word	0x40010400

0800492c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 0210 	bic.w	r2, r3, #16
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4b2e      	ldr	r3, [pc, #184]	@ (8004a10 <TIM_OC2_SetConfig+0xe4>)
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f023 0320 	bic.w	r3, r3, #32
 8004976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a23      	ldr	r2, [pc, #140]	@ (8004a14 <TIM_OC2_SetConfig+0xe8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC2_SetConfig+0x68>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a22      	ldr	r2, [pc, #136]	@ (8004a18 <TIM_OC2_SetConfig+0xec>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10d      	bne.n	80049b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a18      	ldr	r2, [pc, #96]	@ (8004a14 <TIM_OC2_SetConfig+0xe8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_OC2_SetConfig+0x94>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <TIM_OC2_SetConfig+0xec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d113      	bne.n	80049e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	feff8fff 	.word	0xfeff8fff
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40010400 	.word	0x40010400

08004a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4b2d      	ldr	r3, [pc, #180]	@ (8004afc <TIM_OC3_SetConfig+0xe0>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a22      	ldr	r2, [pc, #136]	@ (8004b00 <TIM_OC3_SetConfig+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x66>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a21      	ldr	r2, [pc, #132]	@ (8004b04 <TIM_OC3_SetConfig+0xe8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10d      	bne.n	8004a9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a17      	ldr	r2, [pc, #92]	@ (8004b00 <TIM_OC3_SetConfig+0xe4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_OC3_SetConfig+0x92>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a16      	ldr	r2, [pc, #88]	@ (8004b04 <TIM_OC3_SetConfig+0xe8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d113      	bne.n	8004ad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	fffeff8f 	.word	0xfffeff8f
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010400 	.word	0x40010400

08004b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <TIM_OC4_SetConfig+0xa4>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a13      	ldr	r2, [pc, #76]	@ (8004bb0 <TIM_OC4_SetConfig+0xa8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_OC4_SetConfig+0x68>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a12      	ldr	r2, [pc, #72]	@ (8004bb4 <TIM_OC4_SetConfig+0xac>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	feff8fff 	.word	0xfeff8fff
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c50 <TIM_OC5_SetConfig+0x98>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a12      	ldr	r2, [pc, #72]	@ (8004c54 <TIM_OC5_SetConfig+0x9c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC5_SetConfig+0x5e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a11      	ldr	r2, [pc, #68]	@ (8004c58 <TIM_OC5_SetConfig+0xa0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d109      	bne.n	8004c2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	621a      	str	r2, [r3, #32]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	fffeff8f 	.word	0xfffeff8f
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40010400 	.word	0x40010400

08004c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf8 <TIM_OC6_SetConfig+0x9c>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	051b      	lsls	r3, r3, #20
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a13      	ldr	r2, [pc, #76]	@ (8004cfc <TIM_OC6_SetConfig+0xa0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_OC6_SetConfig+0x60>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <TIM_OC6_SetConfig+0xa4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d109      	bne.n	8004cd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	029b      	lsls	r3, r3, #10
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	feff8fff 	.word	0xfeff8fff
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40010400 	.word	0x40010400

08004d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f023 030a 	bic.w	r3, r3, #10
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f023 0210 	bic.w	r2, r3, #16
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f043 0307 	orr.w	r3, r3, #7
 8004de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	021a      	lsls	r2, r3, #8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e06d      	b.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a30      	ldr	r2, [pc, #192]	@ (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2f      	ldr	r2, [pc, #188]	@ (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a20      	ldr	r2, [pc, #128]	@ (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0e:	d01d      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	@ (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1a      	ldr	r2, [pc, #104]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a15      	ldr	r2, [pc, #84]	@ (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d10c      	bne.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40001800 	.word	0x40001800

08004fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e040      	b.n	8005070 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fd f904 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	@ 0x24
 8005008:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0201 	bic.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fbde 	bl	80057e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f977 	bl	800531c <UART_SetConfig>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e01b      	b.n	8005070 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fc5d 	bl	8005928 <UART_CheckIdleState>
 800506e:	4603      	mov	r3, r0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800508c:	2b20      	cmp	r3, #32
 800508e:	d177      	bne.n	8005180 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_UART_Transmit+0x24>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e070      	b.n	8005182 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2221      	movs	r2, #33	@ 0x21
 80050ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ae:	f7fd f979 	bl	80023a4 <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050cc:	d108      	bne.n	80050e0 <HAL_UART_Transmit+0x68>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e003      	b.n	80050e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e8:	e02f      	b.n	800514a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2180      	movs	r1, #128	@ 0x80
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fc6e 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e03b      	b.n	8005182 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	3302      	adds	r3, #2
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	e007      	b.n	8005138 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3301      	adds	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1c9      	bne.n	80050ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	2140      	movs	r1, #64	@ 0x40
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fc38 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e005      	b.n	8005182 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b08a      	sub	sp, #40	@ 0x28
 800518e:	af02      	add	r7, sp, #8
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	f040 80b5 	bne.w	8005310 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_Receive+0x28>
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0ad      	b.n	8005312 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2222      	movs	r2, #34	@ 0x22
 80051c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051cc:	f7fd f8ea 	bl	80023a4 <HAL_GetTick>
 80051d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ea:	d10e      	bne.n	800520a <HAL_UART_Receive+0x80>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <HAL_UART_Receive+0x76>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051fe:	e02d      	b.n	800525c <HAL_UART_Receive+0xd2>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	22ff      	movs	r2, #255	@ 0xff
 8005204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005208:	e028      	b.n	800525c <HAL_UART_Receive+0xd2>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <HAL_UART_Receive+0xa4>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <HAL_UART_Receive+0x9a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	22ff      	movs	r2, #255	@ 0xff
 800521e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005222:	e01b      	b.n	800525c <HAL_UART_Receive+0xd2>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	227f      	movs	r2, #127	@ 0x7f
 8005228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800522c:	e016      	b.n	800525c <HAL_UART_Receive+0xd2>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005236:	d10d      	bne.n	8005254 <HAL_UART_Receive+0xca>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_UART_Receive+0xc0>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	227f      	movs	r2, #127	@ 0x7f
 8005244:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005248:	e008      	b.n	800525c <HAL_UART_Receive+0xd2>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	223f      	movs	r2, #63	@ 0x3f
 800524e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005252:	e003      	b.n	800525c <HAL_UART_Receive+0xd2>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005262:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526c:	d108      	bne.n	8005280 <HAL_UART_Receive+0xf6>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	e003      	b.n	8005288 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005288:	e036      	b.n	80052f8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	2120      	movs	r1, #32
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fb9e 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e032      	b.n	8005312 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	8a7b      	ldrh	r3, [r7, #18]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	3302      	adds	r3, #2
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e00c      	b.n	80052e6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	8a7b      	ldrh	r3, [r7, #18]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4013      	ands	r3, r2
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	3301      	adds	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1c2      	bne.n	800528a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4ba6      	ldr	r3, [pc, #664]	@ (80055e0 <UART_SetConfig+0x2c4>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	430b      	orrs	r3, r1
 8005352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a94      	ldr	r2, [pc, #592]	@ (80055e4 <UART_SetConfig+0x2c8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d120      	bne.n	80053da <UART_SetConfig+0xbe>
 8005398:	4b93      	ldr	r3, [pc, #588]	@ (80055e8 <UART_SetConfig+0x2cc>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d816      	bhi.n	80053d4 <UART_SetConfig+0xb8>
 80053a6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x90>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053c9 	.word	0x080053c9
 80053b4:	080053c3 	.word	0x080053c3
 80053b8:	080053cf 	.word	0x080053cf
 80053bc:	2301      	movs	r3, #1
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e150      	b.n	8005664 <UART_SetConfig+0x348>
 80053c2:	2302      	movs	r3, #2
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e14d      	b.n	8005664 <UART_SetConfig+0x348>
 80053c8:	2304      	movs	r3, #4
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e14a      	b.n	8005664 <UART_SetConfig+0x348>
 80053ce:	2308      	movs	r3, #8
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e147      	b.n	8005664 <UART_SetConfig+0x348>
 80053d4:	2310      	movs	r3, #16
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e144      	b.n	8005664 <UART_SetConfig+0x348>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a83      	ldr	r2, [pc, #524]	@ (80055ec <UART_SetConfig+0x2d0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d132      	bne.n	800544a <UART_SetConfig+0x12e>
 80053e4:	4b80      	ldr	r3, [pc, #512]	@ (80055e8 <UART_SetConfig+0x2cc>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d828      	bhi.n	8005444 <UART_SetConfig+0x128>
 80053f2:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <UART_SetConfig+0xdc>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005445 	.word	0x08005445
 8005404:	08005445 	.word	0x08005445
 8005408:	08005439 	.word	0x08005439
 800540c:	08005445 	.word	0x08005445
 8005410:	08005445 	.word	0x08005445
 8005414:	08005445 	.word	0x08005445
 8005418:	08005433 	.word	0x08005433
 800541c:	08005445 	.word	0x08005445
 8005420:	08005445 	.word	0x08005445
 8005424:	08005445 	.word	0x08005445
 8005428:	0800543f 	.word	0x0800543f
 800542c:	2300      	movs	r3, #0
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e118      	b.n	8005664 <UART_SetConfig+0x348>
 8005432:	2302      	movs	r3, #2
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e115      	b.n	8005664 <UART_SetConfig+0x348>
 8005438:	2304      	movs	r3, #4
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e112      	b.n	8005664 <UART_SetConfig+0x348>
 800543e:	2308      	movs	r3, #8
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e10f      	b.n	8005664 <UART_SetConfig+0x348>
 8005444:	2310      	movs	r3, #16
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e10c      	b.n	8005664 <UART_SetConfig+0x348>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a68      	ldr	r2, [pc, #416]	@ (80055f0 <UART_SetConfig+0x2d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d120      	bne.n	8005496 <UART_SetConfig+0x17a>
 8005454:	4b64      	ldr	r3, [pc, #400]	@ (80055e8 <UART_SetConfig+0x2cc>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800545e:	2b30      	cmp	r3, #48	@ 0x30
 8005460:	d013      	beq.n	800548a <UART_SetConfig+0x16e>
 8005462:	2b30      	cmp	r3, #48	@ 0x30
 8005464:	d814      	bhi.n	8005490 <UART_SetConfig+0x174>
 8005466:	2b20      	cmp	r3, #32
 8005468:	d009      	beq.n	800547e <UART_SetConfig+0x162>
 800546a:	2b20      	cmp	r3, #32
 800546c:	d810      	bhi.n	8005490 <UART_SetConfig+0x174>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <UART_SetConfig+0x15c>
 8005472:	2b10      	cmp	r3, #16
 8005474:	d006      	beq.n	8005484 <UART_SetConfig+0x168>
 8005476:	e00b      	b.n	8005490 <UART_SetConfig+0x174>
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e0f2      	b.n	8005664 <UART_SetConfig+0x348>
 800547e:	2302      	movs	r3, #2
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e0ef      	b.n	8005664 <UART_SetConfig+0x348>
 8005484:	2304      	movs	r3, #4
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e0ec      	b.n	8005664 <UART_SetConfig+0x348>
 800548a:	2308      	movs	r3, #8
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e0e9      	b.n	8005664 <UART_SetConfig+0x348>
 8005490:	2310      	movs	r3, #16
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e0e6      	b.n	8005664 <UART_SetConfig+0x348>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a56      	ldr	r2, [pc, #344]	@ (80055f4 <UART_SetConfig+0x2d8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d120      	bne.n	80054e2 <UART_SetConfig+0x1c6>
 80054a0:	4b51      	ldr	r3, [pc, #324]	@ (80055e8 <UART_SetConfig+0x2cc>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80054ac:	d013      	beq.n	80054d6 <UART_SetConfig+0x1ba>
 80054ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b0:	d814      	bhi.n	80054dc <UART_SetConfig+0x1c0>
 80054b2:	2b80      	cmp	r3, #128	@ 0x80
 80054b4:	d009      	beq.n	80054ca <UART_SetConfig+0x1ae>
 80054b6:	2b80      	cmp	r3, #128	@ 0x80
 80054b8:	d810      	bhi.n	80054dc <UART_SetConfig+0x1c0>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <UART_SetConfig+0x1a8>
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d006      	beq.n	80054d0 <UART_SetConfig+0x1b4>
 80054c2:	e00b      	b.n	80054dc <UART_SetConfig+0x1c0>
 80054c4:	2300      	movs	r3, #0
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e0cc      	b.n	8005664 <UART_SetConfig+0x348>
 80054ca:	2302      	movs	r3, #2
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e0c9      	b.n	8005664 <UART_SetConfig+0x348>
 80054d0:	2304      	movs	r3, #4
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e0c6      	b.n	8005664 <UART_SetConfig+0x348>
 80054d6:	2308      	movs	r3, #8
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e0c3      	b.n	8005664 <UART_SetConfig+0x348>
 80054dc:	2310      	movs	r3, #16
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e0c0      	b.n	8005664 <UART_SetConfig+0x348>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a44      	ldr	r2, [pc, #272]	@ (80055f8 <UART_SetConfig+0x2dc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d125      	bne.n	8005538 <UART_SetConfig+0x21c>
 80054ec:	4b3e      	ldr	r3, [pc, #248]	@ (80055e8 <UART_SetConfig+0x2cc>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054fa:	d017      	beq.n	800552c <UART_SetConfig+0x210>
 80054fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005500:	d817      	bhi.n	8005532 <UART_SetConfig+0x216>
 8005502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005506:	d00b      	beq.n	8005520 <UART_SetConfig+0x204>
 8005508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800550c:	d811      	bhi.n	8005532 <UART_SetConfig+0x216>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <UART_SetConfig+0x1fe>
 8005512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005516:	d006      	beq.n	8005526 <UART_SetConfig+0x20a>
 8005518:	e00b      	b.n	8005532 <UART_SetConfig+0x216>
 800551a:	2300      	movs	r3, #0
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e0a1      	b.n	8005664 <UART_SetConfig+0x348>
 8005520:	2302      	movs	r3, #2
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e09e      	b.n	8005664 <UART_SetConfig+0x348>
 8005526:	2304      	movs	r3, #4
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e09b      	b.n	8005664 <UART_SetConfig+0x348>
 800552c:	2308      	movs	r3, #8
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e098      	b.n	8005664 <UART_SetConfig+0x348>
 8005532:	2310      	movs	r3, #16
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e095      	b.n	8005664 <UART_SetConfig+0x348>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2f      	ldr	r2, [pc, #188]	@ (80055fc <UART_SetConfig+0x2e0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d125      	bne.n	800558e <UART_SetConfig+0x272>
 8005542:	4b29      	ldr	r3, [pc, #164]	@ (80055e8 <UART_SetConfig+0x2cc>)
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005548:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800554c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005550:	d017      	beq.n	8005582 <UART_SetConfig+0x266>
 8005552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005556:	d817      	bhi.n	8005588 <UART_SetConfig+0x26c>
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800555c:	d00b      	beq.n	8005576 <UART_SetConfig+0x25a>
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005562:	d811      	bhi.n	8005588 <UART_SetConfig+0x26c>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <UART_SetConfig+0x254>
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556c:	d006      	beq.n	800557c <UART_SetConfig+0x260>
 800556e:	e00b      	b.n	8005588 <UART_SetConfig+0x26c>
 8005570:	2301      	movs	r3, #1
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e076      	b.n	8005664 <UART_SetConfig+0x348>
 8005576:	2302      	movs	r3, #2
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e073      	b.n	8005664 <UART_SetConfig+0x348>
 800557c:	2304      	movs	r3, #4
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e070      	b.n	8005664 <UART_SetConfig+0x348>
 8005582:	2308      	movs	r3, #8
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e06d      	b.n	8005664 <UART_SetConfig+0x348>
 8005588:	2310      	movs	r3, #16
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e06a      	b.n	8005664 <UART_SetConfig+0x348>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1b      	ldr	r2, [pc, #108]	@ (8005600 <UART_SetConfig+0x2e4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d138      	bne.n	800560a <UART_SetConfig+0x2ee>
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <UART_SetConfig+0x2cc>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055a6:	d017      	beq.n	80055d8 <UART_SetConfig+0x2bc>
 80055a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055ac:	d82a      	bhi.n	8005604 <UART_SetConfig+0x2e8>
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b2:	d00b      	beq.n	80055cc <UART_SetConfig+0x2b0>
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b8:	d824      	bhi.n	8005604 <UART_SetConfig+0x2e8>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <UART_SetConfig+0x2aa>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c2:	d006      	beq.n	80055d2 <UART_SetConfig+0x2b6>
 80055c4:	e01e      	b.n	8005604 <UART_SetConfig+0x2e8>
 80055c6:	2300      	movs	r3, #0
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e04b      	b.n	8005664 <UART_SetConfig+0x348>
 80055cc:	2302      	movs	r3, #2
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e048      	b.n	8005664 <UART_SetConfig+0x348>
 80055d2:	2304      	movs	r3, #4
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e045      	b.n	8005664 <UART_SetConfig+0x348>
 80055d8:	2308      	movs	r3, #8
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e042      	b.n	8005664 <UART_SetConfig+0x348>
 80055de:	bf00      	nop
 80055e0:	efff69f3 	.word	0xefff69f3
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40004400 	.word	0x40004400
 80055f0:	40004800 	.word	0x40004800
 80055f4:	40004c00 	.word	0x40004c00
 80055f8:	40005000 	.word	0x40005000
 80055fc:	40011400 	.word	0x40011400
 8005600:	40007800 	.word	0x40007800
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e02c      	b.n	8005664 <UART_SetConfig+0x348>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a72      	ldr	r2, [pc, #456]	@ (80057d8 <UART_SetConfig+0x4bc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d125      	bne.n	8005660 <UART_SetConfig+0x344>
 8005614:	4b71      	ldr	r3, [pc, #452]	@ (80057dc <UART_SetConfig+0x4c0>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800561e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005622:	d017      	beq.n	8005654 <UART_SetConfig+0x338>
 8005624:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005628:	d817      	bhi.n	800565a <UART_SetConfig+0x33e>
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800562e:	d00b      	beq.n	8005648 <UART_SetConfig+0x32c>
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005634:	d811      	bhi.n	800565a <UART_SetConfig+0x33e>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <UART_SetConfig+0x326>
 800563a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800563e:	d006      	beq.n	800564e <UART_SetConfig+0x332>
 8005640:	e00b      	b.n	800565a <UART_SetConfig+0x33e>
 8005642:	2300      	movs	r3, #0
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e00d      	b.n	8005664 <UART_SetConfig+0x348>
 8005648:	2302      	movs	r3, #2
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e00a      	b.n	8005664 <UART_SetConfig+0x348>
 800564e:	2304      	movs	r3, #4
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e007      	b.n	8005664 <UART_SetConfig+0x348>
 8005654:	2308      	movs	r3, #8
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e004      	b.n	8005664 <UART_SetConfig+0x348>
 800565a:	2310      	movs	r3, #16
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e001      	b.n	8005664 <UART_SetConfig+0x348>
 8005660:	2310      	movs	r3, #16
 8005662:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800566c:	d15b      	bne.n	8005726 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800566e:	7ffb      	ldrb	r3, [r7, #31]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d828      	bhi.n	80056c6 <UART_SetConfig+0x3aa>
 8005674:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <UART_SetConfig+0x360>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fd fe22 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 80056a4:	61b8      	str	r0, [r7, #24]
        break;
 80056a6:	e013      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fd fe32 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 80056ac:	61b8      	str	r0, [r7, #24]
        break;
 80056ae:	e00f      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <UART_SetConfig+0x4c4>)
 80056b2:	61bb      	str	r3, [r7, #24]
        break;
 80056b4:	e00c      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fd fd45 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 80056ba:	61b8      	str	r0, [r7, #24]
        break;
 80056bc:	e008      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c2:	61bb      	str	r3, [r7, #24]
        break;
 80056c4:	e004      	b.n	80056d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	77bb      	strb	r3, [r7, #30]
        break;
 80056ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d074      	beq.n	80057c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	005a      	lsls	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d916      	bls.n	8005720 <UART_SetConfig+0x404>
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f8:	d212      	bcs.n	8005720 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f023 030f 	bic.w	r3, r3, #15
 8005702:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	b29a      	uxth	r2, r3
 8005710:	89fb      	ldrh	r3, [r7, #14]
 8005712:	4313      	orrs	r3, r2
 8005714:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	89fa      	ldrh	r2, [r7, #14]
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	e04f      	b.n	80057c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77bb      	strb	r3, [r7, #30]
 8005724:	e04c      	b.n	80057c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d828      	bhi.n	800577e <UART_SetConfig+0x462>
 800572c:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x418>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7fd fdc6 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e013      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7fd fdd6 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <UART_SetConfig+0x4c4>)
 800576a:	61bb      	str	r3, [r7, #24]
        break;
 800576c:	e00c      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fd fce9 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8005772:	61b8      	str	r0, [r7, #24]
        break;
 8005774:	e008      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e004      	b.n	8005788 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	77bb      	strb	r3, [r7, #30]
        break;
 8005786:	bf00      	nop
    }

    if (pclk != 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085a      	lsrs	r2, r3, #1
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	441a      	add	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b0f      	cmp	r3, #15
 80057a6:	d909      	bls.n	80057bc <UART_SetConfig+0x4a0>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ae:	d205      	bcs.n	80057bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	e001      	b.n	80057c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40007c00 	.word	0x40007c00
 80057dc:	40023800 	.word	0x40023800
 80057e0:	00f42400 	.word	0x00f42400

080057e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01a      	beq.n	80058fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058e2:	d10a      	bne.n	80058fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	@ 0x30
 800592c:	af02      	add	r7, sp, #8
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005938:	f7fc fd34 	bl	80023a4 <HAL_GetTick>
 800593c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b08      	cmp	r3, #8
 800594a:	d12e      	bne.n	80059aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	2200      	movs	r2, #0
 8005956:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f83b 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d021      	beq.n	80059aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	60fb      	str	r3, [r7, #12]
   return(result);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	617b      	str	r3, [r7, #20]
   return(result);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e6      	bne.n	8005966 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e011      	b.n	80059ce <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	@ 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	e04f      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d04b      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f0:	f7fc fcd8 	bl	80023a4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e04e      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d037      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b80      	cmp	r3, #128	@ 0x80
 8005a1c:	d034      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	d031      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d110      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2208      	movs	r2, #8
 8005a38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f838 	bl	8005ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2208      	movs	r2, #8
 8005a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e029      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a62:	d111      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f81e 	bl	8005ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e00f      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d0a0      	beq.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b095      	sub	sp, #84	@ 0x54
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e6      	bne.n	8005ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d118      	bne.n	8005b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f023 0310 	bic.w	r3, r3, #16
 8005b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6979      	ldr	r1, [r7, #20]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	613b      	str	r3, [r7, #16]
   return(result);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e6      	bne.n	8005b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b6c:	bf00      	nop
 8005b6e:	3754      	adds	r7, #84	@ 0x54
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <__cvt>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	ec57 6b10 	vmov	r6, r7, d0
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	460c      	mov	r4, r1
 8005b84:	4619      	mov	r1, r3
 8005b86:	463b      	mov	r3, r7
 8005b88:	bfbb      	ittet	lt
 8005b8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b8e:	461f      	movlt	r7, r3
 8005b90:	2300      	movge	r3, #0
 8005b92:	232d      	movlt	r3, #45	@ 0x2d
 8005b94:	700b      	strb	r3, [r1, #0]
 8005b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b9c:	4691      	mov	r9, r2
 8005b9e:	f023 0820 	bic.w	r8, r3, #32
 8005ba2:	bfbc      	itt	lt
 8005ba4:	4632      	movlt	r2, r6
 8005ba6:	4616      	movlt	r6, r2
 8005ba8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bac:	d005      	beq.n	8005bba <__cvt+0x42>
 8005bae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bb2:	d100      	bne.n	8005bb6 <__cvt+0x3e>
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	e000      	b.n	8005bbc <__cvt+0x44>
 8005bba:	2103      	movs	r1, #3
 8005bbc:	ab03      	add	r3, sp, #12
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	ab02      	add	r3, sp, #8
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	ec47 6b10 	vmov	d0, r6, r7
 8005bc8:	4653      	mov	r3, sl
 8005bca:	4622      	mov	r2, r4
 8005bcc:	f001 f928 	bl	8006e20 <_dtoa_r>
 8005bd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	d119      	bne.n	8005c0c <__cvt+0x94>
 8005bd8:	f019 0f01 	tst.w	r9, #1
 8005bdc:	d00e      	beq.n	8005bfc <__cvt+0x84>
 8005bde:	eb00 0904 	add.w	r9, r0, r4
 8005be2:	2200      	movs	r2, #0
 8005be4:	2300      	movs	r3, #0
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa ff9d 	bl	8000b28 <__aeabi_dcmpeq>
 8005bee:	b108      	cbz	r0, 8005bf4 <__cvt+0x7c>
 8005bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bf4:	2230      	movs	r2, #48	@ 0x30
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	454b      	cmp	r3, r9
 8005bfa:	d31e      	bcc.n	8005c3a <__cvt+0xc2>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c00:	1b5b      	subs	r3, r3, r5
 8005c02:	4628      	mov	r0, r5
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	b004      	add	sp, #16
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c10:	eb00 0904 	add.w	r9, r0, r4
 8005c14:	d1e5      	bne.n	8005be2 <__cvt+0x6a>
 8005c16:	7803      	ldrb	r3, [r0, #0]
 8005c18:	2b30      	cmp	r3, #48	@ 0x30
 8005c1a:	d10a      	bne.n	8005c32 <__cvt+0xba>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa ff80 	bl	8000b28 <__aeabi_dcmpeq>
 8005c28:	b918      	cbnz	r0, 8005c32 <__cvt+0xba>
 8005c2a:	f1c4 0401 	rsb	r4, r4, #1
 8005c2e:	f8ca 4000 	str.w	r4, [sl]
 8005c32:	f8da 3000 	ldr.w	r3, [sl]
 8005c36:	4499      	add	r9, r3
 8005c38:	e7d3      	b.n	8005be2 <__cvt+0x6a>
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	9103      	str	r1, [sp, #12]
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e7d9      	b.n	8005bf6 <__cvt+0x7e>

08005c42 <__exponent>:
 8005c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c44:	2900      	cmp	r1, #0
 8005c46:	bfba      	itte	lt
 8005c48:	4249      	neglt	r1, r1
 8005c4a:	232d      	movlt	r3, #45	@ 0x2d
 8005c4c:	232b      	movge	r3, #43	@ 0x2b
 8005c4e:	2909      	cmp	r1, #9
 8005c50:	7002      	strb	r2, [r0, #0]
 8005c52:	7043      	strb	r3, [r0, #1]
 8005c54:	dd29      	ble.n	8005caa <__exponent+0x68>
 8005c56:	f10d 0307 	add.w	r3, sp, #7
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	270a      	movs	r7, #10
 8005c5e:	461a      	mov	r2, r3
 8005c60:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c64:	fb07 1416 	mls	r4, r7, r6, r1
 8005c68:	3430      	adds	r4, #48	@ 0x30
 8005c6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c6e:	460c      	mov	r4, r1
 8005c70:	2c63      	cmp	r4, #99	@ 0x63
 8005c72:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c76:	4631      	mov	r1, r6
 8005c78:	dcf1      	bgt.n	8005c5e <__exponent+0x1c>
 8005c7a:	3130      	adds	r1, #48	@ 0x30
 8005c7c:	1e94      	subs	r4, r2, #2
 8005c7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c82:	1c41      	adds	r1, r0, #1
 8005c84:	4623      	mov	r3, r4
 8005c86:	42ab      	cmp	r3, r5
 8005c88:	d30a      	bcc.n	8005ca0 <__exponent+0x5e>
 8005c8a:	f10d 0309 	add.w	r3, sp, #9
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	42ac      	cmp	r4, r5
 8005c92:	bf88      	it	hi
 8005c94:	2300      	movhi	r3, #0
 8005c96:	3302      	adds	r3, #2
 8005c98:	4403      	add	r3, r0
 8005c9a:	1a18      	subs	r0, r3, r0
 8005c9c:	b003      	add	sp, #12
 8005c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ca4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ca8:	e7ed      	b.n	8005c86 <__exponent+0x44>
 8005caa:	2330      	movs	r3, #48	@ 0x30
 8005cac:	3130      	adds	r1, #48	@ 0x30
 8005cae:	7083      	strb	r3, [r0, #2]
 8005cb0:	70c1      	strb	r1, [r0, #3]
 8005cb2:	1d03      	adds	r3, r0, #4
 8005cb4:	e7f1      	b.n	8005c9a <__exponent+0x58>
	...

08005cb8 <_printf_float>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	b08d      	sub	sp, #52	@ 0x34
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	461f      	mov	r7, r3
 8005cc8:	4605      	mov	r5, r0
 8005cca:	f000 ffa3 	bl	8006c14 <_localeconv_r>
 8005cce:	6803      	ldr	r3, [r0, #0]
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fa fafc 	bl	80002d0 <strlen>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce0:	9005      	str	r0, [sp, #20]
 8005ce2:	3307      	adds	r3, #7
 8005ce4:	f023 0307 	bic.w	r3, r3, #7
 8005ce8:	f103 0208 	add.w	r2, r3, #8
 8005cec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cf0:	f8d4 b000 	ldr.w	fp, [r4]
 8005cf4:	f8c8 2000 	str.w	r2, [r8]
 8005cf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0e:	4b9c      	ldr	r3, [pc, #624]	@ (8005f80 <_printf_float+0x2c8>)
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	f7fa ff3a 	bl	8000b8c <__aeabi_dcmpun>
 8005d18:	bb70      	cbnz	r0, 8005d78 <_printf_float+0xc0>
 8005d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d1e:	4b98      	ldr	r3, [pc, #608]	@ (8005f80 <_printf_float+0x2c8>)
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	f7fa ff14 	bl	8000b50 <__aeabi_dcmple>
 8005d28:	bb30      	cbnz	r0, 8005d78 <_printf_float+0xc0>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa ff03 	bl	8000b3c <__aeabi_dcmplt>
 8005d36:	b110      	cbz	r0, 8005d3e <_printf_float+0x86>
 8005d38:	232d      	movs	r3, #45	@ 0x2d
 8005d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d3e:	4a91      	ldr	r2, [pc, #580]	@ (8005f84 <_printf_float+0x2cc>)
 8005d40:	4b91      	ldr	r3, [pc, #580]	@ (8005f88 <_printf_float+0x2d0>)
 8005d42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d46:	bf94      	ite	ls
 8005d48:	4690      	movls	r8, r2
 8005d4a:	4698      	movhi	r8, r3
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f02b 0304 	bic.w	r3, fp, #4
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	f04f 0900 	mov.w	r9, #0
 8005d5a:	9700      	str	r7, [sp, #0]
 8005d5c:	4633      	mov	r3, r6
 8005d5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f9d2 	bl	800610c <_printf_common>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f040 808d 	bne.w	8005e88 <_printf_float+0x1d0>
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	b00d      	add	sp, #52	@ 0x34
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	4649      	mov	r1, r9
 8005d80:	f7fa ff04 	bl	8000b8c <__aeabi_dcmpun>
 8005d84:	b140      	cbz	r0, 8005d98 <_printf_float+0xe0>
 8005d86:	464b      	mov	r3, r9
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfbc      	itt	lt
 8005d8c:	232d      	movlt	r3, #45	@ 0x2d
 8005d8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d92:	4a7e      	ldr	r2, [pc, #504]	@ (8005f8c <_printf_float+0x2d4>)
 8005d94:	4b7e      	ldr	r3, [pc, #504]	@ (8005f90 <_printf_float+0x2d8>)
 8005d96:	e7d4      	b.n	8005d42 <_printf_float+0x8a>
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d9e:	9206      	str	r2, [sp, #24]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	d13b      	bne.n	8005e1c <_printf_float+0x164>
 8005da4:	2306      	movs	r3, #6
 8005da6:	6063      	str	r3, [r4, #4]
 8005da8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005dac:	2300      	movs	r3, #0
 8005dae:	6022      	str	r2, [r4, #0]
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005db4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005db8:	ab09      	add	r3, sp, #36	@ 0x24
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	ec49 8b10 	vmov	d0, r8, r9
 8005dc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7ff fed6 	bl	8005b78 <__cvt>
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dd0:	2b47      	cmp	r3, #71	@ 0x47
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	d129      	bne.n	8005e2a <_printf_float+0x172>
 8005dd6:	1cc8      	adds	r0, r1, #3
 8005dd8:	db02      	blt.n	8005de0 <_printf_float+0x128>
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	dd41      	ble.n	8005e64 <_printf_float+0x1ac>
 8005de0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005de4:	fa5f fa8a 	uxtb.w	sl, sl
 8005de8:	3901      	subs	r1, #1
 8005dea:	4652      	mov	r2, sl
 8005dec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005df0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005df2:	f7ff ff26 	bl	8005c42 <__exponent>
 8005df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005df8:	1813      	adds	r3, r2, r0
 8005dfa:	2a01      	cmp	r2, #1
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	6123      	str	r3, [r4, #16]
 8005e00:	dc02      	bgt.n	8005e08 <_printf_float+0x150>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	07d2      	lsls	r2, r2, #31
 8005e06:	d501      	bpl.n	8005e0c <_printf_float+0x154>
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0a2      	beq.n	8005d5a <_printf_float+0xa2>
 8005e14:	232d      	movs	r3, #45	@ 0x2d
 8005e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e1a:	e79e      	b.n	8005d5a <_printf_float+0xa2>
 8005e1c:	9a06      	ldr	r2, [sp, #24]
 8005e1e:	2a47      	cmp	r2, #71	@ 0x47
 8005e20:	d1c2      	bne.n	8005da8 <_printf_float+0xf0>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1c0      	bne.n	8005da8 <_printf_float+0xf0>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7bd      	b.n	8005da6 <_printf_float+0xee>
 8005e2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e2e:	d9db      	bls.n	8005de8 <_printf_float+0x130>
 8005e30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e34:	d118      	bne.n	8005e68 <_printf_float+0x1b0>
 8005e36:	2900      	cmp	r1, #0
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	dd0b      	ble.n	8005e54 <_printf_float+0x19c>
 8005e3c:	6121      	str	r1, [r4, #16]
 8005e3e:	b913      	cbnz	r3, 8005e46 <_printf_float+0x18e>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	07d0      	lsls	r0, r2, #31
 8005e44:	d502      	bpl.n	8005e4c <_printf_float+0x194>
 8005e46:	3301      	adds	r3, #1
 8005e48:	440b      	add	r3, r1
 8005e4a:	6123      	str	r3, [r4, #16]
 8005e4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e4e:	f04f 0900 	mov.w	r9, #0
 8005e52:	e7db      	b.n	8005e0c <_printf_float+0x154>
 8005e54:	b913      	cbnz	r3, 8005e5c <_printf_float+0x1a4>
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	07d2      	lsls	r2, r2, #31
 8005e5a:	d501      	bpl.n	8005e60 <_printf_float+0x1a8>
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	e7f4      	b.n	8005e4a <_printf_float+0x192>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e7f2      	b.n	8005e4a <_printf_float+0x192>
 8005e64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6a:	4299      	cmp	r1, r3
 8005e6c:	db05      	blt.n	8005e7a <_printf_float+0x1c2>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	6121      	str	r1, [r4, #16]
 8005e72:	07d8      	lsls	r0, r3, #31
 8005e74:	d5ea      	bpl.n	8005e4c <_printf_float+0x194>
 8005e76:	1c4b      	adds	r3, r1, #1
 8005e78:	e7e7      	b.n	8005e4a <_printf_float+0x192>
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	bfd4      	ite	le
 8005e7e:	f1c1 0202 	rsble	r2, r1, #2
 8005e82:	2201      	movgt	r2, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	e7e0      	b.n	8005e4a <_printf_float+0x192>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	055a      	lsls	r2, r3, #21
 8005e8c:	d407      	bmi.n	8005e9e <_printf_float+0x1e6>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	4642      	mov	r2, r8
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d12b      	bne.n	8005ef4 <_printf_float+0x23c>
 8005e9c:	e767      	b.n	8005d6e <_printf_float+0xb6>
 8005e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ea2:	f240 80dd 	bls.w	8006060 <_printf_float+0x3a8>
 8005ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f7fa fe3b 	bl	8000b28 <__aeabi_dcmpeq>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d033      	beq.n	8005f1e <_printf_float+0x266>
 8005eb6:	4a37      	ldr	r2, [pc, #220]	@ (8005f94 <_printf_float+0x2dc>)
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f af54 	beq.w	8005d6e <_printf_float+0xb6>
 8005ec6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005eca:	4543      	cmp	r3, r8
 8005ecc:	db02      	blt.n	8005ed4 <_printf_float+0x21c>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	07d8      	lsls	r0, r3, #31
 8005ed2:	d50f      	bpl.n	8005ef4 <_printf_float+0x23c>
 8005ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af45 	beq.w	8005d6e <_printf_float+0xb6>
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eec:	f104 0a1a 	add.w	sl, r4, #26
 8005ef0:	45c8      	cmp	r8, r9
 8005ef2:	dc09      	bgt.n	8005f08 <_printf_float+0x250>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	079b      	lsls	r3, r3, #30
 8005ef8:	f100 8103 	bmi.w	8006102 <_printf_float+0x44a>
 8005efc:	68e0      	ldr	r0, [r4, #12]
 8005efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f00:	4298      	cmp	r0, r3
 8005f02:	bfb8      	it	lt
 8005f04:	4618      	movlt	r0, r3
 8005f06:	e734      	b.n	8005d72 <_printf_float+0xba>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af2b 	beq.w	8005d6e <_printf_float+0xb6>
 8005f18:	f109 0901 	add.w	r9, r9, #1
 8005f1c:	e7e8      	b.n	8005ef0 <_printf_float+0x238>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc39      	bgt.n	8005f98 <_printf_float+0x2e0>
 8005f24:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <_printf_float+0x2dc>)
 8005f26:	2301      	movs	r3, #1
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	f43f af1d 	beq.w	8005d6e <_printf_float+0xb6>
 8005f34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f38:	ea59 0303 	orrs.w	r3, r9, r3
 8005f3c:	d102      	bne.n	8005f44 <_printf_float+0x28c>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07d9      	lsls	r1, r3, #31
 8005f42:	d5d7      	bpl.n	8005ef4 <_printf_float+0x23c>
 8005f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f af0d 	beq.w	8005d6e <_printf_float+0xb6>
 8005f54:	f04f 0a00 	mov.w	sl, #0
 8005f58:	f104 0b1a 	add.w	fp, r4, #26
 8005f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5e:	425b      	negs	r3, r3
 8005f60:	4553      	cmp	r3, sl
 8005f62:	dc01      	bgt.n	8005f68 <_printf_float+0x2b0>
 8005f64:	464b      	mov	r3, r9
 8005f66:	e793      	b.n	8005e90 <_printf_float+0x1d8>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	465a      	mov	r2, fp
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f aefb 	beq.w	8005d6e <_printf_float+0xb6>
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	e7ee      	b.n	8005f5c <_printf_float+0x2a4>
 8005f7e:	bf00      	nop
 8005f80:	7fefffff 	.word	0x7fefffff
 8005f84:	0800b424 	.word	0x0800b424
 8005f88:	0800b428 	.word	0x0800b428
 8005f8c:	0800b42c 	.word	0x0800b42c
 8005f90:	0800b430 	.word	0x0800b430
 8005f94:	0800b434 	.word	0x0800b434
 8005f98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f9e:	4553      	cmp	r3, sl
 8005fa0:	bfa8      	it	ge
 8005fa2:	4653      	movge	r3, sl
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	dc36      	bgt.n	8006018 <_printf_float+0x360>
 8005faa:	f04f 0b00 	mov.w	fp, #0
 8005fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb2:	f104 021a 	add.w	r2, r4, #26
 8005fb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fb8:	9306      	str	r3, [sp, #24]
 8005fba:	eba3 0309 	sub.w	r3, r3, r9
 8005fbe:	455b      	cmp	r3, fp
 8005fc0:	dc31      	bgt.n	8006026 <_printf_float+0x36e>
 8005fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc4:	459a      	cmp	sl, r3
 8005fc6:	dc3a      	bgt.n	800603e <_printf_float+0x386>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d437      	bmi.n	800603e <_printf_float+0x386>
 8005fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd0:	ebaa 0903 	sub.w	r9, sl, r3
 8005fd4:	9b06      	ldr	r3, [sp, #24]
 8005fd6:	ebaa 0303 	sub.w	r3, sl, r3
 8005fda:	4599      	cmp	r9, r3
 8005fdc:	bfa8      	it	ge
 8005fde:	4699      	movge	r9, r3
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	dc33      	bgt.n	800604e <_printf_float+0x396>
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fee:	f104 0b1a 	add.w	fp, r4, #26
 8005ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ff8:	eba3 0309 	sub.w	r3, r3, r9
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	f77f af79 	ble.w	8005ef4 <_printf_float+0x23c>
 8006002:	2301      	movs	r3, #1
 8006004:	465a      	mov	r2, fp
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f aeae 	beq.w	8005d6e <_printf_float+0xb6>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	e7ec      	b.n	8005ff2 <_printf_float+0x33a>
 8006018:	4642      	mov	r2, r8
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	d1c2      	bne.n	8005faa <_printf_float+0x2f2>
 8006024:	e6a3      	b.n	8005d6e <_printf_float+0xb6>
 8006026:	2301      	movs	r3, #1
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	9206      	str	r2, [sp, #24]
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae9c 	beq.w	8005d6e <_printf_float+0xb6>
 8006036:	9a06      	ldr	r2, [sp, #24]
 8006038:	f10b 0b01 	add.w	fp, fp, #1
 800603c:	e7bb      	b.n	8005fb6 <_printf_float+0x2fe>
 800603e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	d1c0      	bne.n	8005fce <_printf_float+0x316>
 800604c:	e68f      	b.n	8005d6e <_printf_float+0xb6>
 800604e:	9a06      	ldr	r2, [sp, #24]
 8006050:	464b      	mov	r3, r9
 8006052:	4442      	add	r2, r8
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	d1c3      	bne.n	8005fe6 <_printf_float+0x32e>
 800605e:	e686      	b.n	8005d6e <_printf_float+0xb6>
 8006060:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006064:	f1ba 0f01 	cmp.w	sl, #1
 8006068:	dc01      	bgt.n	800606e <_printf_float+0x3b6>
 800606a:	07db      	lsls	r3, r3, #31
 800606c:	d536      	bpl.n	80060dc <_printf_float+0x424>
 800606e:	2301      	movs	r3, #1
 8006070:	4642      	mov	r2, r8
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	f43f ae78 	beq.w	8005d6e <_printf_float+0xb6>
 800607e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae70 	beq.w	8005d6e <_printf_float+0xb6>
 800608e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800609a:	f7fa fd45 	bl	8000b28 <__aeabi_dcmpeq>
 800609e:	b9c0      	cbnz	r0, 80060d2 <_printf_float+0x41a>
 80060a0:	4653      	mov	r3, sl
 80060a2:	f108 0201 	add.w	r2, r8, #1
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	d10c      	bne.n	80060ca <_printf_float+0x412>
 80060b0:	e65d      	b.n	8005d6e <_printf_float+0xb6>
 80060b2:	2301      	movs	r3, #1
 80060b4:	465a      	mov	r2, fp
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae56 	beq.w	8005d6e <_printf_float+0xb6>
 80060c2:	f108 0801 	add.w	r8, r8, #1
 80060c6:	45d0      	cmp	r8, sl
 80060c8:	dbf3      	blt.n	80060b2 <_printf_float+0x3fa>
 80060ca:	464b      	mov	r3, r9
 80060cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060d0:	e6df      	b.n	8005e92 <_printf_float+0x1da>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	f104 0b1a 	add.w	fp, r4, #26
 80060da:	e7f4      	b.n	80060c6 <_printf_float+0x40e>
 80060dc:	2301      	movs	r3, #1
 80060de:	4642      	mov	r2, r8
 80060e0:	e7e1      	b.n	80060a6 <_printf_float+0x3ee>
 80060e2:	2301      	movs	r3, #1
 80060e4:	464a      	mov	r2, r9
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae3e 	beq.w	8005d6e <_printf_float+0xb6>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fa:	1a5b      	subs	r3, r3, r1
 80060fc:	4543      	cmp	r3, r8
 80060fe:	dcf0      	bgt.n	80060e2 <_printf_float+0x42a>
 8006100:	e6fc      	b.n	8005efc <_printf_float+0x244>
 8006102:	f04f 0800 	mov.w	r8, #0
 8006106:	f104 0919 	add.w	r9, r4, #25
 800610a:	e7f4      	b.n	80060f6 <_printf_float+0x43e>

0800610c <_printf_common>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	4616      	mov	r6, r2
 8006112:	4698      	mov	r8, r3
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	690b      	ldr	r3, [r1, #16]
 8006118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800611c:	4293      	cmp	r3, r2
 800611e:	bfb8      	it	lt
 8006120:	4613      	movlt	r3, r2
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006128:	4607      	mov	r7, r0
 800612a:	460c      	mov	r4, r1
 800612c:	b10a      	cbz	r2, 8006132 <_printf_common+0x26>
 800612e:	3301      	adds	r3, #1
 8006130:	6033      	str	r3, [r6, #0]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	0699      	lsls	r1, r3, #26
 8006136:	bf42      	ittt	mi
 8006138:	6833      	ldrmi	r3, [r6, #0]
 800613a:	3302      	addmi	r3, #2
 800613c:	6033      	strmi	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	f015 0506 	ands.w	r5, r5, #6
 8006144:	d106      	bne.n	8006154 <_printf_common+0x48>
 8006146:	f104 0a19 	add.w	sl, r4, #25
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	6832      	ldr	r2, [r6, #0]
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	42ab      	cmp	r3, r5
 8006152:	dc26      	bgt.n	80061a2 <_printf_common+0x96>
 8006154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	3b00      	subs	r3, #0
 800615c:	bf18      	it	ne
 800615e:	2301      	movne	r3, #1
 8006160:	0692      	lsls	r2, r2, #26
 8006162:	d42b      	bmi.n	80061bc <_printf_common+0xb0>
 8006164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006168:	4641      	mov	r1, r8
 800616a:	4638      	mov	r0, r7
 800616c:	47c8      	blx	r9
 800616e:	3001      	adds	r0, #1
 8006170:	d01e      	beq.n	80061b0 <_printf_common+0xa4>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	f003 0306 	and.w	r3, r3, #6
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf02      	ittt	eq
 800617e:	68e5      	ldreq	r5, [r4, #12]
 8006180:	6833      	ldreq	r3, [r6, #0]
 8006182:	1aed      	subeq	r5, r5, r3
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	bf0c      	ite	eq
 8006188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800618c:	2500      	movne	r5, #0
 800618e:	4293      	cmp	r3, r2
 8006190:	bfc4      	itt	gt
 8006192:	1a9b      	subgt	r3, r3, r2
 8006194:	18ed      	addgt	r5, r5, r3
 8006196:	2600      	movs	r6, #0
 8006198:	341a      	adds	r4, #26
 800619a:	42b5      	cmp	r5, r6
 800619c:	d11a      	bne.n	80061d4 <_printf_common+0xc8>
 800619e:	2000      	movs	r0, #0
 80061a0:	e008      	b.n	80061b4 <_printf_common+0xa8>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4652      	mov	r2, sl
 80061a6:	4641      	mov	r1, r8
 80061a8:	4638      	mov	r0, r7
 80061aa:	47c8      	blx	r9
 80061ac:	3001      	adds	r0, #1
 80061ae:	d103      	bne.n	80061b8 <_printf_common+0xac>
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	3501      	adds	r5, #1
 80061ba:	e7c6      	b.n	800614a <_printf_common+0x3e>
 80061bc:	18e1      	adds	r1, r4, r3
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	2030      	movs	r0, #48	@ 0x30
 80061c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061c6:	4422      	add	r2, r4
 80061c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d0:	3302      	adds	r3, #2
 80061d2:	e7c7      	b.n	8006164 <_printf_common+0x58>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4622      	mov	r2, r4
 80061d8:	4641      	mov	r1, r8
 80061da:	4638      	mov	r0, r7
 80061dc:	47c8      	blx	r9
 80061de:	3001      	adds	r0, #1
 80061e0:	d0e6      	beq.n	80061b0 <_printf_common+0xa4>
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7d9      	b.n	800619a <_printf_common+0x8e>
	...

080061e8 <_printf_i>:
 80061e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	7e0f      	ldrb	r7, [r1, #24]
 80061ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f0:	2f78      	cmp	r7, #120	@ 0x78
 80061f2:	4691      	mov	r9, r2
 80061f4:	4680      	mov	r8, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	469a      	mov	sl, r3
 80061fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061fe:	d807      	bhi.n	8006210 <_printf_i+0x28>
 8006200:	2f62      	cmp	r7, #98	@ 0x62
 8006202:	d80a      	bhi.n	800621a <_printf_i+0x32>
 8006204:	2f00      	cmp	r7, #0
 8006206:	f000 80d2 	beq.w	80063ae <_printf_i+0x1c6>
 800620a:	2f58      	cmp	r7, #88	@ 0x58
 800620c:	f000 80b9 	beq.w	8006382 <_printf_i+0x19a>
 8006210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006218:	e03a      	b.n	8006290 <_printf_i+0xa8>
 800621a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800621e:	2b15      	cmp	r3, #21
 8006220:	d8f6      	bhi.n	8006210 <_printf_i+0x28>
 8006222:	a101      	add	r1, pc, #4	@ (adr r1, 8006228 <_printf_i+0x40>)
 8006224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006228:	08006281 	.word	0x08006281
 800622c:	08006295 	.word	0x08006295
 8006230:	08006211 	.word	0x08006211
 8006234:	08006211 	.word	0x08006211
 8006238:	08006211 	.word	0x08006211
 800623c:	08006211 	.word	0x08006211
 8006240:	08006295 	.word	0x08006295
 8006244:	08006211 	.word	0x08006211
 8006248:	08006211 	.word	0x08006211
 800624c:	08006211 	.word	0x08006211
 8006250:	08006211 	.word	0x08006211
 8006254:	08006395 	.word	0x08006395
 8006258:	080062bf 	.word	0x080062bf
 800625c:	0800634f 	.word	0x0800634f
 8006260:	08006211 	.word	0x08006211
 8006264:	08006211 	.word	0x08006211
 8006268:	080063b7 	.word	0x080063b7
 800626c:	08006211 	.word	0x08006211
 8006270:	080062bf 	.word	0x080062bf
 8006274:	08006211 	.word	0x08006211
 8006278:	08006211 	.word	0x08006211
 800627c:	08006357 	.word	0x08006357
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6032      	str	r2, [r6, #0]
 8006288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800628c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006290:	2301      	movs	r3, #1
 8006292:	e09d      	b.n	80063d0 <_printf_i+0x1e8>
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	6031      	str	r1, [r6, #0]
 800629c:	0606      	lsls	r6, r0, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0xbc>
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	e003      	b.n	80062ac <_printf_i+0xc4>
 80062a4:	0645      	lsls	r5, r0, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0xb8>
 80062a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	da03      	bge.n	80062b8 <_printf_i+0xd0>
 80062b0:	232d      	movs	r3, #45	@ 0x2d
 80062b2:	426d      	negs	r5, r5
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b8:	4859      	ldr	r0, [pc, #356]	@ (8006420 <_printf_i+0x238>)
 80062ba:	230a      	movs	r3, #10
 80062bc:	e011      	b.n	80062e2 <_printf_i+0xfa>
 80062be:	6821      	ldr	r1, [r4, #0]
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	0608      	lsls	r0, r1, #24
 80062c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c8:	d402      	bmi.n	80062d0 <_printf_i+0xe8>
 80062ca:	0649      	lsls	r1, r1, #25
 80062cc:	bf48      	it	mi
 80062ce:	b2ad      	uxthmi	r5, r5
 80062d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80062d2:	4853      	ldr	r0, [pc, #332]	@ (8006420 <_printf_i+0x238>)
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	bf14      	ite	ne
 80062d8:	230a      	movne	r3, #10
 80062da:	2308      	moveq	r3, #8
 80062dc:	2100      	movs	r1, #0
 80062de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062e2:	6866      	ldr	r6, [r4, #4]
 80062e4:	60a6      	str	r6, [r4, #8]
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	bfa2      	ittt	ge
 80062ea:	6821      	ldrge	r1, [r4, #0]
 80062ec:	f021 0104 	bicge.w	r1, r1, #4
 80062f0:	6021      	strge	r1, [r4, #0]
 80062f2:	b90d      	cbnz	r5, 80062f8 <_printf_i+0x110>
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	d04b      	beq.n	8006390 <_printf_i+0x1a8>
 80062f8:	4616      	mov	r6, r2
 80062fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80062fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006302:	5dc7      	ldrb	r7, [r0, r7]
 8006304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006308:	462f      	mov	r7, r5
 800630a:	42bb      	cmp	r3, r7
 800630c:	460d      	mov	r5, r1
 800630e:	d9f4      	bls.n	80062fa <_printf_i+0x112>
 8006310:	2b08      	cmp	r3, #8
 8006312:	d10b      	bne.n	800632c <_printf_i+0x144>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	07df      	lsls	r7, r3, #31
 8006318:	d508      	bpl.n	800632c <_printf_i+0x144>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	6861      	ldr	r1, [r4, #4]
 800631e:	4299      	cmp	r1, r3
 8006320:	bfde      	ittt	le
 8006322:	2330      	movle	r3, #48	@ 0x30
 8006324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800632c:	1b92      	subs	r2, r2, r6
 800632e:	6122      	str	r2, [r4, #16]
 8006330:	f8cd a000 	str.w	sl, [sp]
 8006334:	464b      	mov	r3, r9
 8006336:	aa03      	add	r2, sp, #12
 8006338:	4621      	mov	r1, r4
 800633a:	4640      	mov	r0, r8
 800633c:	f7ff fee6 	bl	800610c <_printf_common>
 8006340:	3001      	adds	r0, #1
 8006342:	d14a      	bne.n	80063da <_printf_i+0x1f2>
 8006344:	f04f 30ff 	mov.w	r0, #4294967295
 8006348:	b004      	add	sp, #16
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	f043 0320 	orr.w	r3, r3, #32
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	4833      	ldr	r0, [pc, #204]	@ (8006424 <_printf_i+0x23c>)
 8006358:	2778      	movs	r7, #120	@ 0x78
 800635a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	6831      	ldr	r1, [r6, #0]
 8006362:	061f      	lsls	r7, r3, #24
 8006364:	f851 5b04 	ldr.w	r5, [r1], #4
 8006368:	d402      	bmi.n	8006370 <_printf_i+0x188>
 800636a:	065f      	lsls	r7, r3, #25
 800636c:	bf48      	it	mi
 800636e:	b2ad      	uxthmi	r5, r5
 8006370:	6031      	str	r1, [r6, #0]
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	bf44      	itt	mi
 8006376:	f043 0320 	orrmi.w	r3, r3, #32
 800637a:	6023      	strmi	r3, [r4, #0]
 800637c:	b11d      	cbz	r5, 8006386 <_printf_i+0x19e>
 800637e:	2310      	movs	r3, #16
 8006380:	e7ac      	b.n	80062dc <_printf_i+0xf4>
 8006382:	4827      	ldr	r0, [pc, #156]	@ (8006420 <_printf_i+0x238>)
 8006384:	e7e9      	b.n	800635a <_printf_i+0x172>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	f023 0320 	bic.w	r3, r3, #32
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	e7f6      	b.n	800637e <_printf_i+0x196>
 8006390:	4616      	mov	r6, r2
 8006392:	e7bd      	b.n	8006310 <_printf_i+0x128>
 8006394:	6833      	ldr	r3, [r6, #0]
 8006396:	6825      	ldr	r5, [r4, #0]
 8006398:	6961      	ldr	r1, [r4, #20]
 800639a:	1d18      	adds	r0, r3, #4
 800639c:	6030      	str	r0, [r6, #0]
 800639e:	062e      	lsls	r6, r5, #24
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	d501      	bpl.n	80063a8 <_printf_i+0x1c0>
 80063a4:	6019      	str	r1, [r3, #0]
 80063a6:	e002      	b.n	80063ae <_printf_i+0x1c6>
 80063a8:	0668      	lsls	r0, r5, #25
 80063aa:	d5fb      	bpl.n	80063a4 <_printf_i+0x1bc>
 80063ac:	8019      	strh	r1, [r3, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	4616      	mov	r6, r2
 80063b4:	e7bc      	b.n	8006330 <_printf_i+0x148>
 80063b6:	6833      	ldr	r3, [r6, #0]
 80063b8:	1d1a      	adds	r2, r3, #4
 80063ba:	6032      	str	r2, [r6, #0]
 80063bc:	681e      	ldr	r6, [r3, #0]
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7f9 ff34 	bl	8000230 <memchr>
 80063c8:	b108      	cbz	r0, 80063ce <_printf_i+0x1e6>
 80063ca:	1b80      	subs	r0, r0, r6
 80063cc:	6060      	str	r0, [r4, #4]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	2300      	movs	r3, #0
 80063d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d8:	e7aa      	b.n	8006330 <_printf_i+0x148>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	4632      	mov	r2, r6
 80063de:	4649      	mov	r1, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	47d0      	blx	sl
 80063e4:	3001      	adds	r0, #1
 80063e6:	d0ad      	beq.n	8006344 <_printf_i+0x15c>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	079b      	lsls	r3, r3, #30
 80063ec:	d413      	bmi.n	8006416 <_printf_i+0x22e>
 80063ee:	68e0      	ldr	r0, [r4, #12]
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	4298      	cmp	r0, r3
 80063f4:	bfb8      	it	lt
 80063f6:	4618      	movlt	r0, r3
 80063f8:	e7a6      	b.n	8006348 <_printf_i+0x160>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4632      	mov	r2, r6
 80063fe:	4649      	mov	r1, r9
 8006400:	4640      	mov	r0, r8
 8006402:	47d0      	blx	sl
 8006404:	3001      	adds	r0, #1
 8006406:	d09d      	beq.n	8006344 <_printf_i+0x15c>
 8006408:	3501      	adds	r5, #1
 800640a:	68e3      	ldr	r3, [r4, #12]
 800640c:	9903      	ldr	r1, [sp, #12]
 800640e:	1a5b      	subs	r3, r3, r1
 8006410:	42ab      	cmp	r3, r5
 8006412:	dcf2      	bgt.n	80063fa <_printf_i+0x212>
 8006414:	e7eb      	b.n	80063ee <_printf_i+0x206>
 8006416:	2500      	movs	r5, #0
 8006418:	f104 0619 	add.w	r6, r4, #25
 800641c:	e7f5      	b.n	800640a <_printf_i+0x222>
 800641e:	bf00      	nop
 8006420:	0800b436 	.word	0x0800b436
 8006424:	0800b447 	.word	0x0800b447

08006428 <_scanf_float>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	b087      	sub	sp, #28
 800642e:	4617      	mov	r7, r2
 8006430:	9303      	str	r3, [sp, #12]
 8006432:	688b      	ldr	r3, [r1, #8]
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800643a:	bf81      	itttt	hi
 800643c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006440:	eb03 0b05 	addhi.w	fp, r3, r5
 8006444:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006448:	608b      	strhi	r3, [r1, #8]
 800644a:	680b      	ldr	r3, [r1, #0]
 800644c:	460a      	mov	r2, r1
 800644e:	f04f 0500 	mov.w	r5, #0
 8006452:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006456:	f842 3b1c 	str.w	r3, [r2], #28
 800645a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800645e:	4680      	mov	r8, r0
 8006460:	460c      	mov	r4, r1
 8006462:	bf98      	it	ls
 8006464:	f04f 0b00 	movls.w	fp, #0
 8006468:	9201      	str	r2, [sp, #4]
 800646a:	4616      	mov	r6, r2
 800646c:	46aa      	mov	sl, r5
 800646e:	46a9      	mov	r9, r5
 8006470:	9502      	str	r5, [sp, #8]
 8006472:	68a2      	ldr	r2, [r4, #8]
 8006474:	b152      	cbz	r2, 800648c <_scanf_float+0x64>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b4e      	cmp	r3, #78	@ 0x4e
 800647c:	d864      	bhi.n	8006548 <_scanf_float+0x120>
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d83c      	bhi.n	80064fc <_scanf_float+0xd4>
 8006482:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006486:	b2c8      	uxtb	r0, r1
 8006488:	280e      	cmp	r0, #14
 800648a:	d93a      	bls.n	8006502 <_scanf_float+0xda>
 800648c:	f1b9 0f00 	cmp.w	r9, #0
 8006490:	d003      	beq.n	800649a <_scanf_float+0x72>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800649e:	f1ba 0f01 	cmp.w	sl, #1
 80064a2:	f200 8117 	bhi.w	80066d4 <_scanf_float+0x2ac>
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	429e      	cmp	r6, r3
 80064aa:	f200 8108 	bhi.w	80066be <_scanf_float+0x296>
 80064ae:	2001      	movs	r0, #1
 80064b0:	b007      	add	sp, #28
 80064b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80064ba:	2a0d      	cmp	r2, #13
 80064bc:	d8e6      	bhi.n	800648c <_scanf_float+0x64>
 80064be:	a101      	add	r1, pc, #4	@ (adr r1, 80064c4 <_scanf_float+0x9c>)
 80064c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064c4:	0800660b 	.word	0x0800660b
 80064c8:	0800648d 	.word	0x0800648d
 80064cc:	0800648d 	.word	0x0800648d
 80064d0:	0800648d 	.word	0x0800648d
 80064d4:	0800666b 	.word	0x0800666b
 80064d8:	08006643 	.word	0x08006643
 80064dc:	0800648d 	.word	0x0800648d
 80064e0:	0800648d 	.word	0x0800648d
 80064e4:	08006619 	.word	0x08006619
 80064e8:	0800648d 	.word	0x0800648d
 80064ec:	0800648d 	.word	0x0800648d
 80064f0:	0800648d 	.word	0x0800648d
 80064f4:	0800648d 	.word	0x0800648d
 80064f8:	080065d1 	.word	0x080065d1
 80064fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006500:	e7db      	b.n	80064ba <_scanf_float+0x92>
 8006502:	290e      	cmp	r1, #14
 8006504:	d8c2      	bhi.n	800648c <_scanf_float+0x64>
 8006506:	a001      	add	r0, pc, #4	@ (adr r0, 800650c <_scanf_float+0xe4>)
 8006508:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800650c:	080065c1 	.word	0x080065c1
 8006510:	0800648d 	.word	0x0800648d
 8006514:	080065c1 	.word	0x080065c1
 8006518:	08006657 	.word	0x08006657
 800651c:	0800648d 	.word	0x0800648d
 8006520:	08006569 	.word	0x08006569
 8006524:	080065a7 	.word	0x080065a7
 8006528:	080065a7 	.word	0x080065a7
 800652c:	080065a7 	.word	0x080065a7
 8006530:	080065a7 	.word	0x080065a7
 8006534:	080065a7 	.word	0x080065a7
 8006538:	080065a7 	.word	0x080065a7
 800653c:	080065a7 	.word	0x080065a7
 8006540:	080065a7 	.word	0x080065a7
 8006544:	080065a7 	.word	0x080065a7
 8006548:	2b6e      	cmp	r3, #110	@ 0x6e
 800654a:	d809      	bhi.n	8006560 <_scanf_float+0x138>
 800654c:	2b60      	cmp	r3, #96	@ 0x60
 800654e:	d8b2      	bhi.n	80064b6 <_scanf_float+0x8e>
 8006550:	2b54      	cmp	r3, #84	@ 0x54
 8006552:	d07b      	beq.n	800664c <_scanf_float+0x224>
 8006554:	2b59      	cmp	r3, #89	@ 0x59
 8006556:	d199      	bne.n	800648c <_scanf_float+0x64>
 8006558:	2d07      	cmp	r5, #7
 800655a:	d197      	bne.n	800648c <_scanf_float+0x64>
 800655c:	2508      	movs	r5, #8
 800655e:	e02c      	b.n	80065ba <_scanf_float+0x192>
 8006560:	2b74      	cmp	r3, #116	@ 0x74
 8006562:	d073      	beq.n	800664c <_scanf_float+0x224>
 8006564:	2b79      	cmp	r3, #121	@ 0x79
 8006566:	e7f6      	b.n	8006556 <_scanf_float+0x12e>
 8006568:	6821      	ldr	r1, [r4, #0]
 800656a:	05c8      	lsls	r0, r1, #23
 800656c:	d51b      	bpl.n	80065a6 <_scanf_float+0x17e>
 800656e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006572:	6021      	str	r1, [r4, #0]
 8006574:	f109 0901 	add.w	r9, r9, #1
 8006578:	f1bb 0f00 	cmp.w	fp, #0
 800657c:	d003      	beq.n	8006586 <_scanf_float+0x15e>
 800657e:	3201      	adds	r2, #1
 8006580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006584:	60a2      	str	r2, [r4, #8]
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	3b01      	subs	r3, #1
 800658a:	60a3      	str	r3, [r4, #8]
 800658c:	6923      	ldr	r3, [r4, #16]
 800658e:	3301      	adds	r3, #1
 8006590:	6123      	str	r3, [r4, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3b01      	subs	r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
 800659a:	f340 8087 	ble.w	80066ac <_scanf_float+0x284>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	e765      	b.n	8006472 <_scanf_float+0x4a>
 80065a6:	eb1a 0105 	adds.w	r1, sl, r5
 80065aa:	f47f af6f 	bne.w	800648c <_scanf_float+0x64>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	460d      	mov	r5, r1
 80065b8:	468a      	mov	sl, r1
 80065ba:	f806 3b01 	strb.w	r3, [r6], #1
 80065be:	e7e2      	b.n	8006586 <_scanf_float+0x15e>
 80065c0:	6822      	ldr	r2, [r4, #0]
 80065c2:	0610      	lsls	r0, r2, #24
 80065c4:	f57f af62 	bpl.w	800648c <_scanf_float+0x64>
 80065c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	e7f4      	b.n	80065ba <_scanf_float+0x192>
 80065d0:	f1ba 0f00 	cmp.w	sl, #0
 80065d4:	d10e      	bne.n	80065f4 <_scanf_float+0x1cc>
 80065d6:	f1b9 0f00 	cmp.w	r9, #0
 80065da:	d10e      	bne.n	80065fa <_scanf_float+0x1d2>
 80065dc:	6822      	ldr	r2, [r4, #0]
 80065de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065e6:	d108      	bne.n	80065fa <_scanf_float+0x1d2>
 80065e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065ec:	6022      	str	r2, [r4, #0]
 80065ee:	f04f 0a01 	mov.w	sl, #1
 80065f2:	e7e2      	b.n	80065ba <_scanf_float+0x192>
 80065f4:	f1ba 0f02 	cmp.w	sl, #2
 80065f8:	d055      	beq.n	80066a6 <_scanf_float+0x27e>
 80065fa:	2d01      	cmp	r5, #1
 80065fc:	d002      	beq.n	8006604 <_scanf_float+0x1dc>
 80065fe:	2d04      	cmp	r5, #4
 8006600:	f47f af44 	bne.w	800648c <_scanf_float+0x64>
 8006604:	3501      	adds	r5, #1
 8006606:	b2ed      	uxtb	r5, r5
 8006608:	e7d7      	b.n	80065ba <_scanf_float+0x192>
 800660a:	f1ba 0f01 	cmp.w	sl, #1
 800660e:	f47f af3d 	bne.w	800648c <_scanf_float+0x64>
 8006612:	f04f 0a02 	mov.w	sl, #2
 8006616:	e7d0      	b.n	80065ba <_scanf_float+0x192>
 8006618:	b97d      	cbnz	r5, 800663a <_scanf_float+0x212>
 800661a:	f1b9 0f00 	cmp.w	r9, #0
 800661e:	f47f af38 	bne.w	8006492 <_scanf_float+0x6a>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006628:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800662c:	f040 8108 	bne.w	8006840 <_scanf_float+0x418>
 8006630:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	2501      	movs	r5, #1
 8006638:	e7bf      	b.n	80065ba <_scanf_float+0x192>
 800663a:	2d03      	cmp	r5, #3
 800663c:	d0e2      	beq.n	8006604 <_scanf_float+0x1dc>
 800663e:	2d05      	cmp	r5, #5
 8006640:	e7de      	b.n	8006600 <_scanf_float+0x1d8>
 8006642:	2d02      	cmp	r5, #2
 8006644:	f47f af22 	bne.w	800648c <_scanf_float+0x64>
 8006648:	2503      	movs	r5, #3
 800664a:	e7b6      	b.n	80065ba <_scanf_float+0x192>
 800664c:	2d06      	cmp	r5, #6
 800664e:	f47f af1d 	bne.w	800648c <_scanf_float+0x64>
 8006652:	2507      	movs	r5, #7
 8006654:	e7b1      	b.n	80065ba <_scanf_float+0x192>
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	0591      	lsls	r1, r2, #22
 800665a:	f57f af17 	bpl.w	800648c <_scanf_float+0x64>
 800665e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	f8cd 9008 	str.w	r9, [sp, #8]
 8006668:	e7a7      	b.n	80065ba <_scanf_float+0x192>
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006670:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006674:	d006      	beq.n	8006684 <_scanf_float+0x25c>
 8006676:	0550      	lsls	r0, r2, #21
 8006678:	f57f af08 	bpl.w	800648c <_scanf_float+0x64>
 800667c:	f1b9 0f00 	cmp.w	r9, #0
 8006680:	f000 80de 	beq.w	8006840 <_scanf_float+0x418>
 8006684:	0591      	lsls	r1, r2, #22
 8006686:	bf58      	it	pl
 8006688:	9902      	ldrpl	r1, [sp, #8]
 800668a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800668e:	bf58      	it	pl
 8006690:	eba9 0101 	subpl.w	r1, r9, r1
 8006694:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006698:	bf58      	it	pl
 800669a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	f04f 0900 	mov.w	r9, #0
 80066a4:	e789      	b.n	80065ba <_scanf_float+0x192>
 80066a6:	f04f 0a03 	mov.w	sl, #3
 80066aa:	e786      	b.n	80065ba <_scanf_float+0x192>
 80066ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80066b0:	4639      	mov	r1, r7
 80066b2:	4640      	mov	r0, r8
 80066b4:	4798      	blx	r3
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f aedb 	beq.w	8006472 <_scanf_float+0x4a>
 80066bc:	e6e6      	b.n	800648c <_scanf_float+0x64>
 80066be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066c6:	463a      	mov	r2, r7
 80066c8:	4640      	mov	r0, r8
 80066ca:	4798      	blx	r3
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	e6e8      	b.n	80064a6 <_scanf_float+0x7e>
 80066d4:	1e6b      	subs	r3, r5, #1
 80066d6:	2b06      	cmp	r3, #6
 80066d8:	d824      	bhi.n	8006724 <_scanf_float+0x2fc>
 80066da:	2d02      	cmp	r5, #2
 80066dc:	d836      	bhi.n	800674c <_scanf_float+0x324>
 80066de:	9b01      	ldr	r3, [sp, #4]
 80066e0:	429e      	cmp	r6, r3
 80066e2:	f67f aee4 	bls.w	80064ae <_scanf_float+0x86>
 80066e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066ee:	463a      	mov	r2, r7
 80066f0:	4640      	mov	r0, r8
 80066f2:	4798      	blx	r3
 80066f4:	6923      	ldr	r3, [r4, #16]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	e7f0      	b.n	80066de <_scanf_float+0x2b6>
 80066fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006700:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006704:	463a      	mov	r2, r7
 8006706:	4640      	mov	r0, r8
 8006708:	4798      	blx	r3
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	3b01      	subs	r3, #1
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006714:	fa5f fa8a 	uxtb.w	sl, sl
 8006718:	f1ba 0f02 	cmp.w	sl, #2
 800671c:	d1ee      	bne.n	80066fc <_scanf_float+0x2d4>
 800671e:	3d03      	subs	r5, #3
 8006720:	b2ed      	uxtb	r5, r5
 8006722:	1b76      	subs	r6, r6, r5
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	05da      	lsls	r2, r3, #23
 8006728:	d530      	bpl.n	800678c <_scanf_float+0x364>
 800672a:	055b      	lsls	r3, r3, #21
 800672c:	d511      	bpl.n	8006752 <_scanf_float+0x32a>
 800672e:	9b01      	ldr	r3, [sp, #4]
 8006730:	429e      	cmp	r6, r3
 8006732:	f67f aebc 	bls.w	80064ae <_scanf_float+0x86>
 8006736:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800673a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800673e:	463a      	mov	r2, r7
 8006740:	4640      	mov	r0, r8
 8006742:	4798      	blx	r3
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	3b01      	subs	r3, #1
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	e7f0      	b.n	800672e <_scanf_float+0x306>
 800674c:	46aa      	mov	sl, r5
 800674e:	46b3      	mov	fp, r6
 8006750:	e7de      	b.n	8006710 <_scanf_float+0x2e8>
 8006752:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	2965      	cmp	r1, #101	@ 0x65
 800675a:	f103 33ff 	add.w	r3, r3, #4294967295
 800675e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006762:	6123      	str	r3, [r4, #16]
 8006764:	d00c      	beq.n	8006780 <_scanf_float+0x358>
 8006766:	2945      	cmp	r1, #69	@ 0x45
 8006768:	d00a      	beq.n	8006780 <_scanf_float+0x358>
 800676a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800676e:	463a      	mov	r2, r7
 8006770:	4640      	mov	r0, r8
 8006772:	4798      	blx	r3
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800677a:	3b01      	subs	r3, #1
 800677c:	1eb5      	subs	r5, r6, #2
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006784:	463a      	mov	r2, r7
 8006786:	4640      	mov	r0, r8
 8006788:	4798      	blx	r3
 800678a:	462e      	mov	r6, r5
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	f012 0210 	ands.w	r2, r2, #16
 8006792:	d001      	beq.n	8006798 <_scanf_float+0x370>
 8006794:	2000      	movs	r0, #0
 8006796:	e68b      	b.n	80064b0 <_scanf_float+0x88>
 8006798:	7032      	strb	r2, [r6, #0]
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a4:	d11c      	bne.n	80067e0 <_scanf_float+0x3b8>
 80067a6:	9b02      	ldr	r3, [sp, #8]
 80067a8:	454b      	cmp	r3, r9
 80067aa:	eba3 0209 	sub.w	r2, r3, r9
 80067ae:	d123      	bne.n	80067f8 <_scanf_float+0x3d0>
 80067b0:	9901      	ldr	r1, [sp, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	4640      	mov	r0, r8
 80067b6:	f002 fcab 	bl	8009110 <_strtod_r>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f011 0f02 	tst.w	r1, #2
 80067c4:	ec57 6b10 	vmov	r6, r7, d0
 80067c8:	f103 0204 	add.w	r2, r3, #4
 80067cc:	d01f      	beq.n	800680e <_scanf_float+0x3e6>
 80067ce:	9903      	ldr	r1, [sp, #12]
 80067d0:	600a      	str	r2, [r1, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	e9c3 6700 	strd	r6, r7, [r3]
 80067d8:	68e3      	ldr	r3, [r4, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60e3      	str	r3, [r4, #12]
 80067de:	e7d9      	b.n	8006794 <_scanf_float+0x36c>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0e4      	beq.n	80067b0 <_scanf_float+0x388>
 80067e6:	9905      	ldr	r1, [sp, #20]
 80067e8:	230a      	movs	r3, #10
 80067ea:	3101      	adds	r1, #1
 80067ec:	4640      	mov	r0, r8
 80067ee:	f002 fd0f 	bl	8009210 <_strtol_r>
 80067f2:	9b04      	ldr	r3, [sp, #16]
 80067f4:	9e05      	ldr	r6, [sp, #20]
 80067f6:	1ac2      	subs	r2, r0, r3
 80067f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80067fc:	429e      	cmp	r6, r3
 80067fe:	bf28      	it	cs
 8006800:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006804:	4910      	ldr	r1, [pc, #64]	@ (8006848 <_scanf_float+0x420>)
 8006806:	4630      	mov	r0, r6
 8006808:	f000 f998 	bl	8006b3c <siprintf>
 800680c:	e7d0      	b.n	80067b0 <_scanf_float+0x388>
 800680e:	f011 0f04 	tst.w	r1, #4
 8006812:	9903      	ldr	r1, [sp, #12]
 8006814:	600a      	str	r2, [r1, #0]
 8006816:	d1dc      	bne.n	80067d2 <_scanf_float+0x3aa>
 8006818:	681d      	ldr	r5, [r3, #0]
 800681a:	4632      	mov	r2, r6
 800681c:	463b      	mov	r3, r7
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7fa f9b3 	bl	8000b8c <__aeabi_dcmpun>
 8006826:	b128      	cbz	r0, 8006834 <_scanf_float+0x40c>
 8006828:	4808      	ldr	r0, [pc, #32]	@ (800684c <_scanf_float+0x424>)
 800682a:	f000 fa6b 	bl	8006d04 <nanf>
 800682e:	ed85 0a00 	vstr	s0, [r5]
 8006832:	e7d1      	b.n	80067d8 <_scanf_float+0x3b0>
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7fa fa06 	bl	8000c48 <__aeabi_d2f>
 800683c:	6028      	str	r0, [r5, #0]
 800683e:	e7cb      	b.n	80067d8 <_scanf_float+0x3b0>
 8006840:	f04f 0900 	mov.w	r9, #0
 8006844:	e629      	b.n	800649a <_scanf_float+0x72>
 8006846:	bf00      	nop
 8006848:	0800b458 	.word	0x0800b458
 800684c:	0800b7ed 	.word	0x0800b7ed

08006850 <std>:
 8006850:	2300      	movs	r3, #0
 8006852:	b510      	push	{r4, lr}
 8006854:	4604      	mov	r4, r0
 8006856:	e9c0 3300 	strd	r3, r3, [r0]
 800685a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800685e:	6083      	str	r3, [r0, #8]
 8006860:	8181      	strh	r1, [r0, #12]
 8006862:	6643      	str	r3, [r0, #100]	@ 0x64
 8006864:	81c2      	strh	r2, [r0, #14]
 8006866:	6183      	str	r3, [r0, #24]
 8006868:	4619      	mov	r1, r3
 800686a:	2208      	movs	r2, #8
 800686c:	305c      	adds	r0, #92	@ 0x5c
 800686e:	f000 f9c8 	bl	8006c02 <memset>
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <std+0x58>)
 8006874:	6263      	str	r3, [r4, #36]	@ 0x24
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <std+0x5c>)
 8006878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <std+0x60>)
 800687c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <std+0x64>)
 8006880:	6323      	str	r3, [r4, #48]	@ 0x30
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <std+0x68>)
 8006884:	6224      	str	r4, [r4, #32]
 8006886:	429c      	cmp	r4, r3
 8006888:	d006      	beq.n	8006898 <std+0x48>
 800688a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800688e:	4294      	cmp	r4, r2
 8006890:	d002      	beq.n	8006898 <std+0x48>
 8006892:	33d0      	adds	r3, #208	@ 0xd0
 8006894:	429c      	cmp	r4, r3
 8006896:	d105      	bne.n	80068a4 <std+0x54>
 8006898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a0:	f000 ba2c 	b.w	8006cfc <__retarget_lock_init_recursive>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	08006b7d 	.word	0x08006b7d
 80068ac:	08006b9f 	.word	0x08006b9f
 80068b0:	08006bd7 	.word	0x08006bd7
 80068b4:	08006bfb 	.word	0x08006bfb
 80068b8:	20000b0c 	.word	0x20000b0c

080068bc <stdio_exit_handler>:
 80068bc:	4a02      	ldr	r2, [pc, #8]	@ (80068c8 <stdio_exit_handler+0xc>)
 80068be:	4903      	ldr	r1, [pc, #12]	@ (80068cc <stdio_exit_handler+0x10>)
 80068c0:	4803      	ldr	r0, [pc, #12]	@ (80068d0 <stdio_exit_handler+0x14>)
 80068c2:	f000 b869 	b.w	8006998 <_fwalk_sglue>
 80068c6:	bf00      	nop
 80068c8:	20000184 	.word	0x20000184
 80068cc:	080095cd 	.word	0x080095cd
 80068d0:	20000194 	.word	0x20000194

080068d4 <cleanup_stdio>:
 80068d4:	6841      	ldr	r1, [r0, #4]
 80068d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006908 <cleanup_stdio+0x34>)
 80068d8:	4299      	cmp	r1, r3
 80068da:	b510      	push	{r4, lr}
 80068dc:	4604      	mov	r4, r0
 80068de:	d001      	beq.n	80068e4 <cleanup_stdio+0x10>
 80068e0:	f002 fe74 	bl	80095cc <_fflush_r>
 80068e4:	68a1      	ldr	r1, [r4, #8]
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <cleanup_stdio+0x38>)
 80068e8:	4299      	cmp	r1, r3
 80068ea:	d002      	beq.n	80068f2 <cleanup_stdio+0x1e>
 80068ec:	4620      	mov	r0, r4
 80068ee:	f002 fe6d 	bl	80095cc <_fflush_r>
 80068f2:	68e1      	ldr	r1, [r4, #12]
 80068f4:	4b06      	ldr	r3, [pc, #24]	@ (8006910 <cleanup_stdio+0x3c>)
 80068f6:	4299      	cmp	r1, r3
 80068f8:	d004      	beq.n	8006904 <cleanup_stdio+0x30>
 80068fa:	4620      	mov	r0, r4
 80068fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006900:	f002 be64 	b.w	80095cc <_fflush_r>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	bf00      	nop
 8006908:	20000b0c 	.word	0x20000b0c
 800690c:	20000b74 	.word	0x20000b74
 8006910:	20000bdc 	.word	0x20000bdc

08006914 <global_stdio_init.part.0>:
 8006914:	b510      	push	{r4, lr}
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <global_stdio_init.part.0+0x30>)
 8006918:	4c0b      	ldr	r4, [pc, #44]	@ (8006948 <global_stdio_init.part.0+0x34>)
 800691a:	4a0c      	ldr	r2, [pc, #48]	@ (800694c <global_stdio_init.part.0+0x38>)
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	4620      	mov	r0, r4
 8006920:	2200      	movs	r2, #0
 8006922:	2104      	movs	r1, #4
 8006924:	f7ff ff94 	bl	8006850 <std>
 8006928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800692c:	2201      	movs	r2, #1
 800692e:	2109      	movs	r1, #9
 8006930:	f7ff ff8e 	bl	8006850 <std>
 8006934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006938:	2202      	movs	r2, #2
 800693a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693e:	2112      	movs	r1, #18
 8006940:	f7ff bf86 	b.w	8006850 <std>
 8006944:	20000c44 	.word	0x20000c44
 8006948:	20000b0c 	.word	0x20000b0c
 800694c:	080068bd 	.word	0x080068bd

08006950 <__sfp_lock_acquire>:
 8006950:	4801      	ldr	r0, [pc, #4]	@ (8006958 <__sfp_lock_acquire+0x8>)
 8006952:	f000 b9d4 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8006956:	bf00      	nop
 8006958:	20000c4d 	.word	0x20000c4d

0800695c <__sfp_lock_release>:
 800695c:	4801      	ldr	r0, [pc, #4]	@ (8006964 <__sfp_lock_release+0x8>)
 800695e:	f000 b9cf 	b.w	8006d00 <__retarget_lock_release_recursive>
 8006962:	bf00      	nop
 8006964:	20000c4d 	.word	0x20000c4d

08006968 <__sinit>:
 8006968:	b510      	push	{r4, lr}
 800696a:	4604      	mov	r4, r0
 800696c:	f7ff fff0 	bl	8006950 <__sfp_lock_acquire>
 8006970:	6a23      	ldr	r3, [r4, #32]
 8006972:	b11b      	cbz	r3, 800697c <__sinit+0x14>
 8006974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006978:	f7ff bff0 	b.w	800695c <__sfp_lock_release>
 800697c:	4b04      	ldr	r3, [pc, #16]	@ (8006990 <__sinit+0x28>)
 800697e:	6223      	str	r3, [r4, #32]
 8006980:	4b04      	ldr	r3, [pc, #16]	@ (8006994 <__sinit+0x2c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f5      	bne.n	8006974 <__sinit+0xc>
 8006988:	f7ff ffc4 	bl	8006914 <global_stdio_init.part.0>
 800698c:	e7f2      	b.n	8006974 <__sinit+0xc>
 800698e:	bf00      	nop
 8006990:	080068d5 	.word	0x080068d5
 8006994:	20000c44 	.word	0x20000c44

08006998 <_fwalk_sglue>:
 8006998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800699c:	4607      	mov	r7, r0
 800699e:	4688      	mov	r8, r1
 80069a0:	4614      	mov	r4, r2
 80069a2:	2600      	movs	r6, #0
 80069a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069a8:	f1b9 0901 	subs.w	r9, r9, #1
 80069ac:	d505      	bpl.n	80069ba <_fwalk_sglue+0x22>
 80069ae:	6824      	ldr	r4, [r4, #0]
 80069b0:	2c00      	cmp	r4, #0
 80069b2:	d1f7      	bne.n	80069a4 <_fwalk_sglue+0xc>
 80069b4:	4630      	mov	r0, r6
 80069b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d907      	bls.n	80069d0 <_fwalk_sglue+0x38>
 80069c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069c4:	3301      	adds	r3, #1
 80069c6:	d003      	beq.n	80069d0 <_fwalk_sglue+0x38>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4638      	mov	r0, r7
 80069cc:	47c0      	blx	r8
 80069ce:	4306      	orrs	r6, r0
 80069d0:	3568      	adds	r5, #104	@ 0x68
 80069d2:	e7e9      	b.n	80069a8 <_fwalk_sglue+0x10>

080069d4 <setvbuf>:
 80069d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	461d      	mov	r5, r3
 80069da:	4b57      	ldr	r3, [pc, #348]	@ (8006b38 <setvbuf+0x164>)
 80069dc:	681f      	ldr	r7, [r3, #0]
 80069de:	4604      	mov	r4, r0
 80069e0:	460e      	mov	r6, r1
 80069e2:	4690      	mov	r8, r2
 80069e4:	b127      	cbz	r7, 80069f0 <setvbuf+0x1c>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	b913      	cbnz	r3, 80069f0 <setvbuf+0x1c>
 80069ea:	4638      	mov	r0, r7
 80069ec:	f7ff ffbc 	bl	8006968 <__sinit>
 80069f0:	f1b8 0f02 	cmp.w	r8, #2
 80069f4:	d006      	beq.n	8006a04 <setvbuf+0x30>
 80069f6:	f1b8 0f01 	cmp.w	r8, #1
 80069fa:	f200 809a 	bhi.w	8006b32 <setvbuf+0x15e>
 80069fe:	2d00      	cmp	r5, #0
 8006a00:	f2c0 8097 	blt.w	8006b32 <setvbuf+0x15e>
 8006a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <setvbuf+0x42>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	059a      	lsls	r2, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <setvbuf+0x42>
 8006a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a12:	f000 f974 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f002 fdd7 	bl	80095cc <_fflush_r>
 8006a1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a20:	b141      	cbz	r1, 8006a34 <setvbuf+0x60>
 8006a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a26:	4299      	cmp	r1, r3
 8006a28:	d002      	beq.n	8006a30 <setvbuf+0x5c>
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	f000 ffbc 	bl	80079a8 <_free_r>
 8006a30:	2300      	movs	r3, #0
 8006a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a34:	2300      	movs	r3, #0
 8006a36:	61a3      	str	r3, [r4, #24]
 8006a38:	6063      	str	r3, [r4, #4]
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	061b      	lsls	r3, r3, #24
 8006a3e:	d503      	bpl.n	8006a48 <setvbuf+0x74>
 8006a40:	6921      	ldr	r1, [r4, #16]
 8006a42:	4638      	mov	r0, r7
 8006a44:	f000 ffb0 	bl	80079a8 <_free_r>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	f1b8 0f02 	cmp.w	r8, #2
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	d061      	beq.n	8006b1e <setvbuf+0x14a>
 8006a5a:	ab01      	add	r3, sp, #4
 8006a5c:	466a      	mov	r2, sp
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4638      	mov	r0, r7
 8006a62:	f002 fddb 	bl	800961c <__swhatbuf_r>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	4318      	orrs	r0, r3
 8006a6a:	81a0      	strh	r0, [r4, #12]
 8006a6c:	bb2d      	cbnz	r5, 8006aba <setvbuf+0xe6>
 8006a6e:	9d00      	ldr	r5, [sp, #0]
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 ffe3 	bl	8007a3c <malloc>
 8006a76:	4606      	mov	r6, r0
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d152      	bne.n	8006b22 <setvbuf+0x14e>
 8006a7c:	f8dd 9000 	ldr.w	r9, [sp]
 8006a80:	45a9      	cmp	r9, r5
 8006a82:	d140      	bne.n	8006b06 <setvbuf+0x132>
 8006a84:	f04f 35ff 	mov.w	r5, #4294967295
 8006a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8c:	f043 0202 	orr.w	r2, r3, #2
 8006a90:	81a2      	strh	r2, [r4, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	60a2      	str	r2, [r4, #8]
 8006a96:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	6122      	str	r2, [r4, #16]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	6162      	str	r2, [r4, #20]
 8006aa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006aa4:	07d6      	lsls	r6, r2, #31
 8006aa6:	d404      	bmi.n	8006ab2 <setvbuf+0xde>
 8006aa8:	0598      	lsls	r0, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <setvbuf+0xde>
 8006aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aae:	f000 f927 	bl	8006d00 <__retarget_lock_release_recursive>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	b003      	add	sp, #12
 8006ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	d0d8      	beq.n	8006a70 <setvbuf+0x9c>
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	b913      	cbnz	r3, 8006ac8 <setvbuf+0xf4>
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f7ff ff50 	bl	8006968 <__sinit>
 8006ac8:	f1b8 0f01 	cmp.w	r8, #1
 8006acc:	bf08      	it	eq
 8006ace:	89a3      	ldrheq	r3, [r4, #12]
 8006ad0:	6026      	str	r6, [r4, #0]
 8006ad2:	bf04      	itt	eq
 8006ad4:	f043 0301 	orreq.w	r3, r3, #1
 8006ad8:	81a3      	strheq	r3, [r4, #12]
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	f013 0208 	ands.w	r2, r3, #8
 8006ae2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ae6:	d01e      	beq.n	8006b26 <setvbuf+0x152>
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	bf41      	itttt	mi
 8006aec:	2200      	movmi	r2, #0
 8006aee:	426d      	negmi	r5, r5
 8006af0:	60a2      	strmi	r2, [r4, #8]
 8006af2:	61a5      	strmi	r5, [r4, #24]
 8006af4:	bf58      	it	pl
 8006af6:	60a5      	strpl	r5, [r4, #8]
 8006af8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006afa:	07d2      	lsls	r2, r2, #31
 8006afc:	d401      	bmi.n	8006b02 <setvbuf+0x12e>
 8006afe:	059b      	lsls	r3, r3, #22
 8006b00:	d513      	bpl.n	8006b2a <setvbuf+0x156>
 8006b02:	2500      	movs	r5, #0
 8006b04:	e7d5      	b.n	8006ab2 <setvbuf+0xde>
 8006b06:	4648      	mov	r0, r9
 8006b08:	f000 ff98 	bl	8007a3c <malloc>
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d0b8      	beq.n	8006a84 <setvbuf+0xb0>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	464d      	mov	r5, r9
 8006b1c:	e7cf      	b.n	8006abe <setvbuf+0xea>
 8006b1e:	2500      	movs	r5, #0
 8006b20:	e7b2      	b.n	8006a88 <setvbuf+0xb4>
 8006b22:	46a9      	mov	r9, r5
 8006b24:	e7f5      	b.n	8006b12 <setvbuf+0x13e>
 8006b26:	60a2      	str	r2, [r4, #8]
 8006b28:	e7e6      	b.n	8006af8 <setvbuf+0x124>
 8006b2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2c:	f000 f8e8 	bl	8006d00 <__retarget_lock_release_recursive>
 8006b30:	e7e7      	b.n	8006b02 <setvbuf+0x12e>
 8006b32:	f04f 35ff 	mov.w	r5, #4294967295
 8006b36:	e7bc      	b.n	8006ab2 <setvbuf+0xde>
 8006b38:	20000190 	.word	0x20000190

08006b3c <siprintf>:
 8006b3c:	b40e      	push	{r1, r2, r3}
 8006b3e:	b500      	push	{lr}
 8006b40:	b09c      	sub	sp, #112	@ 0x70
 8006b42:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b44:	9002      	str	r0, [sp, #8]
 8006b46:	9006      	str	r0, [sp, #24]
 8006b48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b4c:	4809      	ldr	r0, [pc, #36]	@ (8006b74 <siprintf+0x38>)
 8006b4e:	9107      	str	r1, [sp, #28]
 8006b50:	9104      	str	r1, [sp, #16]
 8006b52:	4909      	ldr	r1, [pc, #36]	@ (8006b78 <siprintf+0x3c>)
 8006b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b58:	9105      	str	r1, [sp, #20]
 8006b5a:	6800      	ldr	r0, [r0, #0]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	a902      	add	r1, sp, #8
 8006b60:	f002 fbb4 	bl	80092cc <_svfiprintf_r>
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	b01c      	add	sp, #112	@ 0x70
 8006b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b70:	b003      	add	sp, #12
 8006b72:	4770      	bx	lr
 8006b74:	20000190 	.word	0x20000190
 8006b78:	ffff0208 	.word	0xffff0208

08006b7c <__sread>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	f000 f86c 	bl	8006c60 <_read_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bfab      	itete	ge
 8006b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b90:	181b      	addge	r3, r3, r0
 8006b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b96:	bfac      	ite	ge
 8006b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b9a:	81a3      	strhlt	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__swrite>:
 8006b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	05db      	lsls	r3, r3, #23
 8006ba8:	4605      	mov	r5, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	4616      	mov	r6, r2
 8006bae:	d505      	bpl.n	8006bbc <__swrite+0x1e>
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f000 f840 	bl	8006c3c <_lseek_r>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd2:	f000 b857 	b.w	8006c84 <_write_r>

08006bd6 <__sseek>:
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bde:	f000 f82d 	bl	8006c3c <_lseek_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	bf15      	itete	ne
 8006be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bf2:	81a3      	strheq	r3, [r4, #12]
 8006bf4:	bf18      	it	ne
 8006bf6:	81a3      	strhne	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__sclose>:
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 b80d 	b.w	8006c1c <_close_r>

08006c02 <memset>:
 8006c02:	4402      	add	r2, r0
 8006c04:	4603      	mov	r3, r0
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d100      	bne.n	8006c0c <memset+0xa>
 8006c0a:	4770      	bx	lr
 8006c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c10:	e7f9      	b.n	8006c06 <memset+0x4>
	...

08006c14 <_localeconv_r>:
 8006c14:	4800      	ldr	r0, [pc, #0]	@ (8006c18 <_localeconv_r+0x4>)
 8006c16:	4770      	bx	lr
 8006c18:	200002d0 	.word	0x200002d0

08006c1c <_close_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d06      	ldr	r5, [pc, #24]	@ (8006c38 <_close_r+0x1c>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fa ff58 	bl	8001adc <_close>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_close_r+0x1a>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_close_r+0x1a>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	20000c48 	.word	0x20000c48

08006c3c <_lseek_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	@ (8006c5c <_lseek_r+0x20>)
 8006c40:	4604      	mov	r4, r0
 8006c42:	4608      	mov	r0, r1
 8006c44:	4611      	mov	r1, r2
 8006c46:	2200      	movs	r2, #0
 8006c48:	602a      	str	r2, [r5, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f7fa ff6d 	bl	8001b2a <_lseek>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_lseek_r+0x1e>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_lseek_r+0x1e>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20000c48 	.word	0x20000c48

08006c60 <_read_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d07      	ldr	r5, [pc, #28]	@ (8006c80 <_read_r+0x20>)
 8006c64:	4604      	mov	r4, r0
 8006c66:	4608      	mov	r0, r1
 8006c68:	4611      	mov	r1, r2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	602a      	str	r2, [r5, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f7fa fefb 	bl	8001a6a <_read>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_read_r+0x1e>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_read_r+0x1e>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20000c48 	.word	0x20000c48

08006c84 <_write_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4d07      	ldr	r5, [pc, #28]	@ (8006ca4 <_write_r+0x20>)
 8006c88:	4604      	mov	r4, r0
 8006c8a:	4608      	mov	r0, r1
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	602a      	str	r2, [r5, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f7fa ff06 	bl	8001aa4 <_write>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_write_r+0x1e>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_write_r+0x1e>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000c48 	.word	0x20000c48

08006ca8 <__errno>:
 8006ca8:	4b01      	ldr	r3, [pc, #4]	@ (8006cb0 <__errno+0x8>)
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20000190 	.word	0x20000190

08006cb4 <__libc_init_array>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8006cec <__libc_init_array+0x38>)
 8006cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8006cf0 <__libc_init_array+0x3c>)
 8006cba:	1b64      	subs	r4, r4, r5
 8006cbc:	10a4      	asrs	r4, r4, #2
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	42a6      	cmp	r6, r4
 8006cc2:	d109      	bne.n	8006cd8 <__libc_init_array+0x24>
 8006cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8006cf4 <__libc_init_array+0x40>)
 8006cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8006cf8 <__libc_init_array+0x44>)
 8006cc8:	f004 fad0 	bl	800b26c <_init>
 8006ccc:	1b64      	subs	r4, r4, r5
 8006cce:	10a4      	asrs	r4, r4, #2
 8006cd0:	2600      	movs	r6, #0
 8006cd2:	42a6      	cmp	r6, r4
 8006cd4:	d105      	bne.n	8006ce2 <__libc_init_array+0x2e>
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cdc:	4798      	blx	r3
 8006cde:	3601      	adds	r6, #1
 8006ce0:	e7ee      	b.n	8006cc0 <__libc_init_array+0xc>
 8006ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce6:	4798      	blx	r3
 8006ce8:	3601      	adds	r6, #1
 8006cea:	e7f2      	b.n	8006cd2 <__libc_init_array+0x1e>
 8006cec:	0800b888 	.word	0x0800b888
 8006cf0:	0800b888 	.word	0x0800b888
 8006cf4:	0800b888 	.word	0x0800b888
 8006cf8:	0800b88c 	.word	0x0800b88c

08006cfc <__retarget_lock_init_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <__retarget_lock_acquire_recursive>:
 8006cfe:	4770      	bx	lr

08006d00 <__retarget_lock_release_recursive>:
 8006d00:	4770      	bx	lr
	...

08006d04 <nanf>:
 8006d04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d0c <nanf+0x8>
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	7fc00000 	.word	0x7fc00000

08006d10 <quorem>:
 8006d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	6903      	ldr	r3, [r0, #16]
 8006d16:	690c      	ldr	r4, [r1, #16]
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	db7e      	blt.n	8006e1c <quorem+0x10c>
 8006d1e:	3c01      	subs	r4, #1
 8006d20:	f101 0814 	add.w	r8, r1, #20
 8006d24:	00a3      	lsls	r3, r4, #2
 8006d26:	f100 0514 	add.w	r5, r0, #20
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d42:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d46:	d32e      	bcc.n	8006da6 <quorem+0x96>
 8006d48:	f04f 0a00 	mov.w	sl, #0
 8006d4c:	46c4      	mov	ip, r8
 8006d4e:	46ae      	mov	lr, r5
 8006d50:	46d3      	mov	fp, sl
 8006d52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d56:	b298      	uxth	r0, r3
 8006d58:	fb06 a000 	mla	r0, r6, r0, sl
 8006d5c:	0c02      	lsrs	r2, r0, #16
 8006d5e:	0c1b      	lsrs	r3, r3, #16
 8006d60:	fb06 2303 	mla	r3, r6, r3, r2
 8006d64:	f8de 2000 	ldr.w	r2, [lr]
 8006d68:	b280      	uxth	r0, r0
 8006d6a:	b292      	uxth	r2, r2
 8006d6c:	1a12      	subs	r2, r2, r0
 8006d6e:	445a      	add	r2, fp
 8006d70:	f8de 0000 	ldr.w	r0, [lr]
 8006d74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d82:	b292      	uxth	r2, r2
 8006d84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d88:	45e1      	cmp	r9, ip
 8006d8a:	f84e 2b04 	str.w	r2, [lr], #4
 8006d8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d92:	d2de      	bcs.n	8006d52 <quorem+0x42>
 8006d94:	9b00      	ldr	r3, [sp, #0]
 8006d96:	58eb      	ldr	r3, [r5, r3]
 8006d98:	b92b      	cbnz	r3, 8006da6 <quorem+0x96>
 8006d9a:	9b01      	ldr	r3, [sp, #4]
 8006d9c:	3b04      	subs	r3, #4
 8006d9e:	429d      	cmp	r5, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	d32f      	bcc.n	8006e04 <quorem+0xf4>
 8006da4:	613c      	str	r4, [r7, #16]
 8006da6:	4638      	mov	r0, r7
 8006da8:	f001 f9c2 	bl	8008130 <__mcmp>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	db25      	blt.n	8006dfc <quorem+0xec>
 8006db0:	4629      	mov	r1, r5
 8006db2:	2000      	movs	r0, #0
 8006db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006db8:	f8d1 c000 	ldr.w	ip, [r1]
 8006dbc:	fa1f fe82 	uxth.w	lr, r2
 8006dc0:	fa1f f38c 	uxth.w	r3, ip
 8006dc4:	eba3 030e 	sub.w	r3, r3, lr
 8006dc8:	4403      	add	r3, r0
 8006dca:	0c12      	lsrs	r2, r2, #16
 8006dcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dda:	45c1      	cmp	r9, r8
 8006ddc:	f841 3b04 	str.w	r3, [r1], #4
 8006de0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006de4:	d2e6      	bcs.n	8006db4 <quorem+0xa4>
 8006de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dee:	b922      	cbnz	r2, 8006dfa <quorem+0xea>
 8006df0:	3b04      	subs	r3, #4
 8006df2:	429d      	cmp	r5, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	d30b      	bcc.n	8006e10 <quorem+0x100>
 8006df8:	613c      	str	r4, [r7, #16]
 8006dfa:	3601      	adds	r6, #1
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	b003      	add	sp, #12
 8006e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	3b04      	subs	r3, #4
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	d1cb      	bne.n	8006da4 <quorem+0x94>
 8006e0c:	3c01      	subs	r4, #1
 8006e0e:	e7c6      	b.n	8006d9e <quorem+0x8e>
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	3b04      	subs	r3, #4
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d1ef      	bne.n	8006df8 <quorem+0xe8>
 8006e18:	3c01      	subs	r4, #1
 8006e1a:	e7ea      	b.n	8006df2 <quorem+0xe2>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e7ee      	b.n	8006dfe <quorem+0xee>

08006e20 <_dtoa_r>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	69c7      	ldr	r7, [r0, #28]
 8006e26:	b099      	sub	sp, #100	@ 0x64
 8006e28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e2c:	ec55 4b10 	vmov	r4, r5, d0
 8006e30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e32:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e34:	4683      	mov	fp, r0
 8006e36:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e3a:	b97f      	cbnz	r7, 8006e5c <_dtoa_r+0x3c>
 8006e3c:	2010      	movs	r0, #16
 8006e3e:	f000 fdfd 	bl	8007a3c <malloc>
 8006e42:	4602      	mov	r2, r0
 8006e44:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e48:	b920      	cbnz	r0, 8006e54 <_dtoa_r+0x34>
 8006e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80070e8 <_dtoa_r+0x2c8>)
 8006e4c:	21ef      	movs	r1, #239	@ 0xef
 8006e4e:	48a7      	ldr	r0, [pc, #668]	@ (80070ec <_dtoa_r+0x2cc>)
 8006e50:	f002 fcba 	bl	80097c8 <__assert_func>
 8006e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e58:	6007      	str	r7, [r0, #0]
 8006e5a:	60c7      	str	r7, [r0, #12]
 8006e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e60:	6819      	ldr	r1, [r3, #0]
 8006e62:	b159      	cbz	r1, 8006e7c <_dtoa_r+0x5c>
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	604a      	str	r2, [r1, #4]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4093      	lsls	r3, r2
 8006e6c:	608b      	str	r3, [r1, #8]
 8006e6e:	4658      	mov	r0, fp
 8006e70:	f000 feda 	bl	8007c28 <_Bfree>
 8006e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	1e2b      	subs	r3, r5, #0
 8006e7e:	bfb9      	ittee	lt
 8006e80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e84:	9303      	strlt	r3, [sp, #12]
 8006e86:	2300      	movge	r3, #0
 8006e88:	6033      	strge	r3, [r6, #0]
 8006e8a:	9f03      	ldr	r7, [sp, #12]
 8006e8c:	4b98      	ldr	r3, [pc, #608]	@ (80070f0 <_dtoa_r+0x2d0>)
 8006e8e:	bfbc      	itt	lt
 8006e90:	2201      	movlt	r2, #1
 8006e92:	6032      	strlt	r2, [r6, #0]
 8006e94:	43bb      	bics	r3, r7
 8006e96:	d112      	bne.n	8006ebe <_dtoa_r+0x9e>
 8006e98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ea4:	4323      	orrs	r3, r4
 8006ea6:	f000 854d 	beq.w	8007944 <_dtoa_r+0xb24>
 8006eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007104 <_dtoa_r+0x2e4>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 854f 	beq.w	8007954 <_dtoa_r+0xb34>
 8006eb6:	f10a 0303 	add.w	r3, sl, #3
 8006eba:	f000 bd49 	b.w	8007950 <_dtoa_r+0xb30>
 8006ebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	ec51 0b17 	vmov	r0, r1, d7
 8006ec8:	2300      	movs	r3, #0
 8006eca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ece:	f7f9 fe2b 	bl	8000b28 <__aeabi_dcmpeq>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	b158      	cbz	r0, 8006eee <_dtoa_r+0xce>
 8006ed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ed8:	2301      	movs	r3, #1
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ede:	b113      	cbz	r3, 8006ee6 <_dtoa_r+0xc6>
 8006ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ee2:	4b84      	ldr	r3, [pc, #528]	@ (80070f4 <_dtoa_r+0x2d4>)
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007108 <_dtoa_r+0x2e8>
 8006eea:	f000 bd33 	b.w	8007954 <_dtoa_r+0xb34>
 8006eee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ef2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ef4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f001 fa3a 	bl	8008370 <__d2b>
 8006efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f00:	4681      	mov	r9, r0
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d077      	beq.n	8006ff6 <_dtoa_r+0x1d6>
 8006f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f20:	4619      	mov	r1, r3
 8006f22:	2200      	movs	r2, #0
 8006f24:	4b74      	ldr	r3, [pc, #464]	@ (80070f8 <_dtoa_r+0x2d8>)
 8006f26:	f7f9 f9df 	bl	80002e8 <__aeabi_dsub>
 8006f2a:	a369      	add	r3, pc, #420	@ (adr r3, 80070d0 <_dtoa_r+0x2b0>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f7f9 fb92 	bl	8000658 <__aeabi_dmul>
 8006f34:	a368      	add	r3, pc, #416	@ (adr r3, 80070d8 <_dtoa_r+0x2b8>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f9d7 	bl	80002ec <__adddf3>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	460d      	mov	r5, r1
 8006f44:	f7f9 fb1e 	bl	8000584 <__aeabi_i2d>
 8006f48:	a365      	add	r3, pc, #404	@ (adr r3, 80070e0 <_dtoa_r+0x2c0>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f7f9 fb83 	bl	8000658 <__aeabi_dmul>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	f7f9 f9c7 	bl	80002ec <__adddf3>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	f7f9 fe29 	bl	8000bb8 <__aeabi_d2iz>
 8006f66:	2200      	movs	r2, #0
 8006f68:	4607      	mov	r7, r0
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f7f9 fde4 	bl	8000b3c <__aeabi_dcmplt>
 8006f74:	b140      	cbz	r0, 8006f88 <_dtoa_r+0x168>
 8006f76:	4638      	mov	r0, r7
 8006f78:	f7f9 fb04 	bl	8000584 <__aeabi_i2d>
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	462b      	mov	r3, r5
 8006f80:	f7f9 fdd2 	bl	8000b28 <__aeabi_dcmpeq>
 8006f84:	b900      	cbnz	r0, 8006f88 <_dtoa_r+0x168>
 8006f86:	3f01      	subs	r7, #1
 8006f88:	2f16      	cmp	r7, #22
 8006f8a:	d851      	bhi.n	8007030 <_dtoa_r+0x210>
 8006f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80070fc <_dtoa_r+0x2dc>)
 8006f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f9a:	f7f9 fdcf 	bl	8000b3c <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d048      	beq.n	8007034 <_dtoa_r+0x214>
 8006fa2:	3f01      	subs	r7, #1
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006fa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006faa:	1b9b      	subs	r3, r3, r6
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	bf44      	itt	mi
 8006fb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fb4:	2300      	movmi	r3, #0
 8006fb6:	9208      	str	r2, [sp, #32]
 8006fb8:	bf54      	ite	pl
 8006fba:	f04f 0800 	movpl.w	r8, #0
 8006fbe:	9308      	strmi	r3, [sp, #32]
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	db39      	blt.n	8007038 <_dtoa_r+0x218>
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006fc8:	443b      	add	r3, r7
 8006fca:	9308      	str	r3, [sp, #32]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd2:	2b09      	cmp	r3, #9
 8006fd4:	d864      	bhi.n	80070a0 <_dtoa_r+0x280>
 8006fd6:	2b05      	cmp	r3, #5
 8006fd8:	bfc4      	itt	gt
 8006fda:	3b04      	subgt	r3, #4
 8006fdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fe4:	bfcc      	ite	gt
 8006fe6:	2400      	movgt	r4, #0
 8006fe8:	2401      	movle	r4, #1
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d863      	bhi.n	80070b6 <_dtoa_r+0x296>
 8006fee:	e8df f003 	tbb	[pc, r3]
 8006ff2:	372a      	.short	0x372a
 8006ff4:	5535      	.short	0x5535
 8006ff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ffa:	441e      	add	r6, r3
 8006ffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007000:	2b20      	cmp	r3, #32
 8007002:	bfc1      	itttt	gt
 8007004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007008:	409f      	lslgt	r7, r3
 800700a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800700e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007012:	bfd6      	itet	le
 8007014:	f1c3 0320 	rsble	r3, r3, #32
 8007018:	ea47 0003 	orrgt.w	r0, r7, r3
 800701c:	fa04 f003 	lslle.w	r0, r4, r3
 8007020:	f7f9 faa0 	bl	8000564 <__aeabi_ui2d>
 8007024:	2201      	movs	r2, #1
 8007026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800702a:	3e01      	subs	r6, #1
 800702c:	9214      	str	r2, [sp, #80]	@ 0x50
 800702e:	e777      	b.n	8006f20 <_dtoa_r+0x100>
 8007030:	2301      	movs	r3, #1
 8007032:	e7b8      	b.n	8006fa6 <_dtoa_r+0x186>
 8007034:	9012      	str	r0, [sp, #72]	@ 0x48
 8007036:	e7b7      	b.n	8006fa8 <_dtoa_r+0x188>
 8007038:	427b      	negs	r3, r7
 800703a:	930a      	str	r3, [sp, #40]	@ 0x28
 800703c:	2300      	movs	r3, #0
 800703e:	eba8 0807 	sub.w	r8, r8, r7
 8007042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007044:	e7c4      	b.n	8006fd0 <_dtoa_r+0x1b0>
 8007046:	2300      	movs	r3, #0
 8007048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800704a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800704c:	2b00      	cmp	r3, #0
 800704e:	dc35      	bgt.n	80070bc <_dtoa_r+0x29c>
 8007050:	2301      	movs	r3, #1
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	9307      	str	r3, [sp, #28]
 8007056:	461a      	mov	r2, r3
 8007058:	920e      	str	r2, [sp, #56]	@ 0x38
 800705a:	e00b      	b.n	8007074 <_dtoa_r+0x254>
 800705c:	2301      	movs	r3, #1
 800705e:	e7f3      	b.n	8007048 <_dtoa_r+0x228>
 8007060:	2300      	movs	r3, #0
 8007062:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	2b01      	cmp	r3, #1
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	bfb8      	it	lt
 8007072:	2301      	movlt	r3, #1
 8007074:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007078:	2100      	movs	r1, #0
 800707a:	2204      	movs	r2, #4
 800707c:	f102 0514 	add.w	r5, r2, #20
 8007080:	429d      	cmp	r5, r3
 8007082:	d91f      	bls.n	80070c4 <_dtoa_r+0x2a4>
 8007084:	6041      	str	r1, [r0, #4]
 8007086:	4658      	mov	r0, fp
 8007088:	f000 fd8e 	bl	8007ba8 <_Balloc>
 800708c:	4682      	mov	sl, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d13c      	bne.n	800710c <_dtoa_r+0x2ec>
 8007092:	4b1b      	ldr	r3, [pc, #108]	@ (8007100 <_dtoa_r+0x2e0>)
 8007094:	4602      	mov	r2, r0
 8007096:	f240 11af 	movw	r1, #431	@ 0x1af
 800709a:	e6d8      	b.n	8006e4e <_dtoa_r+0x2e>
 800709c:	2301      	movs	r3, #1
 800709e:	e7e0      	b.n	8007062 <_dtoa_r+0x242>
 80070a0:	2401      	movs	r4, #1
 80070a2:	2300      	movs	r3, #0
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070a8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2312      	movs	r3, #18
 80070b4:	e7d0      	b.n	8007058 <_dtoa_r+0x238>
 80070b6:	2301      	movs	r3, #1
 80070b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ba:	e7f5      	b.n	80070a8 <_dtoa_r+0x288>
 80070bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	e7d7      	b.n	8007074 <_dtoa_r+0x254>
 80070c4:	3101      	adds	r1, #1
 80070c6:	0052      	lsls	r2, r2, #1
 80070c8:	e7d8      	b.n	800707c <_dtoa_r+0x25c>
 80070ca:	bf00      	nop
 80070cc:	f3af 8000 	nop.w
 80070d0:	636f4361 	.word	0x636f4361
 80070d4:	3fd287a7 	.word	0x3fd287a7
 80070d8:	8b60c8b3 	.word	0x8b60c8b3
 80070dc:	3fc68a28 	.word	0x3fc68a28
 80070e0:	509f79fb 	.word	0x509f79fb
 80070e4:	3fd34413 	.word	0x3fd34413
 80070e8:	0800b46a 	.word	0x0800b46a
 80070ec:	0800b481 	.word	0x0800b481
 80070f0:	7ff00000 	.word	0x7ff00000
 80070f4:	0800b435 	.word	0x0800b435
 80070f8:	3ff80000 	.word	0x3ff80000
 80070fc:	0800b578 	.word	0x0800b578
 8007100:	0800b4d9 	.word	0x0800b4d9
 8007104:	0800b466 	.word	0x0800b466
 8007108:	0800b434 	.word	0x0800b434
 800710c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007110:	6018      	str	r0, [r3, #0]
 8007112:	9b07      	ldr	r3, [sp, #28]
 8007114:	2b0e      	cmp	r3, #14
 8007116:	f200 80a4 	bhi.w	8007262 <_dtoa_r+0x442>
 800711a:	2c00      	cmp	r4, #0
 800711c:	f000 80a1 	beq.w	8007262 <_dtoa_r+0x442>
 8007120:	2f00      	cmp	r7, #0
 8007122:	dd33      	ble.n	800718c <_dtoa_r+0x36c>
 8007124:	4bad      	ldr	r3, [pc, #692]	@ (80073dc <_dtoa_r+0x5bc>)
 8007126:	f007 020f 	and.w	r2, r7, #15
 800712a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800712e:	ed93 7b00 	vldr	d7, [r3]
 8007132:	05f8      	lsls	r0, r7, #23
 8007134:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800713c:	d516      	bpl.n	800716c <_dtoa_r+0x34c>
 800713e:	4ba8      	ldr	r3, [pc, #672]	@ (80073e0 <_dtoa_r+0x5c0>)
 8007140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007148:	f7f9 fbb0 	bl	80008ac <__aeabi_ddiv>
 800714c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007150:	f004 040f 	and.w	r4, r4, #15
 8007154:	2603      	movs	r6, #3
 8007156:	4da2      	ldr	r5, [pc, #648]	@ (80073e0 <_dtoa_r+0x5c0>)
 8007158:	b954      	cbnz	r4, 8007170 <_dtoa_r+0x350>
 800715a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800715e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007162:	f7f9 fba3 	bl	80008ac <__aeabi_ddiv>
 8007166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716a:	e028      	b.n	80071be <_dtoa_r+0x39e>
 800716c:	2602      	movs	r6, #2
 800716e:	e7f2      	b.n	8007156 <_dtoa_r+0x336>
 8007170:	07e1      	lsls	r1, r4, #31
 8007172:	d508      	bpl.n	8007186 <_dtoa_r+0x366>
 8007174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800717c:	f7f9 fa6c 	bl	8000658 <__aeabi_dmul>
 8007180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007184:	3601      	adds	r6, #1
 8007186:	1064      	asrs	r4, r4, #1
 8007188:	3508      	adds	r5, #8
 800718a:	e7e5      	b.n	8007158 <_dtoa_r+0x338>
 800718c:	f000 80d2 	beq.w	8007334 <_dtoa_r+0x514>
 8007190:	427c      	negs	r4, r7
 8007192:	4b92      	ldr	r3, [pc, #584]	@ (80073dc <_dtoa_r+0x5bc>)
 8007194:	4d92      	ldr	r5, [pc, #584]	@ (80073e0 <_dtoa_r+0x5c0>)
 8007196:	f004 020f 	and.w	r2, r4, #15
 800719a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071a6:	f7f9 fa57 	bl	8000658 <__aeabi_dmul>
 80071aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ae:	1124      	asrs	r4, r4, #4
 80071b0:	2300      	movs	r3, #0
 80071b2:	2602      	movs	r6, #2
 80071b4:	2c00      	cmp	r4, #0
 80071b6:	f040 80b2 	bne.w	800731e <_dtoa_r+0x4fe>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1d3      	bne.n	8007166 <_dtoa_r+0x346>
 80071be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80b7 	beq.w	8007338 <_dtoa_r+0x518>
 80071ca:	4b86      	ldr	r3, [pc, #536]	@ (80073e4 <_dtoa_r+0x5c4>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 fcb3 	bl	8000b3c <__aeabi_dcmplt>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f000 80ae 	beq.w	8007338 <_dtoa_r+0x518>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 80aa 	beq.w	8007338 <_dtoa_r+0x518>
 80071e4:	9b00      	ldr	r3, [sp, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dd37      	ble.n	800725a <_dtoa_r+0x43a>
 80071ea:	1e7b      	subs	r3, r7, #1
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	4620      	mov	r0, r4
 80071f0:	4b7d      	ldr	r3, [pc, #500]	@ (80073e8 <_dtoa_r+0x5c8>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	4629      	mov	r1, r5
 80071f6:	f7f9 fa2f 	bl	8000658 <__aeabi_dmul>
 80071fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071fe:	9c00      	ldr	r4, [sp, #0]
 8007200:	3601      	adds	r6, #1
 8007202:	4630      	mov	r0, r6
 8007204:	f7f9 f9be 	bl	8000584 <__aeabi_i2d>
 8007208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800720c:	f7f9 fa24 	bl	8000658 <__aeabi_dmul>
 8007210:	4b76      	ldr	r3, [pc, #472]	@ (80073ec <_dtoa_r+0x5cc>)
 8007212:	2200      	movs	r2, #0
 8007214:	f7f9 f86a 	bl	80002ec <__adddf3>
 8007218:	4605      	mov	r5, r0
 800721a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800721e:	2c00      	cmp	r4, #0
 8007220:	f040 808d 	bne.w	800733e <_dtoa_r+0x51e>
 8007224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007228:	4b71      	ldr	r3, [pc, #452]	@ (80073f0 <_dtoa_r+0x5d0>)
 800722a:	2200      	movs	r2, #0
 800722c:	f7f9 f85c 	bl	80002e8 <__aeabi_dsub>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007238:	462a      	mov	r2, r5
 800723a:	4633      	mov	r3, r6
 800723c:	f7f9 fc9c 	bl	8000b78 <__aeabi_dcmpgt>
 8007240:	2800      	cmp	r0, #0
 8007242:	f040 828b 	bne.w	800775c <_dtoa_r+0x93c>
 8007246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724a:	462a      	mov	r2, r5
 800724c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007250:	f7f9 fc74 	bl	8000b3c <__aeabi_dcmplt>
 8007254:	2800      	cmp	r0, #0
 8007256:	f040 8128 	bne.w	80074aa <_dtoa_r+0x68a>
 800725a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800725e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007264:	2b00      	cmp	r3, #0
 8007266:	f2c0 815a 	blt.w	800751e <_dtoa_r+0x6fe>
 800726a:	2f0e      	cmp	r7, #14
 800726c:	f300 8157 	bgt.w	800751e <_dtoa_r+0x6fe>
 8007270:	4b5a      	ldr	r3, [pc, #360]	@ (80073dc <_dtoa_r+0x5bc>)
 8007272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007276:	ed93 7b00 	vldr	d7, [r3]
 800727a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800727c:	2b00      	cmp	r3, #0
 800727e:	ed8d 7b00 	vstr	d7, [sp]
 8007282:	da03      	bge.n	800728c <_dtoa_r+0x46c>
 8007284:	9b07      	ldr	r3, [sp, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f340 8101 	ble.w	800748e <_dtoa_r+0x66e>
 800728c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007290:	4656      	mov	r6, sl
 8007292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007296:	4620      	mov	r0, r4
 8007298:	4629      	mov	r1, r5
 800729a:	f7f9 fb07 	bl	80008ac <__aeabi_ddiv>
 800729e:	f7f9 fc8b 	bl	8000bb8 <__aeabi_d2iz>
 80072a2:	4680      	mov	r8, r0
 80072a4:	f7f9 f96e 	bl	8000584 <__aeabi_i2d>
 80072a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ac:	f7f9 f9d4 	bl	8000658 <__aeabi_dmul>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072bc:	f7f9 f814 	bl	80002e8 <__aeabi_dsub>
 80072c0:	f806 4b01 	strb.w	r4, [r6], #1
 80072c4:	9d07      	ldr	r5, [sp, #28]
 80072c6:	eba6 040a 	sub.w	r4, r6, sl
 80072ca:	42a5      	cmp	r5, r4
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	f040 8117 	bne.w	8007502 <_dtoa_r+0x6e2>
 80072d4:	f7f9 f80a 	bl	80002ec <__adddf3>
 80072d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072dc:	4604      	mov	r4, r0
 80072de:	460d      	mov	r5, r1
 80072e0:	f7f9 fc4a 	bl	8000b78 <__aeabi_dcmpgt>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f040 80f9 	bne.w	80074dc <_dtoa_r+0x6bc>
 80072ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 fc19 	bl	8000b28 <__aeabi_dcmpeq>
 80072f6:	b118      	cbz	r0, 8007300 <_dtoa_r+0x4e0>
 80072f8:	f018 0f01 	tst.w	r8, #1
 80072fc:	f040 80ee 	bne.w	80074dc <_dtoa_r+0x6bc>
 8007300:	4649      	mov	r1, r9
 8007302:	4658      	mov	r0, fp
 8007304:	f000 fc90 	bl	8007c28 <_Bfree>
 8007308:	2300      	movs	r3, #0
 800730a:	7033      	strb	r3, [r6, #0]
 800730c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800730e:	3701      	adds	r7, #1
 8007310:	601f      	str	r7, [r3, #0]
 8007312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 831d 	beq.w	8007954 <_dtoa_r+0xb34>
 800731a:	601e      	str	r6, [r3, #0]
 800731c:	e31a      	b.n	8007954 <_dtoa_r+0xb34>
 800731e:	07e2      	lsls	r2, r4, #31
 8007320:	d505      	bpl.n	800732e <_dtoa_r+0x50e>
 8007322:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007326:	f7f9 f997 	bl	8000658 <__aeabi_dmul>
 800732a:	3601      	adds	r6, #1
 800732c:	2301      	movs	r3, #1
 800732e:	1064      	asrs	r4, r4, #1
 8007330:	3508      	adds	r5, #8
 8007332:	e73f      	b.n	80071b4 <_dtoa_r+0x394>
 8007334:	2602      	movs	r6, #2
 8007336:	e742      	b.n	80071be <_dtoa_r+0x39e>
 8007338:	9c07      	ldr	r4, [sp, #28]
 800733a:	9704      	str	r7, [sp, #16]
 800733c:	e761      	b.n	8007202 <_dtoa_r+0x3e2>
 800733e:	4b27      	ldr	r3, [pc, #156]	@ (80073dc <_dtoa_r+0x5bc>)
 8007340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800734a:	4454      	add	r4, sl
 800734c:	2900      	cmp	r1, #0
 800734e:	d053      	beq.n	80073f8 <_dtoa_r+0x5d8>
 8007350:	4928      	ldr	r1, [pc, #160]	@ (80073f4 <_dtoa_r+0x5d4>)
 8007352:	2000      	movs	r0, #0
 8007354:	f7f9 faaa 	bl	80008ac <__aeabi_ddiv>
 8007358:	4633      	mov	r3, r6
 800735a:	462a      	mov	r2, r5
 800735c:	f7f8 ffc4 	bl	80002e8 <__aeabi_dsub>
 8007360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007364:	4656      	mov	r6, sl
 8007366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736a:	f7f9 fc25 	bl	8000bb8 <__aeabi_d2iz>
 800736e:	4605      	mov	r5, r0
 8007370:	f7f9 f908 	bl	8000584 <__aeabi_i2d>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800737c:	f7f8 ffb4 	bl	80002e8 <__aeabi_dsub>
 8007380:	3530      	adds	r5, #48	@ 0x30
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800738a:	f806 5b01 	strb.w	r5, [r6], #1
 800738e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007392:	f7f9 fbd3 	bl	8000b3c <__aeabi_dcmplt>
 8007396:	2800      	cmp	r0, #0
 8007398:	d171      	bne.n	800747e <_dtoa_r+0x65e>
 800739a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800739e:	4911      	ldr	r1, [pc, #68]	@ (80073e4 <_dtoa_r+0x5c4>)
 80073a0:	2000      	movs	r0, #0
 80073a2:	f7f8 ffa1 	bl	80002e8 <__aeabi_dsub>
 80073a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073aa:	f7f9 fbc7 	bl	8000b3c <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f040 8095 	bne.w	80074de <_dtoa_r+0x6be>
 80073b4:	42a6      	cmp	r6, r4
 80073b6:	f43f af50 	beq.w	800725a <_dtoa_r+0x43a>
 80073ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073be:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <_dtoa_r+0x5c8>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7f9 f949 	bl	8000658 <__aeabi_dmul>
 80073c6:	4b08      	ldr	r3, [pc, #32]	@ (80073e8 <_dtoa_r+0x5c8>)
 80073c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073cc:	2200      	movs	r2, #0
 80073ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d2:	f7f9 f941 	bl	8000658 <__aeabi_dmul>
 80073d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073da:	e7c4      	b.n	8007366 <_dtoa_r+0x546>
 80073dc:	0800b578 	.word	0x0800b578
 80073e0:	0800b550 	.word	0x0800b550
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	40240000 	.word	0x40240000
 80073ec:	401c0000 	.word	0x401c0000
 80073f0:	40140000 	.word	0x40140000
 80073f4:	3fe00000 	.word	0x3fe00000
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	f7f9 f92c 	bl	8000658 <__aeabi_dmul>
 8007400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007404:	9415      	str	r4, [sp, #84]	@ 0x54
 8007406:	4656      	mov	r6, sl
 8007408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740c:	f7f9 fbd4 	bl	8000bb8 <__aeabi_d2iz>
 8007410:	4605      	mov	r5, r0
 8007412:	f7f9 f8b7 	bl	8000584 <__aeabi_i2d>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741e:	f7f8 ff63 	bl	80002e8 <__aeabi_dsub>
 8007422:	3530      	adds	r5, #48	@ 0x30
 8007424:	f806 5b01 	strb.w	r5, [r6], #1
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	42a6      	cmp	r6, r4
 800742e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	d124      	bne.n	8007482 <_dtoa_r+0x662>
 8007438:	4bac      	ldr	r3, [pc, #688]	@ (80076ec <_dtoa_r+0x8cc>)
 800743a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800743e:	f7f8 ff55 	bl	80002ec <__adddf3>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800744a:	f7f9 fb95 	bl	8000b78 <__aeabi_dcmpgt>
 800744e:	2800      	cmp	r0, #0
 8007450:	d145      	bne.n	80074de <_dtoa_r+0x6be>
 8007452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007456:	49a5      	ldr	r1, [pc, #660]	@ (80076ec <_dtoa_r+0x8cc>)
 8007458:	2000      	movs	r0, #0
 800745a:	f7f8 ff45 	bl	80002e8 <__aeabi_dsub>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007466:	f7f9 fb69 	bl	8000b3c <__aeabi_dcmplt>
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f aef5 	beq.w	800725a <_dtoa_r+0x43a>
 8007470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007472:	1e73      	subs	r3, r6, #1
 8007474:	9315      	str	r3, [sp, #84]	@ 0x54
 8007476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800747a:	2b30      	cmp	r3, #48	@ 0x30
 800747c:	d0f8      	beq.n	8007470 <_dtoa_r+0x650>
 800747e:	9f04      	ldr	r7, [sp, #16]
 8007480:	e73e      	b.n	8007300 <_dtoa_r+0x4e0>
 8007482:	4b9b      	ldr	r3, [pc, #620]	@ (80076f0 <_dtoa_r+0x8d0>)
 8007484:	f7f9 f8e8 	bl	8000658 <__aeabi_dmul>
 8007488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800748c:	e7bc      	b.n	8007408 <_dtoa_r+0x5e8>
 800748e:	d10c      	bne.n	80074aa <_dtoa_r+0x68a>
 8007490:	4b98      	ldr	r3, [pc, #608]	@ (80076f4 <_dtoa_r+0x8d4>)
 8007492:	2200      	movs	r2, #0
 8007494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007498:	f7f9 f8de 	bl	8000658 <__aeabi_dmul>
 800749c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074a0:	f7f9 fb60 	bl	8000b64 <__aeabi_dcmpge>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f000 8157 	beq.w	8007758 <_dtoa_r+0x938>
 80074aa:	2400      	movs	r4, #0
 80074ac:	4625      	mov	r5, r4
 80074ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074b0:	43db      	mvns	r3, r3
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	4656      	mov	r6, sl
 80074b6:	2700      	movs	r7, #0
 80074b8:	4621      	mov	r1, r4
 80074ba:	4658      	mov	r0, fp
 80074bc:	f000 fbb4 	bl	8007c28 <_Bfree>
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	d0dc      	beq.n	800747e <_dtoa_r+0x65e>
 80074c4:	b12f      	cbz	r7, 80074d2 <_dtoa_r+0x6b2>
 80074c6:	42af      	cmp	r7, r5
 80074c8:	d003      	beq.n	80074d2 <_dtoa_r+0x6b2>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4658      	mov	r0, fp
 80074ce:	f000 fbab 	bl	8007c28 <_Bfree>
 80074d2:	4629      	mov	r1, r5
 80074d4:	4658      	mov	r0, fp
 80074d6:	f000 fba7 	bl	8007c28 <_Bfree>
 80074da:	e7d0      	b.n	800747e <_dtoa_r+0x65e>
 80074dc:	9704      	str	r7, [sp, #16]
 80074de:	4633      	mov	r3, r6
 80074e0:	461e      	mov	r6, r3
 80074e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074e6:	2a39      	cmp	r2, #57	@ 0x39
 80074e8:	d107      	bne.n	80074fa <_dtoa_r+0x6da>
 80074ea:	459a      	cmp	sl, r3
 80074ec:	d1f8      	bne.n	80074e0 <_dtoa_r+0x6c0>
 80074ee:	9a04      	ldr	r2, [sp, #16]
 80074f0:	3201      	adds	r2, #1
 80074f2:	9204      	str	r2, [sp, #16]
 80074f4:	2230      	movs	r2, #48	@ 0x30
 80074f6:	f88a 2000 	strb.w	r2, [sl]
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	3201      	adds	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	e7bd      	b.n	800747e <_dtoa_r+0x65e>
 8007502:	4b7b      	ldr	r3, [pc, #492]	@ (80076f0 <_dtoa_r+0x8d0>)
 8007504:	2200      	movs	r2, #0
 8007506:	f7f9 f8a7 	bl	8000658 <__aeabi_dmul>
 800750a:	2200      	movs	r2, #0
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	f7f9 fb09 	bl	8000b28 <__aeabi_dcmpeq>
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f aebb 	beq.w	8007292 <_dtoa_r+0x472>
 800751c:	e6f0      	b.n	8007300 <_dtoa_r+0x4e0>
 800751e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007520:	2a00      	cmp	r2, #0
 8007522:	f000 80db 	beq.w	80076dc <_dtoa_r+0x8bc>
 8007526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007528:	2a01      	cmp	r2, #1
 800752a:	f300 80bf 	bgt.w	80076ac <_dtoa_r+0x88c>
 800752e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007530:	2a00      	cmp	r2, #0
 8007532:	f000 80b7 	beq.w	80076a4 <_dtoa_r+0x884>
 8007536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800753a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800753c:	4646      	mov	r6, r8
 800753e:	9a08      	ldr	r2, [sp, #32]
 8007540:	2101      	movs	r1, #1
 8007542:	441a      	add	r2, r3
 8007544:	4658      	mov	r0, fp
 8007546:	4498      	add	r8, r3
 8007548:	9208      	str	r2, [sp, #32]
 800754a:	f000 fc6b 	bl	8007e24 <__i2b>
 800754e:	4605      	mov	r5, r0
 8007550:	b15e      	cbz	r6, 800756a <_dtoa_r+0x74a>
 8007552:	9b08      	ldr	r3, [sp, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dd08      	ble.n	800756a <_dtoa_r+0x74a>
 8007558:	42b3      	cmp	r3, r6
 800755a:	9a08      	ldr	r2, [sp, #32]
 800755c:	bfa8      	it	ge
 800755e:	4633      	movge	r3, r6
 8007560:	eba8 0803 	sub.w	r8, r8, r3
 8007564:	1af6      	subs	r6, r6, r3
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	9308      	str	r3, [sp, #32]
 800756a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800756c:	b1f3      	cbz	r3, 80075ac <_dtoa_r+0x78c>
 800756e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80b7 	beq.w	80076e4 <_dtoa_r+0x8c4>
 8007576:	b18c      	cbz	r4, 800759c <_dtoa_r+0x77c>
 8007578:	4629      	mov	r1, r5
 800757a:	4622      	mov	r2, r4
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fd11 	bl	8007fa4 <__pow5mult>
 8007582:	464a      	mov	r2, r9
 8007584:	4601      	mov	r1, r0
 8007586:	4605      	mov	r5, r0
 8007588:	4658      	mov	r0, fp
 800758a:	f000 fc61 	bl	8007e50 <__multiply>
 800758e:	4649      	mov	r1, r9
 8007590:	9004      	str	r0, [sp, #16]
 8007592:	4658      	mov	r0, fp
 8007594:	f000 fb48 	bl	8007c28 <_Bfree>
 8007598:	9b04      	ldr	r3, [sp, #16]
 800759a:	4699      	mov	r9, r3
 800759c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800759e:	1b1a      	subs	r2, r3, r4
 80075a0:	d004      	beq.n	80075ac <_dtoa_r+0x78c>
 80075a2:	4649      	mov	r1, r9
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fcfd 	bl	8007fa4 <__pow5mult>
 80075aa:	4681      	mov	r9, r0
 80075ac:	2101      	movs	r1, #1
 80075ae:	4658      	mov	r0, fp
 80075b0:	f000 fc38 	bl	8007e24 <__i2b>
 80075b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b6:	4604      	mov	r4, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 81cf 	beq.w	800795c <_dtoa_r+0xb3c>
 80075be:	461a      	mov	r2, r3
 80075c0:	4601      	mov	r1, r0
 80075c2:	4658      	mov	r0, fp
 80075c4:	f000 fcee 	bl	8007fa4 <__pow5mult>
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	4604      	mov	r4, r0
 80075ce:	f300 8095 	bgt.w	80076fc <_dtoa_r+0x8dc>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 8087 	bne.w	80076e8 <_dtoa_r+0x8c8>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 8089 	bne.w	80076f8 <_dtoa_r+0x8d8>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ec:	0d1b      	lsrs	r3, r3, #20
 80075ee:	051b      	lsls	r3, r3, #20
 80075f0:	b12b      	cbz	r3, 80075fe <_dtoa_r+0x7de>
 80075f2:	9b08      	ldr	r3, [sp, #32]
 80075f4:	3301      	adds	r3, #1
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	f108 0801 	add.w	r8, r8, #1
 80075fc:	2301      	movs	r3, #1
 80075fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 81b0 	beq.w	8007968 <_dtoa_r+0xb48>
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800760e:	6918      	ldr	r0, [r3, #16]
 8007610:	f000 fbbc 	bl	8007d8c <__hi0bits>
 8007614:	f1c0 0020 	rsb	r0, r0, #32
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	4418      	add	r0, r3
 800761c:	f010 001f 	ands.w	r0, r0, #31
 8007620:	d077      	beq.n	8007712 <_dtoa_r+0x8f2>
 8007622:	f1c0 0320 	rsb	r3, r0, #32
 8007626:	2b04      	cmp	r3, #4
 8007628:	dd6b      	ble.n	8007702 <_dtoa_r+0x8e2>
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	f1c0 001c 	rsb	r0, r0, #28
 8007630:	4403      	add	r3, r0
 8007632:	4480      	add	r8, r0
 8007634:	4406      	add	r6, r0
 8007636:	9308      	str	r3, [sp, #32]
 8007638:	f1b8 0f00 	cmp.w	r8, #0
 800763c:	dd05      	ble.n	800764a <_dtoa_r+0x82a>
 800763e:	4649      	mov	r1, r9
 8007640:	4642      	mov	r2, r8
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fd08 	bl	8008058 <__lshift>
 8007648:	4681      	mov	r9, r0
 800764a:	9b08      	ldr	r3, [sp, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dd05      	ble.n	800765c <_dtoa_r+0x83c>
 8007650:	4621      	mov	r1, r4
 8007652:	461a      	mov	r2, r3
 8007654:	4658      	mov	r0, fp
 8007656:	f000 fcff 	bl	8008058 <__lshift>
 800765a:	4604      	mov	r4, r0
 800765c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800765e:	2b00      	cmp	r3, #0
 8007660:	d059      	beq.n	8007716 <_dtoa_r+0x8f6>
 8007662:	4621      	mov	r1, r4
 8007664:	4648      	mov	r0, r9
 8007666:	f000 fd63 	bl	8008130 <__mcmp>
 800766a:	2800      	cmp	r0, #0
 800766c:	da53      	bge.n	8007716 <_dtoa_r+0x8f6>
 800766e:	1e7b      	subs	r3, r7, #1
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	4649      	mov	r1, r9
 8007674:	2300      	movs	r3, #0
 8007676:	220a      	movs	r2, #10
 8007678:	4658      	mov	r0, fp
 800767a:	f000 faf7 	bl	8007c6c <__multadd>
 800767e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007680:	4681      	mov	r9, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8172 	beq.w	800796c <_dtoa_r+0xb4c>
 8007688:	2300      	movs	r3, #0
 800768a:	4629      	mov	r1, r5
 800768c:	220a      	movs	r2, #10
 800768e:	4658      	mov	r0, fp
 8007690:	f000 faec 	bl	8007c6c <__multadd>
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	4605      	mov	r5, r0
 800769a:	dc67      	bgt.n	800776c <_dtoa_r+0x94c>
 800769c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769e:	2b02      	cmp	r3, #2
 80076a0:	dc41      	bgt.n	8007726 <_dtoa_r+0x906>
 80076a2:	e063      	b.n	800776c <_dtoa_r+0x94c>
 80076a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076aa:	e746      	b.n	800753a <_dtoa_r+0x71a>
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	1e5c      	subs	r4, r3, #1
 80076b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	bfbf      	itttt	lt
 80076b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076bc:	1ae3      	sublt	r3, r4, r3
 80076be:	bfb4      	ite	lt
 80076c0:	18d2      	addlt	r2, r2, r3
 80076c2:	1b1c      	subge	r4, r3, r4
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	bfbc      	itt	lt
 80076c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076ca:	2400      	movlt	r4, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfb5      	itete	lt
 80076d0:	eba8 0603 	sublt.w	r6, r8, r3
 80076d4:	9b07      	ldrge	r3, [sp, #28]
 80076d6:	2300      	movlt	r3, #0
 80076d8:	4646      	movge	r6, r8
 80076da:	e730      	b.n	800753e <_dtoa_r+0x71e>
 80076dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076e0:	4646      	mov	r6, r8
 80076e2:	e735      	b.n	8007550 <_dtoa_r+0x730>
 80076e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076e6:	e75c      	b.n	80075a2 <_dtoa_r+0x782>
 80076e8:	2300      	movs	r3, #0
 80076ea:	e788      	b.n	80075fe <_dtoa_r+0x7de>
 80076ec:	3fe00000 	.word	0x3fe00000
 80076f0:	40240000 	.word	0x40240000
 80076f4:	40140000 	.word	0x40140000
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	e780      	b.n	80075fe <_dtoa_r+0x7de>
 80076fc:	2300      	movs	r3, #0
 80076fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007700:	e782      	b.n	8007608 <_dtoa_r+0x7e8>
 8007702:	d099      	beq.n	8007638 <_dtoa_r+0x818>
 8007704:	9a08      	ldr	r2, [sp, #32]
 8007706:	331c      	adds	r3, #28
 8007708:	441a      	add	r2, r3
 800770a:	4498      	add	r8, r3
 800770c:	441e      	add	r6, r3
 800770e:	9208      	str	r2, [sp, #32]
 8007710:	e792      	b.n	8007638 <_dtoa_r+0x818>
 8007712:	4603      	mov	r3, r0
 8007714:	e7f6      	b.n	8007704 <_dtoa_r+0x8e4>
 8007716:	9b07      	ldr	r3, [sp, #28]
 8007718:	9704      	str	r7, [sp, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dc20      	bgt.n	8007760 <_dtoa_r+0x940>
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007722:	2b02      	cmp	r3, #2
 8007724:	dd1e      	ble.n	8007764 <_dtoa_r+0x944>
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f47f aec0 	bne.w	80074ae <_dtoa_r+0x68e>
 800772e:	4621      	mov	r1, r4
 8007730:	2205      	movs	r2, #5
 8007732:	4658      	mov	r0, fp
 8007734:	f000 fa9a 	bl	8007c6c <__multadd>
 8007738:	4601      	mov	r1, r0
 800773a:	4604      	mov	r4, r0
 800773c:	4648      	mov	r0, r9
 800773e:	f000 fcf7 	bl	8008130 <__mcmp>
 8007742:	2800      	cmp	r0, #0
 8007744:	f77f aeb3 	ble.w	80074ae <_dtoa_r+0x68e>
 8007748:	4656      	mov	r6, sl
 800774a:	2331      	movs	r3, #49	@ 0x31
 800774c:	f806 3b01 	strb.w	r3, [r6], #1
 8007750:	9b04      	ldr	r3, [sp, #16]
 8007752:	3301      	adds	r3, #1
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	e6ae      	b.n	80074b6 <_dtoa_r+0x696>
 8007758:	9c07      	ldr	r4, [sp, #28]
 800775a:	9704      	str	r7, [sp, #16]
 800775c:	4625      	mov	r5, r4
 800775e:	e7f3      	b.n	8007748 <_dtoa_r+0x928>
 8007760:	9b07      	ldr	r3, [sp, #28]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8104 	beq.w	8007974 <_dtoa_r+0xb54>
 800776c:	2e00      	cmp	r6, #0
 800776e:	dd05      	ble.n	800777c <_dtoa_r+0x95c>
 8007770:	4629      	mov	r1, r5
 8007772:	4632      	mov	r2, r6
 8007774:	4658      	mov	r0, fp
 8007776:	f000 fc6f 	bl	8008058 <__lshift>
 800777a:	4605      	mov	r5, r0
 800777c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d05a      	beq.n	8007838 <_dtoa_r+0xa18>
 8007782:	6869      	ldr	r1, [r5, #4]
 8007784:	4658      	mov	r0, fp
 8007786:	f000 fa0f 	bl	8007ba8 <_Balloc>
 800778a:	4606      	mov	r6, r0
 800778c:	b928      	cbnz	r0, 800779a <_dtoa_r+0x97a>
 800778e:	4b84      	ldr	r3, [pc, #528]	@ (80079a0 <_dtoa_r+0xb80>)
 8007790:	4602      	mov	r2, r0
 8007792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007796:	f7ff bb5a 	b.w	8006e4e <_dtoa_r+0x2e>
 800779a:	692a      	ldr	r2, [r5, #16]
 800779c:	3202      	adds	r2, #2
 800779e:	0092      	lsls	r2, r2, #2
 80077a0:	f105 010c 	add.w	r1, r5, #12
 80077a4:	300c      	adds	r0, #12
 80077a6:	f001 fff9 	bl	800979c <memcpy>
 80077aa:	2201      	movs	r2, #1
 80077ac:	4631      	mov	r1, r6
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 fc52 	bl	8008058 <__lshift>
 80077b4:	f10a 0301 	add.w	r3, sl, #1
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	9b00      	ldr	r3, [sp, #0]
 80077bc:	4453      	add	r3, sl
 80077be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	462f      	mov	r7, r5
 80077c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ca:	4605      	mov	r5, r0
 80077cc:	9b07      	ldr	r3, [sp, #28]
 80077ce:	4621      	mov	r1, r4
 80077d0:	3b01      	subs	r3, #1
 80077d2:	4648      	mov	r0, r9
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	f7ff fa9b 	bl	8006d10 <quorem>
 80077da:	4639      	mov	r1, r7
 80077dc:	9002      	str	r0, [sp, #8]
 80077de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077e2:	4648      	mov	r0, r9
 80077e4:	f000 fca4 	bl	8008130 <__mcmp>
 80077e8:	462a      	mov	r2, r5
 80077ea:	9008      	str	r0, [sp, #32]
 80077ec:	4621      	mov	r1, r4
 80077ee:	4658      	mov	r0, fp
 80077f0:	f000 fcba 	bl	8008168 <__mdiff>
 80077f4:	68c2      	ldr	r2, [r0, #12]
 80077f6:	4606      	mov	r6, r0
 80077f8:	bb02      	cbnz	r2, 800783c <_dtoa_r+0xa1c>
 80077fa:	4601      	mov	r1, r0
 80077fc:	4648      	mov	r0, r9
 80077fe:	f000 fc97 	bl	8008130 <__mcmp>
 8007802:	4602      	mov	r2, r0
 8007804:	4631      	mov	r1, r6
 8007806:	4658      	mov	r0, fp
 8007808:	920e      	str	r2, [sp, #56]	@ 0x38
 800780a:	f000 fa0d 	bl	8007c28 <_Bfree>
 800780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007812:	9e07      	ldr	r6, [sp, #28]
 8007814:	ea43 0102 	orr.w	r1, r3, r2
 8007818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800781a:	4319      	orrs	r1, r3
 800781c:	d110      	bne.n	8007840 <_dtoa_r+0xa20>
 800781e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007822:	d029      	beq.n	8007878 <_dtoa_r+0xa58>
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	2b00      	cmp	r3, #0
 8007828:	dd02      	ble.n	8007830 <_dtoa_r+0xa10>
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007830:	9b00      	ldr	r3, [sp, #0]
 8007832:	f883 8000 	strb.w	r8, [r3]
 8007836:	e63f      	b.n	80074b8 <_dtoa_r+0x698>
 8007838:	4628      	mov	r0, r5
 800783a:	e7bb      	b.n	80077b4 <_dtoa_r+0x994>
 800783c:	2201      	movs	r2, #1
 800783e:	e7e1      	b.n	8007804 <_dtoa_r+0x9e4>
 8007840:	9b08      	ldr	r3, [sp, #32]
 8007842:	2b00      	cmp	r3, #0
 8007844:	db04      	blt.n	8007850 <_dtoa_r+0xa30>
 8007846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007848:	430b      	orrs	r3, r1
 800784a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800784c:	430b      	orrs	r3, r1
 800784e:	d120      	bne.n	8007892 <_dtoa_r+0xa72>
 8007850:	2a00      	cmp	r2, #0
 8007852:	dded      	ble.n	8007830 <_dtoa_r+0xa10>
 8007854:	4649      	mov	r1, r9
 8007856:	2201      	movs	r2, #1
 8007858:	4658      	mov	r0, fp
 800785a:	f000 fbfd 	bl	8008058 <__lshift>
 800785e:	4621      	mov	r1, r4
 8007860:	4681      	mov	r9, r0
 8007862:	f000 fc65 	bl	8008130 <__mcmp>
 8007866:	2800      	cmp	r0, #0
 8007868:	dc03      	bgt.n	8007872 <_dtoa_r+0xa52>
 800786a:	d1e1      	bne.n	8007830 <_dtoa_r+0xa10>
 800786c:	f018 0f01 	tst.w	r8, #1
 8007870:	d0de      	beq.n	8007830 <_dtoa_r+0xa10>
 8007872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007876:	d1d8      	bne.n	800782a <_dtoa_r+0xa0a>
 8007878:	9a00      	ldr	r2, [sp, #0]
 800787a:	2339      	movs	r3, #57	@ 0x39
 800787c:	7013      	strb	r3, [r2, #0]
 800787e:	4633      	mov	r3, r6
 8007880:	461e      	mov	r6, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007888:	2a39      	cmp	r2, #57	@ 0x39
 800788a:	d052      	beq.n	8007932 <_dtoa_r+0xb12>
 800788c:	3201      	adds	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	e612      	b.n	80074b8 <_dtoa_r+0x698>
 8007892:	2a00      	cmp	r2, #0
 8007894:	dd07      	ble.n	80078a6 <_dtoa_r+0xa86>
 8007896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800789a:	d0ed      	beq.n	8007878 <_dtoa_r+0xa58>
 800789c:	9a00      	ldr	r2, [sp, #0]
 800789e:	f108 0301 	add.w	r3, r8, #1
 80078a2:	7013      	strb	r3, [r2, #0]
 80078a4:	e608      	b.n	80074b8 <_dtoa_r+0x698>
 80078a6:	9b07      	ldr	r3, [sp, #28]
 80078a8:	9a07      	ldr	r2, [sp, #28]
 80078aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d028      	beq.n	8007906 <_dtoa_r+0xae6>
 80078b4:	4649      	mov	r1, r9
 80078b6:	2300      	movs	r3, #0
 80078b8:	220a      	movs	r2, #10
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 f9d6 	bl	8007c6c <__multadd>
 80078c0:	42af      	cmp	r7, r5
 80078c2:	4681      	mov	r9, r0
 80078c4:	f04f 0300 	mov.w	r3, #0
 80078c8:	f04f 020a 	mov.w	r2, #10
 80078cc:	4639      	mov	r1, r7
 80078ce:	4658      	mov	r0, fp
 80078d0:	d107      	bne.n	80078e2 <_dtoa_r+0xac2>
 80078d2:	f000 f9cb 	bl	8007c6c <__multadd>
 80078d6:	4607      	mov	r7, r0
 80078d8:	4605      	mov	r5, r0
 80078da:	9b07      	ldr	r3, [sp, #28]
 80078dc:	3301      	adds	r3, #1
 80078de:	9307      	str	r3, [sp, #28]
 80078e0:	e774      	b.n	80077cc <_dtoa_r+0x9ac>
 80078e2:	f000 f9c3 	bl	8007c6c <__multadd>
 80078e6:	4629      	mov	r1, r5
 80078e8:	4607      	mov	r7, r0
 80078ea:	2300      	movs	r3, #0
 80078ec:	220a      	movs	r2, #10
 80078ee:	4658      	mov	r0, fp
 80078f0:	f000 f9bc 	bl	8007c6c <__multadd>
 80078f4:	4605      	mov	r5, r0
 80078f6:	e7f0      	b.n	80078da <_dtoa_r+0xaba>
 80078f8:	9b00      	ldr	r3, [sp, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfcc      	ite	gt
 80078fe:	461e      	movgt	r6, r3
 8007900:	2601      	movle	r6, #1
 8007902:	4456      	add	r6, sl
 8007904:	2700      	movs	r7, #0
 8007906:	4649      	mov	r1, r9
 8007908:	2201      	movs	r2, #1
 800790a:	4658      	mov	r0, fp
 800790c:	f000 fba4 	bl	8008058 <__lshift>
 8007910:	4621      	mov	r1, r4
 8007912:	4681      	mov	r9, r0
 8007914:	f000 fc0c 	bl	8008130 <__mcmp>
 8007918:	2800      	cmp	r0, #0
 800791a:	dcb0      	bgt.n	800787e <_dtoa_r+0xa5e>
 800791c:	d102      	bne.n	8007924 <_dtoa_r+0xb04>
 800791e:	f018 0f01 	tst.w	r8, #1
 8007922:	d1ac      	bne.n	800787e <_dtoa_r+0xa5e>
 8007924:	4633      	mov	r3, r6
 8007926:	461e      	mov	r6, r3
 8007928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800792c:	2a30      	cmp	r2, #48	@ 0x30
 800792e:	d0fa      	beq.n	8007926 <_dtoa_r+0xb06>
 8007930:	e5c2      	b.n	80074b8 <_dtoa_r+0x698>
 8007932:	459a      	cmp	sl, r3
 8007934:	d1a4      	bne.n	8007880 <_dtoa_r+0xa60>
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	3301      	adds	r3, #1
 800793a:	9304      	str	r3, [sp, #16]
 800793c:	2331      	movs	r3, #49	@ 0x31
 800793e:	f88a 3000 	strb.w	r3, [sl]
 8007942:	e5b9      	b.n	80074b8 <_dtoa_r+0x698>
 8007944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079a4 <_dtoa_r+0xb84>
 800794a:	b11b      	cbz	r3, 8007954 <_dtoa_r+0xb34>
 800794c:	f10a 0308 	add.w	r3, sl, #8
 8007950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	4650      	mov	r0, sl
 8007956:	b019      	add	sp, #100	@ 0x64
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795e:	2b01      	cmp	r3, #1
 8007960:	f77f ae37 	ble.w	80075d2 <_dtoa_r+0x7b2>
 8007964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007966:	930a      	str	r3, [sp, #40]	@ 0x28
 8007968:	2001      	movs	r0, #1
 800796a:	e655      	b.n	8007618 <_dtoa_r+0x7f8>
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f77f aed6 	ble.w	8007720 <_dtoa_r+0x900>
 8007974:	4656      	mov	r6, sl
 8007976:	4621      	mov	r1, r4
 8007978:	4648      	mov	r0, r9
 800797a:	f7ff f9c9 	bl	8006d10 <quorem>
 800797e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007982:	f806 8b01 	strb.w	r8, [r6], #1
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	eba6 020a 	sub.w	r2, r6, sl
 800798c:	4293      	cmp	r3, r2
 800798e:	ddb3      	ble.n	80078f8 <_dtoa_r+0xad8>
 8007990:	4649      	mov	r1, r9
 8007992:	2300      	movs	r3, #0
 8007994:	220a      	movs	r2, #10
 8007996:	4658      	mov	r0, fp
 8007998:	f000 f968 	bl	8007c6c <__multadd>
 800799c:	4681      	mov	r9, r0
 800799e:	e7ea      	b.n	8007976 <_dtoa_r+0xb56>
 80079a0:	0800b4d9 	.word	0x0800b4d9
 80079a4:	0800b45d 	.word	0x0800b45d

080079a8 <_free_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4605      	mov	r5, r0
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d041      	beq.n	8007a34 <_free_r+0x8c>
 80079b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b4:	1f0c      	subs	r4, r1, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bfb8      	it	lt
 80079ba:	18e4      	addlt	r4, r4, r3
 80079bc:	f000 f8e8 	bl	8007b90 <__malloc_lock>
 80079c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a38 <_free_r+0x90>)
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	b933      	cbnz	r3, 80079d4 <_free_r+0x2c>
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	4628      	mov	r0, r5
 80079cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d0:	f000 b8e4 	b.w	8007b9c <__malloc_unlock>
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d908      	bls.n	80079ea <_free_r+0x42>
 80079d8:	6820      	ldr	r0, [r4, #0]
 80079da:	1821      	adds	r1, r4, r0
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf01      	itttt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	1809      	addeq	r1, r1, r0
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	e7ed      	b.n	80079c6 <_free_r+0x1e>
 80079ea:	461a      	mov	r2, r3
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b10b      	cbz	r3, 80079f4 <_free_r+0x4c>
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d9fa      	bls.n	80079ea <_free_r+0x42>
 80079f4:	6811      	ldr	r1, [r2, #0]
 80079f6:	1850      	adds	r0, r2, r1
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d10b      	bne.n	8007a14 <_free_r+0x6c>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	4401      	add	r1, r0
 8007a00:	1850      	adds	r0, r2, r1
 8007a02:	4283      	cmp	r3, r0
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	d1e0      	bne.n	80079ca <_free_r+0x22>
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	4408      	add	r0, r1
 8007a10:	6010      	str	r0, [r2, #0]
 8007a12:	e7da      	b.n	80079ca <_free_r+0x22>
 8007a14:	d902      	bls.n	8007a1c <_free_r+0x74>
 8007a16:	230c      	movs	r3, #12
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	e7d6      	b.n	80079ca <_free_r+0x22>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	1821      	adds	r1, r4, r0
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf04      	itt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	6063      	str	r3, [r4, #4]
 8007a2a:	bf04      	itt	eq
 8007a2c:	1809      	addeq	r1, r1, r0
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	6054      	str	r4, [r2, #4]
 8007a32:	e7ca      	b.n	80079ca <_free_r+0x22>
 8007a34:	bd38      	pop	{r3, r4, r5, pc}
 8007a36:	bf00      	nop
 8007a38:	20000c54 	.word	0x20000c54

08007a3c <malloc>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	@ (8007a48 <malloc+0xc>)
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f000 b825 	b.w	8007a90 <_malloc_r>
 8007a46:	bf00      	nop
 8007a48:	20000190 	.word	0x20000190

08007a4c <sbrk_aligned>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a8c <sbrk_aligned+0x40>)
 8007a50:	460c      	mov	r4, r1
 8007a52:	6831      	ldr	r1, [r6, #0]
 8007a54:	4605      	mov	r5, r0
 8007a56:	b911      	cbnz	r1, 8007a5e <sbrk_aligned+0x12>
 8007a58:	f001 fe90 	bl	800977c <_sbrk_r>
 8007a5c:	6030      	str	r0, [r6, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f001 fe8b 	bl	800977c <_sbrk_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d103      	bne.n	8007a72 <sbrk_aligned+0x26>
 8007a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a6e:	4620      	mov	r0, r4
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
 8007a72:	1cc4      	adds	r4, r0, #3
 8007a74:	f024 0403 	bic.w	r4, r4, #3
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d0f8      	beq.n	8007a6e <sbrk_aligned+0x22>
 8007a7c:	1a21      	subs	r1, r4, r0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f001 fe7c 	bl	800977c <_sbrk_r>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d1f2      	bne.n	8007a6e <sbrk_aligned+0x22>
 8007a88:	e7ef      	b.n	8007a6a <sbrk_aligned+0x1e>
 8007a8a:	bf00      	nop
 8007a8c:	20000c50 	.word	0x20000c50

08007a90 <_malloc_r>:
 8007a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a94:	1ccd      	adds	r5, r1, #3
 8007a96:	f025 0503 	bic.w	r5, r5, #3
 8007a9a:	3508      	adds	r5, #8
 8007a9c:	2d0c      	cmp	r5, #12
 8007a9e:	bf38      	it	cc
 8007aa0:	250c      	movcc	r5, #12
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	db01      	blt.n	8007aac <_malloc_r+0x1c>
 8007aa8:	42a9      	cmp	r1, r5
 8007aaa:	d904      	bls.n	8007ab6 <_malloc_r+0x26>
 8007aac:	230c      	movs	r3, #12
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b8c <_malloc_r+0xfc>
 8007aba:	f000 f869 	bl	8007b90 <__malloc_lock>
 8007abe:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	bb44      	cbnz	r4, 8007b18 <_malloc_r+0x88>
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff ffbf 	bl	8007a4c <sbrk_aligned>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	d158      	bne.n	8007b86 <_malloc_r+0xf6>
 8007ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ad8:	4627      	mov	r7, r4
 8007ada:	2f00      	cmp	r7, #0
 8007adc:	d143      	bne.n	8007b66 <_malloc_r+0xd6>
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	d04b      	beq.n	8007b7a <_malloc_r+0xea>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	eb04 0903 	add.w	r9, r4, r3
 8007aec:	f001 fe46 	bl	800977c <_sbrk_r>
 8007af0:	4581      	cmp	r9, r0
 8007af2:	d142      	bne.n	8007b7a <_malloc_r+0xea>
 8007af4:	6821      	ldr	r1, [r4, #0]
 8007af6:	1a6d      	subs	r5, r5, r1
 8007af8:	4629      	mov	r1, r5
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7ff ffa6 	bl	8007a4c <sbrk_aligned>
 8007b00:	3001      	adds	r0, #1
 8007b02:	d03a      	beq.n	8007b7a <_malloc_r+0xea>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	442b      	add	r3, r5
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	bb62      	cbnz	r2, 8007b6c <_malloc_r+0xdc>
 8007b12:	f8c8 7000 	str.w	r7, [r8]
 8007b16:	e00f      	b.n	8007b38 <_malloc_r+0xa8>
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	1b52      	subs	r2, r2, r5
 8007b1c:	d420      	bmi.n	8007b60 <_malloc_r+0xd0>
 8007b1e:	2a0b      	cmp	r2, #11
 8007b20:	d917      	bls.n	8007b52 <_malloc_r+0xc2>
 8007b22:	1961      	adds	r1, r4, r5
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	6025      	str	r5, [r4, #0]
 8007b28:	bf18      	it	ne
 8007b2a:	6059      	strne	r1, [r3, #4]
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	bf08      	it	eq
 8007b30:	f8c8 1000 	streq.w	r1, [r8]
 8007b34:	5162      	str	r2, [r4, r5]
 8007b36:	604b      	str	r3, [r1, #4]
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f000 f82f 	bl	8007b9c <__malloc_unlock>
 8007b3e:	f104 000b 	add.w	r0, r4, #11
 8007b42:	1d23      	adds	r3, r4, #4
 8007b44:	f020 0007 	bic.w	r0, r0, #7
 8007b48:	1ac2      	subs	r2, r0, r3
 8007b4a:	bf1c      	itt	ne
 8007b4c:	1a1b      	subne	r3, r3, r0
 8007b4e:	50a3      	strne	r3, [r4, r2]
 8007b50:	e7af      	b.n	8007ab2 <_malloc_r+0x22>
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	bf0c      	ite	eq
 8007b58:	f8c8 2000 	streq.w	r2, [r8]
 8007b5c:	605a      	strne	r2, [r3, #4]
 8007b5e:	e7eb      	b.n	8007b38 <_malloc_r+0xa8>
 8007b60:	4623      	mov	r3, r4
 8007b62:	6864      	ldr	r4, [r4, #4]
 8007b64:	e7ae      	b.n	8007ac4 <_malloc_r+0x34>
 8007b66:	463c      	mov	r4, r7
 8007b68:	687f      	ldr	r7, [r7, #4]
 8007b6a:	e7b6      	b.n	8007ada <_malloc_r+0x4a>
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	d1fb      	bne.n	8007b6c <_malloc_r+0xdc>
 8007b74:	2300      	movs	r3, #0
 8007b76:	6053      	str	r3, [r2, #4]
 8007b78:	e7de      	b.n	8007b38 <_malloc_r+0xa8>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f000 f80c 	bl	8007b9c <__malloc_unlock>
 8007b84:	e794      	b.n	8007ab0 <_malloc_r+0x20>
 8007b86:	6005      	str	r5, [r0, #0]
 8007b88:	e7d6      	b.n	8007b38 <_malloc_r+0xa8>
 8007b8a:	bf00      	nop
 8007b8c:	20000c54 	.word	0x20000c54

08007b90 <__malloc_lock>:
 8007b90:	4801      	ldr	r0, [pc, #4]	@ (8007b98 <__malloc_lock+0x8>)
 8007b92:	f7ff b8b4 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8007b96:	bf00      	nop
 8007b98:	20000c4c 	.word	0x20000c4c

08007b9c <__malloc_unlock>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	@ (8007ba4 <__malloc_unlock+0x8>)
 8007b9e:	f7ff b8af 	b.w	8006d00 <__retarget_lock_release_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	20000c4c 	.word	0x20000c4c

08007ba8 <_Balloc>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	69c6      	ldr	r6, [r0, #28]
 8007bac:	4604      	mov	r4, r0
 8007bae:	460d      	mov	r5, r1
 8007bb0:	b976      	cbnz	r6, 8007bd0 <_Balloc+0x28>
 8007bb2:	2010      	movs	r0, #16
 8007bb4:	f7ff ff42 	bl	8007a3c <malloc>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	61e0      	str	r0, [r4, #28]
 8007bbc:	b920      	cbnz	r0, 8007bc8 <_Balloc+0x20>
 8007bbe:	4b18      	ldr	r3, [pc, #96]	@ (8007c20 <_Balloc+0x78>)
 8007bc0:	4818      	ldr	r0, [pc, #96]	@ (8007c24 <_Balloc+0x7c>)
 8007bc2:	216b      	movs	r1, #107	@ 0x6b
 8007bc4:	f001 fe00 	bl	80097c8 <__assert_func>
 8007bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bcc:	6006      	str	r6, [r0, #0]
 8007bce:	60c6      	str	r6, [r0, #12]
 8007bd0:	69e6      	ldr	r6, [r4, #28]
 8007bd2:	68f3      	ldr	r3, [r6, #12]
 8007bd4:	b183      	cbz	r3, 8007bf8 <_Balloc+0x50>
 8007bd6:	69e3      	ldr	r3, [r4, #28]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bde:	b9b8      	cbnz	r0, 8007c10 <_Balloc+0x68>
 8007be0:	2101      	movs	r1, #1
 8007be2:	fa01 f605 	lsl.w	r6, r1, r5
 8007be6:	1d72      	adds	r2, r6, #5
 8007be8:	0092      	lsls	r2, r2, #2
 8007bea:	4620      	mov	r0, r4
 8007bec:	f001 fe0a 	bl	8009804 <_calloc_r>
 8007bf0:	b160      	cbz	r0, 8007c0c <_Balloc+0x64>
 8007bf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bf6:	e00e      	b.n	8007c16 <_Balloc+0x6e>
 8007bf8:	2221      	movs	r2, #33	@ 0x21
 8007bfa:	2104      	movs	r1, #4
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f001 fe01 	bl	8009804 <_calloc_r>
 8007c02:	69e3      	ldr	r3, [r4, #28]
 8007c04:	60f0      	str	r0, [r6, #12]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e4      	bne.n	8007bd6 <_Balloc+0x2e>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	6802      	ldr	r2, [r0, #0]
 8007c12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c16:	2300      	movs	r3, #0
 8007c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c1c:	e7f7      	b.n	8007c0e <_Balloc+0x66>
 8007c1e:	bf00      	nop
 8007c20:	0800b46a 	.word	0x0800b46a
 8007c24:	0800b4ea 	.word	0x0800b4ea

08007c28 <_Bfree>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	69c6      	ldr	r6, [r0, #28]
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b976      	cbnz	r6, 8007c50 <_Bfree+0x28>
 8007c32:	2010      	movs	r0, #16
 8007c34:	f7ff ff02 	bl	8007a3c <malloc>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	61e8      	str	r0, [r5, #28]
 8007c3c:	b920      	cbnz	r0, 8007c48 <_Bfree+0x20>
 8007c3e:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <_Bfree+0x3c>)
 8007c40:	4809      	ldr	r0, [pc, #36]	@ (8007c68 <_Bfree+0x40>)
 8007c42:	218f      	movs	r1, #143	@ 0x8f
 8007c44:	f001 fdc0 	bl	80097c8 <__assert_func>
 8007c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c4c:	6006      	str	r6, [r0, #0]
 8007c4e:	60c6      	str	r6, [r0, #12]
 8007c50:	b13c      	cbz	r4, 8007c62 <_Bfree+0x3a>
 8007c52:	69eb      	ldr	r3, [r5, #28]
 8007c54:	6862      	ldr	r2, [r4, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c5c:	6021      	str	r1, [r4, #0]
 8007c5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	0800b46a 	.word	0x0800b46a
 8007c68:	0800b4ea 	.word	0x0800b4ea

08007c6c <__multadd>:
 8007c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c70:	690d      	ldr	r5, [r1, #16]
 8007c72:	4607      	mov	r7, r0
 8007c74:	460c      	mov	r4, r1
 8007c76:	461e      	mov	r6, r3
 8007c78:	f101 0c14 	add.w	ip, r1, #20
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c82:	b299      	uxth	r1, r3
 8007c84:	fb02 6101 	mla	r1, r2, r1, r6
 8007c88:	0c1e      	lsrs	r6, r3, #16
 8007c8a:	0c0b      	lsrs	r3, r1, #16
 8007c8c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c90:	b289      	uxth	r1, r1
 8007c92:	3001      	adds	r0, #1
 8007c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c98:	4285      	cmp	r5, r0
 8007c9a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ca2:	dcec      	bgt.n	8007c7e <__multadd+0x12>
 8007ca4:	b30e      	cbz	r6, 8007cea <__multadd+0x7e>
 8007ca6:	68a3      	ldr	r3, [r4, #8]
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dc19      	bgt.n	8007ce0 <__multadd+0x74>
 8007cac:	6861      	ldr	r1, [r4, #4]
 8007cae:	4638      	mov	r0, r7
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	f7ff ff79 	bl	8007ba8 <_Balloc>
 8007cb6:	4680      	mov	r8, r0
 8007cb8:	b928      	cbnz	r0, 8007cc6 <__multadd+0x5a>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <__multadd+0x84>)
 8007cbe:	480d      	ldr	r0, [pc, #52]	@ (8007cf4 <__multadd+0x88>)
 8007cc0:	21ba      	movs	r1, #186	@ 0xba
 8007cc2:	f001 fd81 	bl	80097c8 <__assert_func>
 8007cc6:	6922      	ldr	r2, [r4, #16]
 8007cc8:	3202      	adds	r2, #2
 8007cca:	f104 010c 	add.w	r1, r4, #12
 8007cce:	0092      	lsls	r2, r2, #2
 8007cd0:	300c      	adds	r0, #12
 8007cd2:	f001 fd63 	bl	800979c <memcpy>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4638      	mov	r0, r7
 8007cda:	f7ff ffa5 	bl	8007c28 <_Bfree>
 8007cde:	4644      	mov	r4, r8
 8007ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	615e      	str	r6, [r3, #20]
 8007ce8:	6125      	str	r5, [r4, #16]
 8007cea:	4620      	mov	r0, r4
 8007cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf0:	0800b4d9 	.word	0x0800b4d9
 8007cf4:	0800b4ea 	.word	0x0800b4ea

08007cf8 <__s2b>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	4615      	mov	r5, r2
 8007d00:	461f      	mov	r7, r3
 8007d02:	2209      	movs	r2, #9
 8007d04:	3308      	adds	r3, #8
 8007d06:	4606      	mov	r6, r0
 8007d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	2201      	movs	r2, #1
 8007d10:	429a      	cmp	r2, r3
 8007d12:	db09      	blt.n	8007d28 <__s2b+0x30>
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff ff47 	bl	8007ba8 <_Balloc>
 8007d1a:	b940      	cbnz	r0, 8007d2e <__s2b+0x36>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	4b19      	ldr	r3, [pc, #100]	@ (8007d84 <__s2b+0x8c>)
 8007d20:	4819      	ldr	r0, [pc, #100]	@ (8007d88 <__s2b+0x90>)
 8007d22:	21d3      	movs	r1, #211	@ 0xd3
 8007d24:	f001 fd50 	bl	80097c8 <__assert_func>
 8007d28:	0052      	lsls	r2, r2, #1
 8007d2a:	3101      	adds	r1, #1
 8007d2c:	e7f0      	b.n	8007d10 <__s2b+0x18>
 8007d2e:	9b08      	ldr	r3, [sp, #32]
 8007d30:	6143      	str	r3, [r0, #20]
 8007d32:	2d09      	cmp	r5, #9
 8007d34:	f04f 0301 	mov.w	r3, #1
 8007d38:	6103      	str	r3, [r0, #16]
 8007d3a:	dd16      	ble.n	8007d6a <__s2b+0x72>
 8007d3c:	f104 0909 	add.w	r9, r4, #9
 8007d40:	46c8      	mov	r8, r9
 8007d42:	442c      	add	r4, r5
 8007d44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d48:	4601      	mov	r1, r0
 8007d4a:	3b30      	subs	r3, #48	@ 0x30
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7ff ff8c 	bl	8007c6c <__multadd>
 8007d54:	45a0      	cmp	r8, r4
 8007d56:	d1f5      	bne.n	8007d44 <__s2b+0x4c>
 8007d58:	f1a5 0408 	sub.w	r4, r5, #8
 8007d5c:	444c      	add	r4, r9
 8007d5e:	1b2d      	subs	r5, r5, r4
 8007d60:	1963      	adds	r3, r4, r5
 8007d62:	42bb      	cmp	r3, r7
 8007d64:	db04      	blt.n	8007d70 <__s2b+0x78>
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	340a      	adds	r4, #10
 8007d6c:	2509      	movs	r5, #9
 8007d6e:	e7f6      	b.n	8007d5e <__s2b+0x66>
 8007d70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d74:	4601      	mov	r1, r0
 8007d76:	3b30      	subs	r3, #48	@ 0x30
 8007d78:	220a      	movs	r2, #10
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ff76 	bl	8007c6c <__multadd>
 8007d80:	e7ee      	b.n	8007d60 <__s2b+0x68>
 8007d82:	bf00      	nop
 8007d84:	0800b4d9 	.word	0x0800b4d9
 8007d88:	0800b4ea 	.word	0x0800b4ea

08007d8c <__hi0bits>:
 8007d8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d90:	4603      	mov	r3, r0
 8007d92:	bf36      	itet	cc
 8007d94:	0403      	lslcc	r3, r0, #16
 8007d96:	2000      	movcs	r0, #0
 8007d98:	2010      	movcc	r0, #16
 8007d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d9e:	bf3c      	itt	cc
 8007da0:	021b      	lslcc	r3, r3, #8
 8007da2:	3008      	addcc	r0, #8
 8007da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da8:	bf3c      	itt	cc
 8007daa:	011b      	lslcc	r3, r3, #4
 8007dac:	3004      	addcc	r0, #4
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db2:	bf3c      	itt	cc
 8007db4:	009b      	lslcc	r3, r3, #2
 8007db6:	3002      	addcc	r0, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	db05      	blt.n	8007dc8 <__hi0bits+0x3c>
 8007dbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007dc0:	f100 0001 	add.w	r0, r0, #1
 8007dc4:	bf08      	it	eq
 8007dc6:	2020      	moveq	r0, #32
 8007dc8:	4770      	bx	lr

08007dca <__lo0bits>:
 8007dca:	6803      	ldr	r3, [r0, #0]
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f013 0007 	ands.w	r0, r3, #7
 8007dd2:	d00b      	beq.n	8007dec <__lo0bits+0x22>
 8007dd4:	07d9      	lsls	r1, r3, #31
 8007dd6:	d421      	bmi.n	8007e1c <__lo0bits+0x52>
 8007dd8:	0798      	lsls	r0, r3, #30
 8007dda:	bf49      	itett	mi
 8007ddc:	085b      	lsrmi	r3, r3, #1
 8007dde:	089b      	lsrpl	r3, r3, #2
 8007de0:	2001      	movmi	r0, #1
 8007de2:	6013      	strmi	r3, [r2, #0]
 8007de4:	bf5c      	itt	pl
 8007de6:	6013      	strpl	r3, [r2, #0]
 8007de8:	2002      	movpl	r0, #2
 8007dea:	4770      	bx	lr
 8007dec:	b299      	uxth	r1, r3
 8007dee:	b909      	cbnz	r1, 8007df4 <__lo0bits+0x2a>
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	2010      	movs	r0, #16
 8007df4:	b2d9      	uxtb	r1, r3
 8007df6:	b909      	cbnz	r1, 8007dfc <__lo0bits+0x32>
 8007df8:	3008      	adds	r0, #8
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	0719      	lsls	r1, r3, #28
 8007dfe:	bf04      	itt	eq
 8007e00:	091b      	lsreq	r3, r3, #4
 8007e02:	3004      	addeq	r0, #4
 8007e04:	0799      	lsls	r1, r3, #30
 8007e06:	bf04      	itt	eq
 8007e08:	089b      	lsreq	r3, r3, #2
 8007e0a:	3002      	addeq	r0, #2
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	d403      	bmi.n	8007e18 <__lo0bits+0x4e>
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	f100 0001 	add.w	r0, r0, #1
 8007e16:	d003      	beq.n	8007e20 <__lo0bits+0x56>
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	4770      	bx	lr
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4770      	bx	lr
 8007e20:	2020      	movs	r0, #32
 8007e22:	4770      	bx	lr

08007e24 <__i2b>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	2101      	movs	r1, #1
 8007e2a:	f7ff febd 	bl	8007ba8 <_Balloc>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	b928      	cbnz	r0, 8007e3e <__i2b+0x1a>
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <__i2b+0x24>)
 8007e34:	4805      	ldr	r0, [pc, #20]	@ (8007e4c <__i2b+0x28>)
 8007e36:	f240 1145 	movw	r1, #325	@ 0x145
 8007e3a:	f001 fcc5 	bl	80097c8 <__assert_func>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	6144      	str	r4, [r0, #20]
 8007e42:	6103      	str	r3, [r0, #16]
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop
 8007e48:	0800b4d9 	.word	0x0800b4d9
 8007e4c:	0800b4ea 	.word	0x0800b4ea

08007e50 <__multiply>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	4614      	mov	r4, r2
 8007e56:	690a      	ldr	r2, [r1, #16]
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bfa8      	it	ge
 8007e5e:	4623      	movge	r3, r4
 8007e60:	460f      	mov	r7, r1
 8007e62:	bfa4      	itt	ge
 8007e64:	460c      	movge	r4, r1
 8007e66:	461f      	movge	r7, r3
 8007e68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	6861      	ldr	r1, [r4, #4]
 8007e74:	eb0a 0609 	add.w	r6, sl, r9
 8007e78:	42b3      	cmp	r3, r6
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	bfb8      	it	lt
 8007e7e:	3101      	addlt	r1, #1
 8007e80:	f7ff fe92 	bl	8007ba8 <_Balloc>
 8007e84:	b930      	cbnz	r0, 8007e94 <__multiply+0x44>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b44      	ldr	r3, [pc, #272]	@ (8007f9c <__multiply+0x14c>)
 8007e8a:	4845      	ldr	r0, [pc, #276]	@ (8007fa0 <__multiply+0x150>)
 8007e8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e90:	f001 fc9a 	bl	80097c8 <__assert_func>
 8007e94:	f100 0514 	add.w	r5, r0, #20
 8007e98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4543      	cmp	r3, r8
 8007ea2:	d321      	bcc.n	8007ee8 <__multiply+0x98>
 8007ea4:	f107 0114 	add.w	r1, r7, #20
 8007ea8:	f104 0214 	add.w	r2, r4, #20
 8007eac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007eb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	1b13      	subs	r3, r2, r4
 8007eb8:	3b15      	subs	r3, #21
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	f104 0715 	add.w	r7, r4, #21
 8007ec4:	42ba      	cmp	r2, r7
 8007ec6:	bf38      	it	cc
 8007ec8:	2304      	movcc	r3, #4
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	9103      	str	r1, [sp, #12]
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	d80c      	bhi.n	8007eee <__multiply+0x9e>
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	dd03      	ble.n	8007ee0 <__multiply+0x90>
 8007ed8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d05b      	beq.n	8007f98 <__multiply+0x148>
 8007ee0:	6106      	str	r6, [r0, #16]
 8007ee2:	b005      	add	sp, #20
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	f843 2b04 	str.w	r2, [r3], #4
 8007eec:	e7d8      	b.n	8007ea0 <__multiply+0x50>
 8007eee:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ef2:	f1ba 0f00 	cmp.w	sl, #0
 8007ef6:	d024      	beq.n	8007f42 <__multiply+0xf2>
 8007ef8:	f104 0e14 	add.w	lr, r4, #20
 8007efc:	46a9      	mov	r9, r5
 8007efe:	f04f 0c00 	mov.w	ip, #0
 8007f02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f06:	f8d9 3000 	ldr.w	r3, [r9]
 8007f0a:	fa1f fb87 	uxth.w	fp, r7
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f18:	f8d9 7000 	ldr.w	r7, [r9]
 8007f1c:	4463      	add	r3, ip
 8007f1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f22:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f30:	4572      	cmp	r2, lr
 8007f32:	f849 3b04 	str.w	r3, [r9], #4
 8007f36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f3a:	d8e2      	bhi.n	8007f02 <__multiply+0xb2>
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	f845 c003 	str.w	ip, [r5, r3]
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f48:	3104      	adds	r1, #4
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	d021      	beq.n	8007f94 <__multiply+0x144>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	f104 0c14 	add.w	ip, r4, #20
 8007f56:	46ae      	mov	lr, r5
 8007f58:	f04f 0a00 	mov.w	sl, #0
 8007f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f64:	fb09 770b 	mla	r7, r9, fp, r7
 8007f68:	4457      	add	r7, sl
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f70:	f84e 3b04 	str.w	r3, [lr], #4
 8007f74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f7c:	f8be 3000 	ldrh.w	r3, [lr]
 8007f80:	fb09 330a 	mla	r3, r9, sl, r3
 8007f84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f88:	4562      	cmp	r2, ip
 8007f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f8e:	d8e5      	bhi.n	8007f5c <__multiply+0x10c>
 8007f90:	9f01      	ldr	r7, [sp, #4]
 8007f92:	51eb      	str	r3, [r5, r7]
 8007f94:	3504      	adds	r5, #4
 8007f96:	e799      	b.n	8007ecc <__multiply+0x7c>
 8007f98:	3e01      	subs	r6, #1
 8007f9a:	e79b      	b.n	8007ed4 <__multiply+0x84>
 8007f9c:	0800b4d9 	.word	0x0800b4d9
 8007fa0:	0800b4ea 	.word	0x0800b4ea

08007fa4 <__pow5mult>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4615      	mov	r5, r2
 8007faa:	f012 0203 	ands.w	r2, r2, #3
 8007fae:	4607      	mov	r7, r0
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	d007      	beq.n	8007fc4 <__pow5mult+0x20>
 8007fb4:	4c25      	ldr	r4, [pc, #148]	@ (800804c <__pow5mult+0xa8>)
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fbe:	f7ff fe55 	bl	8007c6c <__multadd>
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	10ad      	asrs	r5, r5, #2
 8007fc6:	d03d      	beq.n	8008044 <__pow5mult+0xa0>
 8007fc8:	69fc      	ldr	r4, [r7, #28]
 8007fca:	b97c      	cbnz	r4, 8007fec <__pow5mult+0x48>
 8007fcc:	2010      	movs	r0, #16
 8007fce:	f7ff fd35 	bl	8007a3c <malloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	61f8      	str	r0, [r7, #28]
 8007fd6:	b928      	cbnz	r0, 8007fe4 <__pow5mult+0x40>
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <__pow5mult+0xac>)
 8007fda:	481e      	ldr	r0, [pc, #120]	@ (8008054 <__pow5mult+0xb0>)
 8007fdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fe0:	f001 fbf2 	bl	80097c8 <__assert_func>
 8007fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fe8:	6004      	str	r4, [r0, #0]
 8007fea:	60c4      	str	r4, [r0, #12]
 8007fec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ff4:	b94c      	cbnz	r4, 800800a <__pow5mult+0x66>
 8007ff6:	f240 2171 	movw	r1, #625	@ 0x271
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7ff ff12 	bl	8007e24 <__i2b>
 8008000:	2300      	movs	r3, #0
 8008002:	f8c8 0008 	str.w	r0, [r8, #8]
 8008006:	4604      	mov	r4, r0
 8008008:	6003      	str	r3, [r0, #0]
 800800a:	f04f 0900 	mov.w	r9, #0
 800800e:	07eb      	lsls	r3, r5, #31
 8008010:	d50a      	bpl.n	8008028 <__pow5mult+0x84>
 8008012:	4631      	mov	r1, r6
 8008014:	4622      	mov	r2, r4
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ff1a 	bl	8007e50 <__multiply>
 800801c:	4631      	mov	r1, r6
 800801e:	4680      	mov	r8, r0
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff fe01 	bl	8007c28 <_Bfree>
 8008026:	4646      	mov	r6, r8
 8008028:	106d      	asrs	r5, r5, #1
 800802a:	d00b      	beq.n	8008044 <__pow5mult+0xa0>
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	b938      	cbnz	r0, 8008040 <__pow5mult+0x9c>
 8008030:	4622      	mov	r2, r4
 8008032:	4621      	mov	r1, r4
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff ff0b 	bl	8007e50 <__multiply>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	f8c0 9000 	str.w	r9, [r0]
 8008040:	4604      	mov	r4, r0
 8008042:	e7e4      	b.n	800800e <__pow5mult+0x6a>
 8008044:	4630      	mov	r0, r6
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	bf00      	nop
 800804c:	0800b544 	.word	0x0800b544
 8008050:	0800b46a 	.word	0x0800b46a
 8008054:	0800b4ea 	.word	0x0800b4ea

08008058 <__lshift>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	6849      	ldr	r1, [r1, #4]
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	4607      	mov	r7, r0
 800806a:	4691      	mov	r9, r2
 800806c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008070:	f108 0601 	add.w	r6, r8, #1
 8008074:	42b3      	cmp	r3, r6
 8008076:	db0b      	blt.n	8008090 <__lshift+0x38>
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff fd95 	bl	8007ba8 <_Balloc>
 800807e:	4605      	mov	r5, r0
 8008080:	b948      	cbnz	r0, 8008096 <__lshift+0x3e>
 8008082:	4602      	mov	r2, r0
 8008084:	4b28      	ldr	r3, [pc, #160]	@ (8008128 <__lshift+0xd0>)
 8008086:	4829      	ldr	r0, [pc, #164]	@ (800812c <__lshift+0xd4>)
 8008088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800808c:	f001 fb9c 	bl	80097c8 <__assert_func>
 8008090:	3101      	adds	r1, #1
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	e7ee      	b.n	8008074 <__lshift+0x1c>
 8008096:	2300      	movs	r3, #0
 8008098:	f100 0114 	add.w	r1, r0, #20
 800809c:	f100 0210 	add.w	r2, r0, #16
 80080a0:	4618      	mov	r0, r3
 80080a2:	4553      	cmp	r3, sl
 80080a4:	db33      	blt.n	800810e <__lshift+0xb6>
 80080a6:	6920      	ldr	r0, [r4, #16]
 80080a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080ac:	f104 0314 	add.w	r3, r4, #20
 80080b0:	f019 091f 	ands.w	r9, r9, #31
 80080b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080bc:	d02b      	beq.n	8008116 <__lshift+0xbe>
 80080be:	f1c9 0e20 	rsb	lr, r9, #32
 80080c2:	468a      	mov	sl, r1
 80080c4:	2200      	movs	r2, #0
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	fa00 f009 	lsl.w	r0, r0, r9
 80080cc:	4310      	orrs	r0, r2
 80080ce:	f84a 0b04 	str.w	r0, [sl], #4
 80080d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d6:	459c      	cmp	ip, r3
 80080d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080dc:	d8f3      	bhi.n	80080c6 <__lshift+0x6e>
 80080de:	ebac 0304 	sub.w	r3, ip, r4
 80080e2:	3b15      	subs	r3, #21
 80080e4:	f023 0303 	bic.w	r3, r3, #3
 80080e8:	3304      	adds	r3, #4
 80080ea:	f104 0015 	add.w	r0, r4, #21
 80080ee:	4584      	cmp	ip, r0
 80080f0:	bf38      	it	cc
 80080f2:	2304      	movcc	r3, #4
 80080f4:	50ca      	str	r2, [r1, r3]
 80080f6:	b10a      	cbz	r2, 80080fc <__lshift+0xa4>
 80080f8:	f108 0602 	add.w	r6, r8, #2
 80080fc:	3e01      	subs	r6, #1
 80080fe:	4638      	mov	r0, r7
 8008100:	612e      	str	r6, [r5, #16]
 8008102:	4621      	mov	r1, r4
 8008104:	f7ff fd90 	bl	8007c28 <_Bfree>
 8008108:	4628      	mov	r0, r5
 800810a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008112:	3301      	adds	r3, #1
 8008114:	e7c5      	b.n	80080a2 <__lshift+0x4a>
 8008116:	3904      	subs	r1, #4
 8008118:	f853 2b04 	ldr.w	r2, [r3], #4
 800811c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008120:	459c      	cmp	ip, r3
 8008122:	d8f9      	bhi.n	8008118 <__lshift+0xc0>
 8008124:	e7ea      	b.n	80080fc <__lshift+0xa4>
 8008126:	bf00      	nop
 8008128:	0800b4d9 	.word	0x0800b4d9
 800812c:	0800b4ea 	.word	0x0800b4ea

08008130 <__mcmp>:
 8008130:	690a      	ldr	r2, [r1, #16]
 8008132:	4603      	mov	r3, r0
 8008134:	6900      	ldr	r0, [r0, #16]
 8008136:	1a80      	subs	r0, r0, r2
 8008138:	b530      	push	{r4, r5, lr}
 800813a:	d10e      	bne.n	800815a <__mcmp+0x2a>
 800813c:	3314      	adds	r3, #20
 800813e:	3114      	adds	r1, #20
 8008140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800814c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008150:	4295      	cmp	r5, r2
 8008152:	d003      	beq.n	800815c <__mcmp+0x2c>
 8008154:	d205      	bcs.n	8008162 <__mcmp+0x32>
 8008156:	f04f 30ff 	mov.w	r0, #4294967295
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	42a3      	cmp	r3, r4
 800815e:	d3f3      	bcc.n	8008148 <__mcmp+0x18>
 8008160:	e7fb      	b.n	800815a <__mcmp+0x2a>
 8008162:	2001      	movs	r0, #1
 8008164:	e7f9      	b.n	800815a <__mcmp+0x2a>
	...

08008168 <__mdiff>:
 8008168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	4689      	mov	r9, r1
 800816e:	4606      	mov	r6, r0
 8008170:	4611      	mov	r1, r2
 8008172:	4648      	mov	r0, r9
 8008174:	4614      	mov	r4, r2
 8008176:	f7ff ffdb 	bl	8008130 <__mcmp>
 800817a:	1e05      	subs	r5, r0, #0
 800817c:	d112      	bne.n	80081a4 <__mdiff+0x3c>
 800817e:	4629      	mov	r1, r5
 8008180:	4630      	mov	r0, r6
 8008182:	f7ff fd11 	bl	8007ba8 <_Balloc>
 8008186:	4602      	mov	r2, r0
 8008188:	b928      	cbnz	r0, 8008196 <__mdiff+0x2e>
 800818a:	4b3f      	ldr	r3, [pc, #252]	@ (8008288 <__mdiff+0x120>)
 800818c:	f240 2137 	movw	r1, #567	@ 0x237
 8008190:	483e      	ldr	r0, [pc, #248]	@ (800828c <__mdiff+0x124>)
 8008192:	f001 fb19 	bl	80097c8 <__assert_func>
 8008196:	2301      	movs	r3, #1
 8008198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800819c:	4610      	mov	r0, r2
 800819e:	b003      	add	sp, #12
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	bfbc      	itt	lt
 80081a6:	464b      	movlt	r3, r9
 80081a8:	46a1      	movlt	r9, r4
 80081aa:	4630      	mov	r0, r6
 80081ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081b0:	bfba      	itte	lt
 80081b2:	461c      	movlt	r4, r3
 80081b4:	2501      	movlt	r5, #1
 80081b6:	2500      	movge	r5, #0
 80081b8:	f7ff fcf6 	bl	8007ba8 <_Balloc>
 80081bc:	4602      	mov	r2, r0
 80081be:	b918      	cbnz	r0, 80081c8 <__mdiff+0x60>
 80081c0:	4b31      	ldr	r3, [pc, #196]	@ (8008288 <__mdiff+0x120>)
 80081c2:	f240 2145 	movw	r1, #581	@ 0x245
 80081c6:	e7e3      	b.n	8008190 <__mdiff+0x28>
 80081c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081cc:	6926      	ldr	r6, [r4, #16]
 80081ce:	60c5      	str	r5, [r0, #12]
 80081d0:	f109 0310 	add.w	r3, r9, #16
 80081d4:	f109 0514 	add.w	r5, r9, #20
 80081d8:	f104 0e14 	add.w	lr, r4, #20
 80081dc:	f100 0b14 	add.w	fp, r0, #20
 80081e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	46d9      	mov	r9, fp
 80081ec:	f04f 0c00 	mov.w	ip, #0
 80081f0:	9b01      	ldr	r3, [sp, #4]
 80081f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	fa1f f38a 	uxth.w	r3, sl
 8008200:	4619      	mov	r1, r3
 8008202:	b283      	uxth	r3, r0
 8008204:	1acb      	subs	r3, r1, r3
 8008206:	0c00      	lsrs	r0, r0, #16
 8008208:	4463      	add	r3, ip
 800820a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800820e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008218:	4576      	cmp	r6, lr
 800821a:	f849 3b04 	str.w	r3, [r9], #4
 800821e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008222:	d8e5      	bhi.n	80081f0 <__mdiff+0x88>
 8008224:	1b33      	subs	r3, r6, r4
 8008226:	3b15      	subs	r3, #21
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	3415      	adds	r4, #21
 800822e:	3304      	adds	r3, #4
 8008230:	42a6      	cmp	r6, r4
 8008232:	bf38      	it	cc
 8008234:	2304      	movcc	r3, #4
 8008236:	441d      	add	r5, r3
 8008238:	445b      	add	r3, fp
 800823a:	461e      	mov	r6, r3
 800823c:	462c      	mov	r4, r5
 800823e:	4544      	cmp	r4, r8
 8008240:	d30e      	bcc.n	8008260 <__mdiff+0xf8>
 8008242:	f108 0103 	add.w	r1, r8, #3
 8008246:	1b49      	subs	r1, r1, r5
 8008248:	f021 0103 	bic.w	r1, r1, #3
 800824c:	3d03      	subs	r5, #3
 800824e:	45a8      	cmp	r8, r5
 8008250:	bf38      	it	cc
 8008252:	2100      	movcc	r1, #0
 8008254:	440b      	add	r3, r1
 8008256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800825a:	b191      	cbz	r1, 8008282 <__mdiff+0x11a>
 800825c:	6117      	str	r7, [r2, #16]
 800825e:	e79d      	b.n	800819c <__mdiff+0x34>
 8008260:	f854 1b04 	ldr.w	r1, [r4], #4
 8008264:	46e6      	mov	lr, ip
 8008266:	0c08      	lsrs	r0, r1, #16
 8008268:	fa1c fc81 	uxtah	ip, ip, r1
 800826c:	4471      	add	r1, lr
 800826e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008272:	b289      	uxth	r1, r1
 8008274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008278:	f846 1b04 	str.w	r1, [r6], #4
 800827c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008280:	e7dd      	b.n	800823e <__mdiff+0xd6>
 8008282:	3f01      	subs	r7, #1
 8008284:	e7e7      	b.n	8008256 <__mdiff+0xee>
 8008286:	bf00      	nop
 8008288:	0800b4d9 	.word	0x0800b4d9
 800828c:	0800b4ea 	.word	0x0800b4ea

08008290 <__ulp>:
 8008290:	b082      	sub	sp, #8
 8008292:	ed8d 0b00 	vstr	d0, [sp]
 8008296:	9a01      	ldr	r2, [sp, #4]
 8008298:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <__ulp+0x48>)
 800829a:	4013      	ands	r3, r2
 800829c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dc08      	bgt.n	80082b6 <__ulp+0x26>
 80082a4:	425b      	negs	r3, r3
 80082a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082ae:	da04      	bge.n	80082ba <__ulp+0x2a>
 80082b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082b4:	4113      	asrs	r3, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	e008      	b.n	80082cc <__ulp+0x3c>
 80082ba:	f1a2 0314 	sub.w	r3, r2, #20
 80082be:	2b1e      	cmp	r3, #30
 80082c0:	bfda      	itte	le
 80082c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082c6:	40da      	lsrle	r2, r3
 80082c8:	2201      	movgt	r2, #1
 80082ca:	2300      	movs	r3, #0
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	ec41 0b10 	vmov	d0, r0, r1
 80082d4:	b002      	add	sp, #8
 80082d6:	4770      	bx	lr
 80082d8:	7ff00000 	.word	0x7ff00000

080082dc <__b2d>:
 80082dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e0:	6906      	ldr	r6, [r0, #16]
 80082e2:	f100 0814 	add.w	r8, r0, #20
 80082e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80082ea:	1f37      	subs	r7, r6, #4
 80082ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80082f0:	4610      	mov	r0, r2
 80082f2:	f7ff fd4b 	bl	8007d8c <__hi0bits>
 80082f6:	f1c0 0320 	rsb	r3, r0, #32
 80082fa:	280a      	cmp	r0, #10
 80082fc:	600b      	str	r3, [r1, #0]
 80082fe:	491b      	ldr	r1, [pc, #108]	@ (800836c <__b2d+0x90>)
 8008300:	dc15      	bgt.n	800832e <__b2d+0x52>
 8008302:	f1c0 0c0b 	rsb	ip, r0, #11
 8008306:	fa22 f30c 	lsr.w	r3, r2, ip
 800830a:	45b8      	cmp	r8, r7
 800830c:	ea43 0501 	orr.w	r5, r3, r1
 8008310:	bf34      	ite	cc
 8008312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008316:	2300      	movcs	r3, #0
 8008318:	3015      	adds	r0, #21
 800831a:	fa02 f000 	lsl.w	r0, r2, r0
 800831e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008322:	4303      	orrs	r3, r0
 8008324:	461c      	mov	r4, r3
 8008326:	ec45 4b10 	vmov	d0, r4, r5
 800832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800832e:	45b8      	cmp	r8, r7
 8008330:	bf3a      	itte	cc
 8008332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008336:	f1a6 0708 	subcc.w	r7, r6, #8
 800833a:	2300      	movcs	r3, #0
 800833c:	380b      	subs	r0, #11
 800833e:	d012      	beq.n	8008366 <__b2d+0x8a>
 8008340:	f1c0 0120 	rsb	r1, r0, #32
 8008344:	fa23 f401 	lsr.w	r4, r3, r1
 8008348:	4082      	lsls	r2, r0
 800834a:	4322      	orrs	r2, r4
 800834c:	4547      	cmp	r7, r8
 800834e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008352:	bf8c      	ite	hi
 8008354:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008358:	2200      	movls	r2, #0
 800835a:	4083      	lsls	r3, r0
 800835c:	40ca      	lsrs	r2, r1
 800835e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008362:	4313      	orrs	r3, r2
 8008364:	e7de      	b.n	8008324 <__b2d+0x48>
 8008366:	ea42 0501 	orr.w	r5, r2, r1
 800836a:	e7db      	b.n	8008324 <__b2d+0x48>
 800836c:	3ff00000 	.word	0x3ff00000

08008370 <__d2b>:
 8008370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008374:	460f      	mov	r7, r1
 8008376:	2101      	movs	r1, #1
 8008378:	ec59 8b10 	vmov	r8, r9, d0
 800837c:	4616      	mov	r6, r2
 800837e:	f7ff fc13 	bl	8007ba8 <_Balloc>
 8008382:	4604      	mov	r4, r0
 8008384:	b930      	cbnz	r0, 8008394 <__d2b+0x24>
 8008386:	4602      	mov	r2, r0
 8008388:	4b23      	ldr	r3, [pc, #140]	@ (8008418 <__d2b+0xa8>)
 800838a:	4824      	ldr	r0, [pc, #144]	@ (800841c <__d2b+0xac>)
 800838c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008390:	f001 fa1a 	bl	80097c8 <__assert_func>
 8008394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800839c:	b10d      	cbz	r5, 80083a2 <__d2b+0x32>
 800839e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	f1b8 0300 	subs.w	r3, r8, #0
 80083a8:	d023      	beq.n	80083f2 <__d2b+0x82>
 80083aa:	4668      	mov	r0, sp
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	f7ff fd0c 	bl	8007dca <__lo0bits>
 80083b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083b6:	b1d0      	cbz	r0, 80083ee <__d2b+0x7e>
 80083b8:	f1c0 0320 	rsb	r3, r0, #32
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	430b      	orrs	r3, r1
 80083c2:	40c2      	lsrs	r2, r0
 80083c4:	6163      	str	r3, [r4, #20]
 80083c6:	9201      	str	r2, [sp, #4]
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bf0c      	ite	eq
 80083d0:	2201      	moveq	r2, #1
 80083d2:	2202      	movne	r2, #2
 80083d4:	6122      	str	r2, [r4, #16]
 80083d6:	b1a5      	cbz	r5, 8008402 <__d2b+0x92>
 80083d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083dc:	4405      	add	r5, r0
 80083de:	603d      	str	r5, [r7, #0]
 80083e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083e4:	6030      	str	r0, [r6, #0]
 80083e6:	4620      	mov	r0, r4
 80083e8:	b003      	add	sp, #12
 80083ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ee:	6161      	str	r1, [r4, #20]
 80083f0:	e7ea      	b.n	80083c8 <__d2b+0x58>
 80083f2:	a801      	add	r0, sp, #4
 80083f4:	f7ff fce9 	bl	8007dca <__lo0bits>
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	6163      	str	r3, [r4, #20]
 80083fc:	3020      	adds	r0, #32
 80083fe:	2201      	movs	r2, #1
 8008400:	e7e8      	b.n	80083d4 <__d2b+0x64>
 8008402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008406:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800840a:	6038      	str	r0, [r7, #0]
 800840c:	6918      	ldr	r0, [r3, #16]
 800840e:	f7ff fcbd 	bl	8007d8c <__hi0bits>
 8008412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008416:	e7e5      	b.n	80083e4 <__d2b+0x74>
 8008418:	0800b4d9 	.word	0x0800b4d9
 800841c:	0800b4ea 	.word	0x0800b4ea

08008420 <__ratio>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	b085      	sub	sp, #20
 8008426:	e9cd 1000 	strd	r1, r0, [sp]
 800842a:	a902      	add	r1, sp, #8
 800842c:	f7ff ff56 	bl	80082dc <__b2d>
 8008430:	9800      	ldr	r0, [sp, #0]
 8008432:	a903      	add	r1, sp, #12
 8008434:	ec55 4b10 	vmov	r4, r5, d0
 8008438:	f7ff ff50 	bl	80082dc <__b2d>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	6919      	ldr	r1, [r3, #16]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	1ac9      	subs	r1, r1, r3
 8008446:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	ec5b ab10 	vmov	sl, fp, d0
 8008450:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfce      	itee	gt
 8008458:	462a      	movgt	r2, r5
 800845a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800845e:	465a      	movle	r2, fp
 8008460:	462f      	mov	r7, r5
 8008462:	46d9      	mov	r9, fp
 8008464:	bfcc      	ite	gt
 8008466:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800846a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800846e:	464b      	mov	r3, r9
 8008470:	4652      	mov	r2, sl
 8008472:	4620      	mov	r0, r4
 8008474:	4639      	mov	r1, r7
 8008476:	f7f8 fa19 	bl	80008ac <__aeabi_ddiv>
 800847a:	ec41 0b10 	vmov	d0, r0, r1
 800847e:	b005      	add	sp, #20
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008484 <__copybits>:
 8008484:	3901      	subs	r1, #1
 8008486:	b570      	push	{r4, r5, r6, lr}
 8008488:	1149      	asrs	r1, r1, #5
 800848a:	6914      	ldr	r4, [r2, #16]
 800848c:	3101      	adds	r1, #1
 800848e:	f102 0314 	add.w	r3, r2, #20
 8008492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008496:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800849a:	1f05      	subs	r5, r0, #4
 800849c:	42a3      	cmp	r3, r4
 800849e:	d30c      	bcc.n	80084ba <__copybits+0x36>
 80084a0:	1aa3      	subs	r3, r4, r2
 80084a2:	3b11      	subs	r3, #17
 80084a4:	f023 0303 	bic.w	r3, r3, #3
 80084a8:	3211      	adds	r2, #17
 80084aa:	42a2      	cmp	r2, r4
 80084ac:	bf88      	it	hi
 80084ae:	2300      	movhi	r3, #0
 80084b0:	4418      	add	r0, r3
 80084b2:	2300      	movs	r3, #0
 80084b4:	4288      	cmp	r0, r1
 80084b6:	d305      	bcc.n	80084c4 <__copybits+0x40>
 80084b8:	bd70      	pop	{r4, r5, r6, pc}
 80084ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80084be:	f845 6f04 	str.w	r6, [r5, #4]!
 80084c2:	e7eb      	b.n	800849c <__copybits+0x18>
 80084c4:	f840 3b04 	str.w	r3, [r0], #4
 80084c8:	e7f4      	b.n	80084b4 <__copybits+0x30>

080084ca <__any_on>:
 80084ca:	f100 0214 	add.w	r2, r0, #20
 80084ce:	6900      	ldr	r0, [r0, #16]
 80084d0:	114b      	asrs	r3, r1, #5
 80084d2:	4298      	cmp	r0, r3
 80084d4:	b510      	push	{r4, lr}
 80084d6:	db11      	blt.n	80084fc <__any_on+0x32>
 80084d8:	dd0a      	ble.n	80084f0 <__any_on+0x26>
 80084da:	f011 011f 	ands.w	r1, r1, #31
 80084de:	d007      	beq.n	80084f0 <__any_on+0x26>
 80084e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084e4:	fa24 f001 	lsr.w	r0, r4, r1
 80084e8:	fa00 f101 	lsl.w	r1, r0, r1
 80084ec:	428c      	cmp	r4, r1
 80084ee:	d10b      	bne.n	8008508 <__any_on+0x3e>
 80084f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d803      	bhi.n	8008500 <__any_on+0x36>
 80084f8:	2000      	movs	r0, #0
 80084fa:	bd10      	pop	{r4, pc}
 80084fc:	4603      	mov	r3, r0
 80084fe:	e7f7      	b.n	80084f0 <__any_on+0x26>
 8008500:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008504:	2900      	cmp	r1, #0
 8008506:	d0f5      	beq.n	80084f4 <__any_on+0x2a>
 8008508:	2001      	movs	r0, #1
 800850a:	e7f6      	b.n	80084fa <__any_on+0x30>

0800850c <sulp>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4604      	mov	r4, r0
 8008510:	460d      	mov	r5, r1
 8008512:	ec45 4b10 	vmov	d0, r4, r5
 8008516:	4616      	mov	r6, r2
 8008518:	f7ff feba 	bl	8008290 <__ulp>
 800851c:	ec51 0b10 	vmov	r0, r1, d0
 8008520:	b17e      	cbz	r6, 8008542 <sulp+0x36>
 8008522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008526:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800852a:	2b00      	cmp	r3, #0
 800852c:	dd09      	ble.n	8008542 <sulp+0x36>
 800852e:	051b      	lsls	r3, r3, #20
 8008530:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008534:	2400      	movs	r4, #0
 8008536:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800853a:	4622      	mov	r2, r4
 800853c:	462b      	mov	r3, r5
 800853e:	f7f8 f88b 	bl	8000658 <__aeabi_dmul>
 8008542:	ec41 0b10 	vmov	d0, r0, r1
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <_strtod_l>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b09f      	sub	sp, #124	@ 0x7c
 800854e:	460c      	mov	r4, r1
 8008550:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008552:	2200      	movs	r2, #0
 8008554:	921a      	str	r2, [sp, #104]	@ 0x68
 8008556:	9005      	str	r0, [sp, #20]
 8008558:	f04f 0a00 	mov.w	sl, #0
 800855c:	f04f 0b00 	mov.w	fp, #0
 8008560:	460a      	mov	r2, r1
 8008562:	9219      	str	r2, [sp, #100]	@ 0x64
 8008564:	7811      	ldrb	r1, [r2, #0]
 8008566:	292b      	cmp	r1, #43	@ 0x2b
 8008568:	d04a      	beq.n	8008600 <_strtod_l+0xb8>
 800856a:	d838      	bhi.n	80085de <_strtod_l+0x96>
 800856c:	290d      	cmp	r1, #13
 800856e:	d832      	bhi.n	80085d6 <_strtod_l+0x8e>
 8008570:	2908      	cmp	r1, #8
 8008572:	d832      	bhi.n	80085da <_strtod_l+0x92>
 8008574:	2900      	cmp	r1, #0
 8008576:	d03b      	beq.n	80085f0 <_strtod_l+0xa8>
 8008578:	2200      	movs	r2, #0
 800857a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800857c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800857e:	782a      	ldrb	r2, [r5, #0]
 8008580:	2a30      	cmp	r2, #48	@ 0x30
 8008582:	f040 80b3 	bne.w	80086ec <_strtod_l+0x1a4>
 8008586:	786a      	ldrb	r2, [r5, #1]
 8008588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800858c:	2a58      	cmp	r2, #88	@ 0x58
 800858e:	d16e      	bne.n	800866e <_strtod_l+0x126>
 8008590:	9302      	str	r3, [sp, #8]
 8008592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	ab1a      	add	r3, sp, #104	@ 0x68
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4a8e      	ldr	r2, [pc, #568]	@ (80087d4 <_strtod_l+0x28c>)
 800859c:	9805      	ldr	r0, [sp, #20]
 800859e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80085a0:	a919      	add	r1, sp, #100	@ 0x64
 80085a2:	f001 f9ab 	bl	80098fc <__gethex>
 80085a6:	f010 060f 	ands.w	r6, r0, #15
 80085aa:	4604      	mov	r4, r0
 80085ac:	d005      	beq.n	80085ba <_strtod_l+0x72>
 80085ae:	2e06      	cmp	r6, #6
 80085b0:	d128      	bne.n	8008604 <_strtod_l+0xbc>
 80085b2:	3501      	adds	r5, #1
 80085b4:	2300      	movs	r3, #0
 80085b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80085b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 858e 	bne.w	80090de <_strtod_l+0xb96>
 80085c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085c4:	b1cb      	cbz	r3, 80085fa <_strtod_l+0xb2>
 80085c6:	4652      	mov	r2, sl
 80085c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80085cc:	ec43 2b10 	vmov	d0, r2, r3
 80085d0:	b01f      	add	sp, #124	@ 0x7c
 80085d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d6:	2920      	cmp	r1, #32
 80085d8:	d1ce      	bne.n	8008578 <_strtod_l+0x30>
 80085da:	3201      	adds	r2, #1
 80085dc:	e7c1      	b.n	8008562 <_strtod_l+0x1a>
 80085de:	292d      	cmp	r1, #45	@ 0x2d
 80085e0:	d1ca      	bne.n	8008578 <_strtod_l+0x30>
 80085e2:	2101      	movs	r1, #1
 80085e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80085e6:	1c51      	adds	r1, r2, #1
 80085e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80085ea:	7852      	ldrb	r2, [r2, #1]
 80085ec:	2a00      	cmp	r2, #0
 80085ee:	d1c5      	bne.n	800857c <_strtod_l+0x34>
 80085f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 8570 	bne.w	80090da <_strtod_l+0xb92>
 80085fa:	4652      	mov	r2, sl
 80085fc:	465b      	mov	r3, fp
 80085fe:	e7e5      	b.n	80085cc <_strtod_l+0x84>
 8008600:	2100      	movs	r1, #0
 8008602:	e7ef      	b.n	80085e4 <_strtod_l+0x9c>
 8008604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008606:	b13a      	cbz	r2, 8008618 <_strtod_l+0xd0>
 8008608:	2135      	movs	r1, #53	@ 0x35
 800860a:	a81c      	add	r0, sp, #112	@ 0x70
 800860c:	f7ff ff3a 	bl	8008484 <__copybits>
 8008610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008612:	9805      	ldr	r0, [sp, #20]
 8008614:	f7ff fb08 	bl	8007c28 <_Bfree>
 8008618:	3e01      	subs	r6, #1
 800861a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800861c:	2e04      	cmp	r6, #4
 800861e:	d806      	bhi.n	800862e <_strtod_l+0xe6>
 8008620:	e8df f006 	tbb	[pc, r6]
 8008624:	201d0314 	.word	0x201d0314
 8008628:	14          	.byte	0x14
 8008629:	00          	.byte	0x00
 800862a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800862e:	05e1      	lsls	r1, r4, #23
 8008630:	bf48      	it	mi
 8008632:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800863a:	0d1b      	lsrs	r3, r3, #20
 800863c:	051b      	lsls	r3, r3, #20
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1bb      	bne.n	80085ba <_strtod_l+0x72>
 8008642:	f7fe fb31 	bl	8006ca8 <__errno>
 8008646:	2322      	movs	r3, #34	@ 0x22
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	e7b6      	b.n	80085ba <_strtod_l+0x72>
 800864c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008654:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008658:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800865c:	e7e7      	b.n	800862e <_strtod_l+0xe6>
 800865e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80087dc <_strtod_l+0x294>
 8008662:	e7e4      	b.n	800862e <_strtod_l+0xe6>
 8008664:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008668:	f04f 3aff 	mov.w	sl, #4294967295
 800866c:	e7df      	b.n	800862e <_strtod_l+0xe6>
 800866e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	9219      	str	r2, [sp, #100]	@ 0x64
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	2b30      	cmp	r3, #48	@ 0x30
 8008678:	d0f9      	beq.n	800866e <_strtod_l+0x126>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d09d      	beq.n	80085ba <_strtod_l+0x72>
 800867e:	2301      	movs	r3, #1
 8008680:	9309      	str	r3, [sp, #36]	@ 0x24
 8008682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008684:	930c      	str	r3, [sp, #48]	@ 0x30
 8008686:	2300      	movs	r3, #0
 8008688:	9308      	str	r3, [sp, #32]
 800868a:	930a      	str	r3, [sp, #40]	@ 0x28
 800868c:	461f      	mov	r7, r3
 800868e:	220a      	movs	r2, #10
 8008690:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008692:	7805      	ldrb	r5, [r0, #0]
 8008694:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008698:	b2d9      	uxtb	r1, r3
 800869a:	2909      	cmp	r1, #9
 800869c:	d928      	bls.n	80086f0 <_strtod_l+0x1a8>
 800869e:	494e      	ldr	r1, [pc, #312]	@ (80087d8 <_strtod_l+0x290>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	f001 f837 	bl	8009714 <strncmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d032      	beq.n	8008710 <_strtod_l+0x1c8>
 80086aa:	2000      	movs	r0, #0
 80086ac:	462a      	mov	r2, r5
 80086ae:	4681      	mov	r9, r0
 80086b0:	463d      	mov	r5, r7
 80086b2:	4603      	mov	r3, r0
 80086b4:	2a65      	cmp	r2, #101	@ 0x65
 80086b6:	d001      	beq.n	80086bc <_strtod_l+0x174>
 80086b8:	2a45      	cmp	r2, #69	@ 0x45
 80086ba:	d114      	bne.n	80086e6 <_strtod_l+0x19e>
 80086bc:	b91d      	cbnz	r5, 80086c6 <_strtod_l+0x17e>
 80086be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086c0:	4302      	orrs	r2, r0
 80086c2:	d095      	beq.n	80085f0 <_strtod_l+0xa8>
 80086c4:	2500      	movs	r5, #0
 80086c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80086c8:	1c62      	adds	r2, r4, #1
 80086ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80086cc:	7862      	ldrb	r2, [r4, #1]
 80086ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80086d0:	d077      	beq.n	80087c2 <_strtod_l+0x27a>
 80086d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80086d4:	d07b      	beq.n	80087ce <_strtod_l+0x286>
 80086d6:	f04f 0c00 	mov.w	ip, #0
 80086da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80086de:	2909      	cmp	r1, #9
 80086e0:	f240 8082 	bls.w	80087e8 <_strtod_l+0x2a0>
 80086e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80086e6:	f04f 0800 	mov.w	r8, #0
 80086ea:	e0a2      	b.n	8008832 <_strtod_l+0x2ea>
 80086ec:	2300      	movs	r3, #0
 80086ee:	e7c7      	b.n	8008680 <_strtod_l+0x138>
 80086f0:	2f08      	cmp	r7, #8
 80086f2:	bfd5      	itete	le
 80086f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80086f6:	9908      	ldrgt	r1, [sp, #32]
 80086f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80086fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008700:	f100 0001 	add.w	r0, r0, #1
 8008704:	bfd4      	ite	le
 8008706:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008708:	9308      	strgt	r3, [sp, #32]
 800870a:	3701      	adds	r7, #1
 800870c:	9019      	str	r0, [sp, #100]	@ 0x64
 800870e:	e7bf      	b.n	8008690 <_strtod_l+0x148>
 8008710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	9219      	str	r2, [sp, #100]	@ 0x64
 8008716:	785a      	ldrb	r2, [r3, #1]
 8008718:	b37f      	cbz	r7, 800877a <_strtod_l+0x232>
 800871a:	4681      	mov	r9, r0
 800871c:	463d      	mov	r5, r7
 800871e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008722:	2b09      	cmp	r3, #9
 8008724:	d912      	bls.n	800874c <_strtod_l+0x204>
 8008726:	2301      	movs	r3, #1
 8008728:	e7c4      	b.n	80086b4 <_strtod_l+0x16c>
 800872a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008730:	785a      	ldrb	r2, [r3, #1]
 8008732:	3001      	adds	r0, #1
 8008734:	2a30      	cmp	r2, #48	@ 0x30
 8008736:	d0f8      	beq.n	800872a <_strtod_l+0x1e2>
 8008738:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800873c:	2b08      	cmp	r3, #8
 800873e:	f200 84d3 	bhi.w	80090e8 <_strtod_l+0xba0>
 8008742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008744:	930c      	str	r3, [sp, #48]	@ 0x30
 8008746:	4681      	mov	r9, r0
 8008748:	2000      	movs	r0, #0
 800874a:	4605      	mov	r5, r0
 800874c:	3a30      	subs	r2, #48	@ 0x30
 800874e:	f100 0301 	add.w	r3, r0, #1
 8008752:	d02a      	beq.n	80087aa <_strtod_l+0x262>
 8008754:	4499      	add	r9, r3
 8008756:	eb00 0c05 	add.w	ip, r0, r5
 800875a:	462b      	mov	r3, r5
 800875c:	210a      	movs	r1, #10
 800875e:	4563      	cmp	r3, ip
 8008760:	d10d      	bne.n	800877e <_strtod_l+0x236>
 8008762:	1c69      	adds	r1, r5, #1
 8008764:	4401      	add	r1, r0
 8008766:	4428      	add	r0, r5
 8008768:	2808      	cmp	r0, #8
 800876a:	dc16      	bgt.n	800879a <_strtod_l+0x252>
 800876c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800876e:	230a      	movs	r3, #10
 8008770:	fb03 2300 	mla	r3, r3, r0, r2
 8008774:	930a      	str	r3, [sp, #40]	@ 0x28
 8008776:	2300      	movs	r3, #0
 8008778:	e018      	b.n	80087ac <_strtod_l+0x264>
 800877a:	4638      	mov	r0, r7
 800877c:	e7da      	b.n	8008734 <_strtod_l+0x1ec>
 800877e:	2b08      	cmp	r3, #8
 8008780:	f103 0301 	add.w	r3, r3, #1
 8008784:	dc03      	bgt.n	800878e <_strtod_l+0x246>
 8008786:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008788:	434e      	muls	r6, r1
 800878a:	960a      	str	r6, [sp, #40]	@ 0x28
 800878c:	e7e7      	b.n	800875e <_strtod_l+0x216>
 800878e:	2b10      	cmp	r3, #16
 8008790:	bfde      	ittt	le
 8008792:	9e08      	ldrle	r6, [sp, #32]
 8008794:	434e      	mulle	r6, r1
 8008796:	9608      	strle	r6, [sp, #32]
 8008798:	e7e1      	b.n	800875e <_strtod_l+0x216>
 800879a:	280f      	cmp	r0, #15
 800879c:	dceb      	bgt.n	8008776 <_strtod_l+0x22e>
 800879e:	9808      	ldr	r0, [sp, #32]
 80087a0:	230a      	movs	r3, #10
 80087a2:	fb03 2300 	mla	r3, r3, r0, r2
 80087a6:	9308      	str	r3, [sp, #32]
 80087a8:	e7e5      	b.n	8008776 <_strtod_l+0x22e>
 80087aa:	4629      	mov	r1, r5
 80087ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087ae:	1c50      	adds	r0, r2, #1
 80087b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80087b2:	7852      	ldrb	r2, [r2, #1]
 80087b4:	4618      	mov	r0, r3
 80087b6:	460d      	mov	r5, r1
 80087b8:	e7b1      	b.n	800871e <_strtod_l+0x1d6>
 80087ba:	f04f 0900 	mov.w	r9, #0
 80087be:	2301      	movs	r3, #1
 80087c0:	e77d      	b.n	80086be <_strtod_l+0x176>
 80087c2:	f04f 0c00 	mov.w	ip, #0
 80087c6:	1ca2      	adds	r2, r4, #2
 80087c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80087ca:	78a2      	ldrb	r2, [r4, #2]
 80087cc:	e785      	b.n	80086da <_strtod_l+0x192>
 80087ce:	f04f 0c01 	mov.w	ip, #1
 80087d2:	e7f8      	b.n	80087c6 <_strtod_l+0x27e>
 80087d4:	0800b658 	.word	0x0800b658
 80087d8:	0800b640 	.word	0x0800b640
 80087dc:	7ff00000 	.word	0x7ff00000
 80087e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087e2:	1c51      	adds	r1, r2, #1
 80087e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80087e6:	7852      	ldrb	r2, [r2, #1]
 80087e8:	2a30      	cmp	r2, #48	@ 0x30
 80087ea:	d0f9      	beq.n	80087e0 <_strtod_l+0x298>
 80087ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80087f0:	2908      	cmp	r1, #8
 80087f2:	f63f af78 	bhi.w	80086e6 <_strtod_l+0x19e>
 80087f6:	3a30      	subs	r2, #48	@ 0x30
 80087f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80087fe:	f04f 080a 	mov.w	r8, #10
 8008802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008804:	1c56      	adds	r6, r2, #1
 8008806:	9619      	str	r6, [sp, #100]	@ 0x64
 8008808:	7852      	ldrb	r2, [r2, #1]
 800880a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800880e:	f1be 0f09 	cmp.w	lr, #9
 8008812:	d939      	bls.n	8008888 <_strtod_l+0x340>
 8008814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008816:	1a76      	subs	r6, r6, r1
 8008818:	2e08      	cmp	r6, #8
 800881a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800881e:	dc03      	bgt.n	8008828 <_strtod_l+0x2e0>
 8008820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008822:	4588      	cmp	r8, r1
 8008824:	bfa8      	it	ge
 8008826:	4688      	movge	r8, r1
 8008828:	f1bc 0f00 	cmp.w	ip, #0
 800882c:	d001      	beq.n	8008832 <_strtod_l+0x2ea>
 800882e:	f1c8 0800 	rsb	r8, r8, #0
 8008832:	2d00      	cmp	r5, #0
 8008834:	d14e      	bne.n	80088d4 <_strtod_l+0x38c>
 8008836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008838:	4308      	orrs	r0, r1
 800883a:	f47f aebe 	bne.w	80085ba <_strtod_l+0x72>
 800883e:	2b00      	cmp	r3, #0
 8008840:	f47f aed6 	bne.w	80085f0 <_strtod_l+0xa8>
 8008844:	2a69      	cmp	r2, #105	@ 0x69
 8008846:	d028      	beq.n	800889a <_strtod_l+0x352>
 8008848:	dc25      	bgt.n	8008896 <_strtod_l+0x34e>
 800884a:	2a49      	cmp	r2, #73	@ 0x49
 800884c:	d025      	beq.n	800889a <_strtod_l+0x352>
 800884e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008850:	f47f aece 	bne.w	80085f0 <_strtod_l+0xa8>
 8008854:	499b      	ldr	r1, [pc, #620]	@ (8008ac4 <_strtod_l+0x57c>)
 8008856:	a819      	add	r0, sp, #100	@ 0x64
 8008858:	f001 fa72 	bl	8009d40 <__match>
 800885c:	2800      	cmp	r0, #0
 800885e:	f43f aec7 	beq.w	80085f0 <_strtod_l+0xa8>
 8008862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b28      	cmp	r3, #40	@ 0x28
 8008868:	d12e      	bne.n	80088c8 <_strtod_l+0x380>
 800886a:	4997      	ldr	r1, [pc, #604]	@ (8008ac8 <_strtod_l+0x580>)
 800886c:	aa1c      	add	r2, sp, #112	@ 0x70
 800886e:	a819      	add	r0, sp, #100	@ 0x64
 8008870:	f001 fa7a 	bl	8009d68 <__hexnan>
 8008874:	2805      	cmp	r0, #5
 8008876:	d127      	bne.n	80088c8 <_strtod_l+0x380>
 8008878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800887a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800887e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008882:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008886:	e698      	b.n	80085ba <_strtod_l+0x72>
 8008888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800888a:	fb08 2101 	mla	r1, r8, r1, r2
 800888e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008892:	920e      	str	r2, [sp, #56]	@ 0x38
 8008894:	e7b5      	b.n	8008802 <_strtod_l+0x2ba>
 8008896:	2a6e      	cmp	r2, #110	@ 0x6e
 8008898:	e7da      	b.n	8008850 <_strtod_l+0x308>
 800889a:	498c      	ldr	r1, [pc, #560]	@ (8008acc <_strtod_l+0x584>)
 800889c:	a819      	add	r0, sp, #100	@ 0x64
 800889e:	f001 fa4f 	bl	8009d40 <__match>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f43f aea4 	beq.w	80085f0 <_strtod_l+0xa8>
 80088a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088aa:	4989      	ldr	r1, [pc, #548]	@ (8008ad0 <_strtod_l+0x588>)
 80088ac:	3b01      	subs	r3, #1
 80088ae:	a819      	add	r0, sp, #100	@ 0x64
 80088b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80088b2:	f001 fa45 	bl	8009d40 <__match>
 80088b6:	b910      	cbnz	r0, 80088be <_strtod_l+0x376>
 80088b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088ba:	3301      	adds	r3, #1
 80088bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80088be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008ae0 <_strtod_l+0x598>
 80088c2:	f04f 0a00 	mov.w	sl, #0
 80088c6:	e678      	b.n	80085ba <_strtod_l+0x72>
 80088c8:	4882      	ldr	r0, [pc, #520]	@ (8008ad4 <_strtod_l+0x58c>)
 80088ca:	f000 ff75 	bl	80097b8 <nan>
 80088ce:	ec5b ab10 	vmov	sl, fp, d0
 80088d2:	e672      	b.n	80085ba <_strtod_l+0x72>
 80088d4:	eba8 0309 	sub.w	r3, r8, r9
 80088d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088da:	9309      	str	r3, [sp, #36]	@ 0x24
 80088dc:	2f00      	cmp	r7, #0
 80088de:	bf08      	it	eq
 80088e0:	462f      	moveq	r7, r5
 80088e2:	2d10      	cmp	r5, #16
 80088e4:	462c      	mov	r4, r5
 80088e6:	bfa8      	it	ge
 80088e8:	2410      	movge	r4, #16
 80088ea:	f7f7 fe3b 	bl	8000564 <__aeabi_ui2d>
 80088ee:	2d09      	cmp	r5, #9
 80088f0:	4682      	mov	sl, r0
 80088f2:	468b      	mov	fp, r1
 80088f4:	dc13      	bgt.n	800891e <_strtod_l+0x3d6>
 80088f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f43f ae5e 	beq.w	80085ba <_strtod_l+0x72>
 80088fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008900:	dd78      	ble.n	80089f4 <_strtod_l+0x4ac>
 8008902:	2b16      	cmp	r3, #22
 8008904:	dc5f      	bgt.n	80089c6 <_strtod_l+0x47e>
 8008906:	4974      	ldr	r1, [pc, #464]	@ (8008ad8 <_strtod_l+0x590>)
 8008908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800890c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008910:	4652      	mov	r2, sl
 8008912:	465b      	mov	r3, fp
 8008914:	f7f7 fea0 	bl	8000658 <__aeabi_dmul>
 8008918:	4682      	mov	sl, r0
 800891a:	468b      	mov	fp, r1
 800891c:	e64d      	b.n	80085ba <_strtod_l+0x72>
 800891e:	4b6e      	ldr	r3, [pc, #440]	@ (8008ad8 <_strtod_l+0x590>)
 8008920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008928:	f7f7 fe96 	bl	8000658 <__aeabi_dmul>
 800892c:	4682      	mov	sl, r0
 800892e:	9808      	ldr	r0, [sp, #32]
 8008930:	468b      	mov	fp, r1
 8008932:	f7f7 fe17 	bl	8000564 <__aeabi_ui2d>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4650      	mov	r0, sl
 800893c:	4659      	mov	r1, fp
 800893e:	f7f7 fcd5 	bl	80002ec <__adddf3>
 8008942:	2d0f      	cmp	r5, #15
 8008944:	4682      	mov	sl, r0
 8008946:	468b      	mov	fp, r1
 8008948:	ddd5      	ble.n	80088f6 <_strtod_l+0x3ae>
 800894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894c:	1b2c      	subs	r4, r5, r4
 800894e:	441c      	add	r4, r3
 8008950:	2c00      	cmp	r4, #0
 8008952:	f340 8096 	ble.w	8008a82 <_strtod_l+0x53a>
 8008956:	f014 030f 	ands.w	r3, r4, #15
 800895a:	d00a      	beq.n	8008972 <_strtod_l+0x42a>
 800895c:	495e      	ldr	r1, [pc, #376]	@ (8008ad8 <_strtod_l+0x590>)
 800895e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008962:	4652      	mov	r2, sl
 8008964:	465b      	mov	r3, fp
 8008966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800896a:	f7f7 fe75 	bl	8000658 <__aeabi_dmul>
 800896e:	4682      	mov	sl, r0
 8008970:	468b      	mov	fp, r1
 8008972:	f034 040f 	bics.w	r4, r4, #15
 8008976:	d073      	beq.n	8008a60 <_strtod_l+0x518>
 8008978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800897c:	dd48      	ble.n	8008a10 <_strtod_l+0x4c8>
 800897e:	2400      	movs	r4, #0
 8008980:	46a0      	mov	r8, r4
 8008982:	940a      	str	r4, [sp, #40]	@ 0x28
 8008984:	46a1      	mov	r9, r4
 8008986:	9a05      	ldr	r2, [sp, #20]
 8008988:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008ae0 <_strtod_l+0x598>
 800898c:	2322      	movs	r3, #34	@ 0x22
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	f04f 0a00 	mov.w	sl, #0
 8008994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	f43f ae0f 	beq.w	80085ba <_strtod_l+0x72>
 800899c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800899e:	9805      	ldr	r0, [sp, #20]
 80089a0:	f7ff f942 	bl	8007c28 <_Bfree>
 80089a4:	9805      	ldr	r0, [sp, #20]
 80089a6:	4649      	mov	r1, r9
 80089a8:	f7ff f93e 	bl	8007c28 <_Bfree>
 80089ac:	9805      	ldr	r0, [sp, #20]
 80089ae:	4641      	mov	r1, r8
 80089b0:	f7ff f93a 	bl	8007c28 <_Bfree>
 80089b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089b6:	9805      	ldr	r0, [sp, #20]
 80089b8:	f7ff f936 	bl	8007c28 <_Bfree>
 80089bc:	9805      	ldr	r0, [sp, #20]
 80089be:	4621      	mov	r1, r4
 80089c0:	f7ff f932 	bl	8007c28 <_Bfree>
 80089c4:	e5f9      	b.n	80085ba <_strtod_l+0x72>
 80089c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80089cc:	4293      	cmp	r3, r2
 80089ce:	dbbc      	blt.n	800894a <_strtod_l+0x402>
 80089d0:	4c41      	ldr	r4, [pc, #260]	@ (8008ad8 <_strtod_l+0x590>)
 80089d2:	f1c5 050f 	rsb	r5, r5, #15
 80089d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089da:	4652      	mov	r2, sl
 80089dc:	465b      	mov	r3, fp
 80089de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e2:	f7f7 fe39 	bl	8000658 <__aeabi_dmul>
 80089e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e8:	1b5d      	subs	r5, r3, r5
 80089ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80089ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089f2:	e78f      	b.n	8008914 <_strtod_l+0x3cc>
 80089f4:	3316      	adds	r3, #22
 80089f6:	dba8      	blt.n	800894a <_strtod_l+0x402>
 80089f8:	4b37      	ldr	r3, [pc, #220]	@ (8008ad8 <_strtod_l+0x590>)
 80089fa:	eba9 0808 	sub.w	r8, r9, r8
 80089fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a06:	4650      	mov	r0, sl
 8008a08:	4659      	mov	r1, fp
 8008a0a:	f7f7 ff4f 	bl	80008ac <__aeabi_ddiv>
 8008a0e:	e783      	b.n	8008918 <_strtod_l+0x3d0>
 8008a10:	4b32      	ldr	r3, [pc, #200]	@ (8008adc <_strtod_l+0x594>)
 8008a12:	9308      	str	r3, [sp, #32]
 8008a14:	2300      	movs	r3, #0
 8008a16:	1124      	asrs	r4, r4, #4
 8008a18:	4650      	mov	r0, sl
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	461e      	mov	r6, r3
 8008a1e:	2c01      	cmp	r4, #1
 8008a20:	dc21      	bgt.n	8008a66 <_strtod_l+0x51e>
 8008a22:	b10b      	cbz	r3, 8008a28 <_strtod_l+0x4e0>
 8008a24:	4682      	mov	sl, r0
 8008a26:	468b      	mov	fp, r1
 8008a28:	492c      	ldr	r1, [pc, #176]	@ (8008adc <_strtod_l+0x594>)
 8008a2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a32:	4652      	mov	r2, sl
 8008a34:	465b      	mov	r3, fp
 8008a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3a:	f7f7 fe0d 	bl	8000658 <__aeabi_dmul>
 8008a3e:	4b28      	ldr	r3, [pc, #160]	@ (8008ae0 <_strtod_l+0x598>)
 8008a40:	460a      	mov	r2, r1
 8008a42:	400b      	ands	r3, r1
 8008a44:	4927      	ldr	r1, [pc, #156]	@ (8008ae4 <_strtod_l+0x59c>)
 8008a46:	428b      	cmp	r3, r1
 8008a48:	4682      	mov	sl, r0
 8008a4a:	d898      	bhi.n	800897e <_strtod_l+0x436>
 8008a4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a50:	428b      	cmp	r3, r1
 8008a52:	bf86      	itte	hi
 8008a54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008ae8 <_strtod_l+0x5a0>
 8008a58:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a60:	2300      	movs	r3, #0
 8008a62:	9308      	str	r3, [sp, #32]
 8008a64:	e07a      	b.n	8008b5c <_strtod_l+0x614>
 8008a66:	07e2      	lsls	r2, r4, #31
 8008a68:	d505      	bpl.n	8008a76 <_strtod_l+0x52e>
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fdf2 	bl	8000658 <__aeabi_dmul>
 8008a74:	2301      	movs	r3, #1
 8008a76:	9a08      	ldr	r2, [sp, #32]
 8008a78:	3208      	adds	r2, #8
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	1064      	asrs	r4, r4, #1
 8008a7e:	9208      	str	r2, [sp, #32]
 8008a80:	e7cd      	b.n	8008a1e <_strtod_l+0x4d6>
 8008a82:	d0ed      	beq.n	8008a60 <_strtod_l+0x518>
 8008a84:	4264      	negs	r4, r4
 8008a86:	f014 020f 	ands.w	r2, r4, #15
 8008a8a:	d00a      	beq.n	8008aa2 <_strtod_l+0x55a>
 8008a8c:	4b12      	ldr	r3, [pc, #72]	@ (8008ad8 <_strtod_l+0x590>)
 8008a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a92:	4650      	mov	r0, sl
 8008a94:	4659      	mov	r1, fp
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f7f7 ff07 	bl	80008ac <__aeabi_ddiv>
 8008a9e:	4682      	mov	sl, r0
 8008aa0:	468b      	mov	fp, r1
 8008aa2:	1124      	asrs	r4, r4, #4
 8008aa4:	d0dc      	beq.n	8008a60 <_strtod_l+0x518>
 8008aa6:	2c1f      	cmp	r4, #31
 8008aa8:	dd20      	ble.n	8008aec <_strtod_l+0x5a4>
 8008aaa:	2400      	movs	r4, #0
 8008aac:	46a0      	mov	r8, r4
 8008aae:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ab0:	46a1      	mov	r9, r4
 8008ab2:	9a05      	ldr	r2, [sp, #20]
 8008ab4:	2322      	movs	r3, #34	@ 0x22
 8008ab6:	f04f 0a00 	mov.w	sl, #0
 8008aba:	f04f 0b00 	mov.w	fp, #0
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	e768      	b.n	8008994 <_strtod_l+0x44c>
 8008ac2:	bf00      	nop
 8008ac4:	0800b431 	.word	0x0800b431
 8008ac8:	0800b644 	.word	0x0800b644
 8008acc:	0800b429 	.word	0x0800b429
 8008ad0:	0800b460 	.word	0x0800b460
 8008ad4:	0800b7ed 	.word	0x0800b7ed
 8008ad8:	0800b578 	.word	0x0800b578
 8008adc:	0800b550 	.word	0x0800b550
 8008ae0:	7ff00000 	.word	0x7ff00000
 8008ae4:	7ca00000 	.word	0x7ca00000
 8008ae8:	7fefffff 	.word	0x7fefffff
 8008aec:	f014 0310 	ands.w	r3, r4, #16
 8008af0:	bf18      	it	ne
 8008af2:	236a      	movne	r3, #106	@ 0x6a
 8008af4:	4ea9      	ldr	r6, [pc, #676]	@ (8008d9c <_strtod_l+0x854>)
 8008af6:	9308      	str	r3, [sp, #32]
 8008af8:	4650      	mov	r0, sl
 8008afa:	4659      	mov	r1, fp
 8008afc:	2300      	movs	r3, #0
 8008afe:	07e2      	lsls	r2, r4, #31
 8008b00:	d504      	bpl.n	8008b0c <_strtod_l+0x5c4>
 8008b02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b06:	f7f7 fda7 	bl	8000658 <__aeabi_dmul>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	1064      	asrs	r4, r4, #1
 8008b0e:	f106 0608 	add.w	r6, r6, #8
 8008b12:	d1f4      	bne.n	8008afe <_strtod_l+0x5b6>
 8008b14:	b10b      	cbz	r3, 8008b1a <_strtod_l+0x5d2>
 8008b16:	4682      	mov	sl, r0
 8008b18:	468b      	mov	fp, r1
 8008b1a:	9b08      	ldr	r3, [sp, #32]
 8008b1c:	b1b3      	cbz	r3, 8008b4c <_strtod_l+0x604>
 8008b1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	4659      	mov	r1, fp
 8008b2a:	dd0f      	ble.n	8008b4c <_strtod_l+0x604>
 8008b2c:	2b1f      	cmp	r3, #31
 8008b2e:	dd55      	ble.n	8008bdc <_strtod_l+0x694>
 8008b30:	2b34      	cmp	r3, #52	@ 0x34
 8008b32:	bfde      	ittt	le
 8008b34:	f04f 33ff 	movle.w	r3, #4294967295
 8008b38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b3c:	4093      	lslle	r3, r2
 8008b3e:	f04f 0a00 	mov.w	sl, #0
 8008b42:	bfcc      	ite	gt
 8008b44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b48:	ea03 0b01 	andle.w	fp, r3, r1
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4650      	mov	r0, sl
 8008b52:	4659      	mov	r1, fp
 8008b54:	f7f7 ffe8 	bl	8000b28 <__aeabi_dcmpeq>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d1a6      	bne.n	8008aaa <_strtod_l+0x562>
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b62:	9805      	ldr	r0, [sp, #20]
 8008b64:	462b      	mov	r3, r5
 8008b66:	463a      	mov	r2, r7
 8008b68:	f7ff f8c6 	bl	8007cf8 <__s2b>
 8008b6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f43f af05 	beq.w	800897e <_strtod_l+0x436>
 8008b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	eba9 0308 	sub.w	r3, r9, r8
 8008b7c:	bfa8      	it	ge
 8008b7e:	2300      	movge	r3, #0
 8008b80:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b82:	2400      	movs	r4, #0
 8008b84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b88:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b8a:	46a0      	mov	r8, r4
 8008b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b8e:	9805      	ldr	r0, [sp, #20]
 8008b90:	6859      	ldr	r1, [r3, #4]
 8008b92:	f7ff f809 	bl	8007ba8 <_Balloc>
 8008b96:	4681      	mov	r9, r0
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f43f aef4 	beq.w	8008986 <_strtod_l+0x43e>
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba0:	691a      	ldr	r2, [r3, #16]
 8008ba2:	3202      	adds	r2, #2
 8008ba4:	f103 010c 	add.w	r1, r3, #12
 8008ba8:	0092      	lsls	r2, r2, #2
 8008baa:	300c      	adds	r0, #12
 8008bac:	f000 fdf6 	bl	800979c <memcpy>
 8008bb0:	ec4b ab10 	vmov	d0, sl, fp
 8008bb4:	9805      	ldr	r0, [sp, #20]
 8008bb6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bb8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008bba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008bbe:	f7ff fbd7 	bl	8008370 <__d2b>
 8008bc2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f43f aede 	beq.w	8008986 <_strtod_l+0x43e>
 8008bca:	9805      	ldr	r0, [sp, #20]
 8008bcc:	2101      	movs	r1, #1
 8008bce:	f7ff f929 	bl	8007e24 <__i2b>
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	b948      	cbnz	r0, 8008bea <_strtod_l+0x6a2>
 8008bd6:	f04f 0800 	mov.w	r8, #0
 8008bda:	e6d4      	b.n	8008986 <_strtod_l+0x43e>
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	ea03 0a0a 	and.w	sl, r3, sl
 8008be8:	e7b0      	b.n	8008b4c <_strtod_l+0x604>
 8008bea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008bec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	bfab      	itete	ge
 8008bf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008bf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008bf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008bf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008bfa:	bfac      	ite	ge
 8008bfc:	18ef      	addge	r7, r5, r3
 8008bfe:	1b5e      	sublt	r6, r3, r5
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	1aed      	subs	r5, r5, r3
 8008c04:	4415      	add	r5, r2
 8008c06:	4b66      	ldr	r3, [pc, #408]	@ (8008da0 <_strtod_l+0x858>)
 8008c08:	3d01      	subs	r5, #1
 8008c0a:	429d      	cmp	r5, r3
 8008c0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c10:	da50      	bge.n	8008cb4 <_strtod_l+0x76c>
 8008c12:	1b5b      	subs	r3, r3, r5
 8008c14:	2b1f      	cmp	r3, #31
 8008c16:	eba2 0203 	sub.w	r2, r2, r3
 8008c1a:	f04f 0101 	mov.w	r1, #1
 8008c1e:	dc3d      	bgt.n	8008c9c <_strtod_l+0x754>
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c26:	2300      	movs	r3, #0
 8008c28:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c2a:	18bd      	adds	r5, r7, r2
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	42af      	cmp	r7, r5
 8008c30:	4416      	add	r6, r2
 8008c32:	441e      	add	r6, r3
 8008c34:	463b      	mov	r3, r7
 8008c36:	bfa8      	it	ge
 8008c38:	462b      	movge	r3, r5
 8008c3a:	42b3      	cmp	r3, r6
 8008c3c:	bfa8      	it	ge
 8008c3e:	4633      	movge	r3, r6
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfc2      	ittt	gt
 8008c44:	1aed      	subgt	r5, r5, r3
 8008c46:	1af6      	subgt	r6, r6, r3
 8008c48:	1aff      	subgt	r7, r7, r3
 8008c4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dd16      	ble.n	8008c7e <_strtod_l+0x736>
 8008c50:	4641      	mov	r1, r8
 8008c52:	9805      	ldr	r0, [sp, #20]
 8008c54:	461a      	mov	r2, r3
 8008c56:	f7ff f9a5 	bl	8007fa4 <__pow5mult>
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d0ba      	beq.n	8008bd6 <_strtod_l+0x68e>
 8008c60:	4601      	mov	r1, r0
 8008c62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c64:	9805      	ldr	r0, [sp, #20]
 8008c66:	f7ff f8f3 	bl	8007e50 <__multiply>
 8008c6a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f43f ae8a 	beq.w	8008986 <_strtod_l+0x43e>
 8008c72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c74:	9805      	ldr	r0, [sp, #20]
 8008c76:	f7fe ffd7 	bl	8007c28 <_Bfree>
 8008c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	dc1d      	bgt.n	8008cbe <_strtod_l+0x776>
 8008c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dd23      	ble.n	8008cd0 <_strtod_l+0x788>
 8008c88:	4649      	mov	r1, r9
 8008c8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c8c:	9805      	ldr	r0, [sp, #20]
 8008c8e:	f7ff f989 	bl	8007fa4 <__pow5mult>
 8008c92:	4681      	mov	r9, r0
 8008c94:	b9e0      	cbnz	r0, 8008cd0 <_strtod_l+0x788>
 8008c96:	f04f 0900 	mov.w	r9, #0
 8008c9a:	e674      	b.n	8008986 <_strtod_l+0x43e>
 8008c9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ca0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008ca4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008ca8:	35e2      	adds	r5, #226	@ 0xe2
 8008caa:	fa01 f305 	lsl.w	r3, r1, r5
 8008cae:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008cb2:	e7ba      	b.n	8008c2a <_strtod_l+0x6e2>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cb8:	2301      	movs	r3, #1
 8008cba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cbc:	e7b5      	b.n	8008c2a <_strtod_l+0x6e2>
 8008cbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cc0:	9805      	ldr	r0, [sp, #20]
 8008cc2:	462a      	mov	r2, r5
 8008cc4:	f7ff f9c8 	bl	8008058 <__lshift>
 8008cc8:	901a      	str	r0, [sp, #104]	@ 0x68
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d1d9      	bne.n	8008c82 <_strtod_l+0x73a>
 8008cce:	e65a      	b.n	8008986 <_strtod_l+0x43e>
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	dd07      	ble.n	8008ce4 <_strtod_l+0x79c>
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	9805      	ldr	r0, [sp, #20]
 8008cd8:	4632      	mov	r2, r6
 8008cda:	f7ff f9bd 	bl	8008058 <__lshift>
 8008cde:	4681      	mov	r9, r0
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d0d8      	beq.n	8008c96 <_strtod_l+0x74e>
 8008ce4:	2f00      	cmp	r7, #0
 8008ce6:	dd08      	ble.n	8008cfa <_strtod_l+0x7b2>
 8008ce8:	4641      	mov	r1, r8
 8008cea:	9805      	ldr	r0, [sp, #20]
 8008cec:	463a      	mov	r2, r7
 8008cee:	f7ff f9b3 	bl	8008058 <__lshift>
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f43f ae46 	beq.w	8008986 <_strtod_l+0x43e>
 8008cfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cfc:	9805      	ldr	r0, [sp, #20]
 8008cfe:	464a      	mov	r2, r9
 8008d00:	f7ff fa32 	bl	8008168 <__mdiff>
 8008d04:	4604      	mov	r4, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f43f ae3d 	beq.w	8008986 <_strtod_l+0x43e>
 8008d0c:	68c3      	ldr	r3, [r0, #12]
 8008d0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d10:	2300      	movs	r3, #0
 8008d12:	60c3      	str	r3, [r0, #12]
 8008d14:	4641      	mov	r1, r8
 8008d16:	f7ff fa0b 	bl	8008130 <__mcmp>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	da46      	bge.n	8008dac <_strtod_l+0x864>
 8008d1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d20:	ea53 030a 	orrs.w	r3, r3, sl
 8008d24:	d16c      	bne.n	8008e00 <_strtod_l+0x8b8>
 8008d26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d168      	bne.n	8008e00 <_strtod_l+0x8b8>
 8008d2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d32:	0d1b      	lsrs	r3, r3, #20
 8008d34:	051b      	lsls	r3, r3, #20
 8008d36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d3a:	d961      	bls.n	8008e00 <_strtod_l+0x8b8>
 8008d3c:	6963      	ldr	r3, [r4, #20]
 8008d3e:	b913      	cbnz	r3, 8008d46 <_strtod_l+0x7fe>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	dd5c      	ble.n	8008e00 <_strtod_l+0x8b8>
 8008d46:	4621      	mov	r1, r4
 8008d48:	2201      	movs	r2, #1
 8008d4a:	9805      	ldr	r0, [sp, #20]
 8008d4c:	f7ff f984 	bl	8008058 <__lshift>
 8008d50:	4641      	mov	r1, r8
 8008d52:	4604      	mov	r4, r0
 8008d54:	f7ff f9ec 	bl	8008130 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dd51      	ble.n	8008e00 <_strtod_l+0x8b8>
 8008d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d60:	9a08      	ldr	r2, [sp, #32]
 8008d62:	0d1b      	lsrs	r3, r3, #20
 8008d64:	051b      	lsls	r3, r3, #20
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	d06b      	beq.n	8008e42 <_strtod_l+0x8fa>
 8008d6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d6e:	d868      	bhi.n	8008e42 <_strtod_l+0x8fa>
 8008d70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d74:	f67f ae9d 	bls.w	8008ab2 <_strtod_l+0x56a>
 8008d78:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <_strtod_l+0x85c>)
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f7f7 fc6a 	bl	8000658 <__aeabi_dmul>
 8008d84:	4b08      	ldr	r3, [pc, #32]	@ (8008da8 <_strtod_l+0x860>)
 8008d86:	400b      	ands	r3, r1
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f47f ae05 	bne.w	800899c <_strtod_l+0x454>
 8008d92:	9a05      	ldr	r2, [sp, #20]
 8008d94:	2322      	movs	r3, #34	@ 0x22
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e600      	b.n	800899c <_strtod_l+0x454>
 8008d9a:	bf00      	nop
 8008d9c:	0800b670 	.word	0x0800b670
 8008da0:	fffffc02 	.word	0xfffffc02
 8008da4:	39500000 	.word	0x39500000
 8008da8:	7ff00000 	.word	0x7ff00000
 8008dac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008db0:	d165      	bne.n	8008e7e <_strtod_l+0x936>
 8008db2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008db8:	b35a      	cbz	r2, 8008e12 <_strtod_l+0x8ca>
 8008dba:	4a9f      	ldr	r2, [pc, #636]	@ (8009038 <_strtod_l+0xaf0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d12b      	bne.n	8008e18 <_strtod_l+0x8d0>
 8008dc0:	9b08      	ldr	r3, [sp, #32]
 8008dc2:	4651      	mov	r1, sl
 8008dc4:	b303      	cbz	r3, 8008e08 <_strtod_l+0x8c0>
 8008dc6:	4b9d      	ldr	r3, [pc, #628]	@ (800903c <_strtod_l+0xaf4>)
 8008dc8:	465a      	mov	r2, fp
 8008dca:	4013      	ands	r3, r2
 8008dcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	d81b      	bhi.n	8008e0e <_strtod_l+0x8c6>
 8008dd6:	0d1b      	lsrs	r3, r3, #20
 8008dd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8008de0:	4299      	cmp	r1, r3
 8008de2:	d119      	bne.n	8008e18 <_strtod_l+0x8d0>
 8008de4:	4b96      	ldr	r3, [pc, #600]	@ (8009040 <_strtod_l+0xaf8>)
 8008de6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d102      	bne.n	8008df2 <_strtod_l+0x8aa>
 8008dec:	3101      	adds	r1, #1
 8008dee:	f43f adca 	beq.w	8008986 <_strtod_l+0x43e>
 8008df2:	4b92      	ldr	r3, [pc, #584]	@ (800903c <_strtod_l+0xaf4>)
 8008df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008df6:	401a      	ands	r2, r3
 8008df8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008dfc:	f04f 0a00 	mov.w	sl, #0
 8008e00:	9b08      	ldr	r3, [sp, #32]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1b8      	bne.n	8008d78 <_strtod_l+0x830>
 8008e06:	e5c9      	b.n	800899c <_strtod_l+0x454>
 8008e08:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0c:	e7e8      	b.n	8008de0 <_strtod_l+0x898>
 8008e0e:	4613      	mov	r3, r2
 8008e10:	e7e6      	b.n	8008de0 <_strtod_l+0x898>
 8008e12:	ea53 030a 	orrs.w	r3, r3, sl
 8008e16:	d0a1      	beq.n	8008d5c <_strtod_l+0x814>
 8008e18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e1a:	b1db      	cbz	r3, 8008e54 <_strtod_l+0x90c>
 8008e1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e1e:	4213      	tst	r3, r2
 8008e20:	d0ee      	beq.n	8008e00 <_strtod_l+0x8b8>
 8008e22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e24:	9a08      	ldr	r2, [sp, #32]
 8008e26:	4650      	mov	r0, sl
 8008e28:	4659      	mov	r1, fp
 8008e2a:	b1bb      	cbz	r3, 8008e5c <_strtod_l+0x914>
 8008e2c:	f7ff fb6e 	bl	800850c <sulp>
 8008e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e34:	ec53 2b10 	vmov	r2, r3, d0
 8008e38:	f7f7 fa58 	bl	80002ec <__adddf3>
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	468b      	mov	fp, r1
 8008e40:	e7de      	b.n	8008e00 <_strtod_l+0x8b8>
 8008e42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e4e:	f04f 3aff 	mov.w	sl, #4294967295
 8008e52:	e7d5      	b.n	8008e00 <_strtod_l+0x8b8>
 8008e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e56:	ea13 0f0a 	tst.w	r3, sl
 8008e5a:	e7e1      	b.n	8008e20 <_strtod_l+0x8d8>
 8008e5c:	f7ff fb56 	bl	800850c <sulp>
 8008e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e64:	ec53 2b10 	vmov	r2, r3, d0
 8008e68:	f7f7 fa3e 	bl	80002e8 <__aeabi_dsub>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4682      	mov	sl, r0
 8008e72:	468b      	mov	fp, r1
 8008e74:	f7f7 fe58 	bl	8000b28 <__aeabi_dcmpeq>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0c1      	beq.n	8008e00 <_strtod_l+0x8b8>
 8008e7c:	e619      	b.n	8008ab2 <_strtod_l+0x56a>
 8008e7e:	4641      	mov	r1, r8
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7ff facd 	bl	8008420 <__ratio>
 8008e86:	ec57 6b10 	vmov	r6, r7, d0
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fe5c 	bl	8000b50 <__aeabi_dcmple>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d06f      	beq.n	8008f7c <_strtod_l+0xa34>
 8008e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d17a      	bne.n	8008f98 <_strtod_l+0xa50>
 8008ea2:	f1ba 0f00 	cmp.w	sl, #0
 8008ea6:	d158      	bne.n	8008f5a <_strtod_l+0xa12>
 8008ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d15a      	bne.n	8008f68 <_strtod_l+0xa20>
 8008eb2:	4b64      	ldr	r3, [pc, #400]	@ (8009044 <_strtod_l+0xafc>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	f7f7 fe3f 	bl	8000b3c <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d159      	bne.n	8008f76 <_strtod_l+0xa2e>
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	4b60      	ldr	r3, [pc, #384]	@ (8009048 <_strtod_l+0xb00>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f7f7 fbc5 	bl	8000658 <__aeabi_dmul>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	460f      	mov	r7, r1
 8008ed2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ed6:	9606      	str	r6, [sp, #24]
 8008ed8:	9307      	str	r3, [sp, #28]
 8008eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ede:	4d57      	ldr	r5, [pc, #348]	@ (800903c <_strtod_l+0xaf4>)
 8008ee0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee6:	401d      	ands	r5, r3
 8008ee8:	4b58      	ldr	r3, [pc, #352]	@ (800904c <_strtod_l+0xb04>)
 8008eea:	429d      	cmp	r5, r3
 8008eec:	f040 80b2 	bne.w	8009054 <_strtod_l+0xb0c>
 8008ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008ef6:	ec4b ab10 	vmov	d0, sl, fp
 8008efa:	f7ff f9c9 	bl	8008290 <__ulp>
 8008efe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f02:	ec51 0b10 	vmov	r0, r1, d0
 8008f06:	f7f7 fba7 	bl	8000658 <__aeabi_dmul>
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	f7f7 f9ed 	bl	80002ec <__adddf3>
 8008f12:	460b      	mov	r3, r1
 8008f14:	4949      	ldr	r1, [pc, #292]	@ (800903c <_strtod_l+0xaf4>)
 8008f16:	4a4e      	ldr	r2, [pc, #312]	@ (8009050 <_strtod_l+0xb08>)
 8008f18:	4019      	ands	r1, r3
 8008f1a:	4291      	cmp	r1, r2
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	d942      	bls.n	8008fa6 <_strtod_l+0xa5e>
 8008f20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f22:	4b47      	ldr	r3, [pc, #284]	@ (8009040 <_strtod_l+0xaf8>)
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d103      	bne.n	8008f30 <_strtod_l+0x9e8>
 8008f28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	f43f ad2b 	beq.w	8008986 <_strtod_l+0x43e>
 8008f30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009040 <_strtod_l+0xaf8>
 8008f34:	f04f 3aff 	mov.w	sl, #4294967295
 8008f38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f3a:	9805      	ldr	r0, [sp, #20]
 8008f3c:	f7fe fe74 	bl	8007c28 <_Bfree>
 8008f40:	9805      	ldr	r0, [sp, #20]
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7fe fe70 	bl	8007c28 <_Bfree>
 8008f48:	9805      	ldr	r0, [sp, #20]
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	f7fe fe6c 	bl	8007c28 <_Bfree>
 8008f50:	9805      	ldr	r0, [sp, #20]
 8008f52:	4621      	mov	r1, r4
 8008f54:	f7fe fe68 	bl	8007c28 <_Bfree>
 8008f58:	e618      	b.n	8008b8c <_strtod_l+0x644>
 8008f5a:	f1ba 0f01 	cmp.w	sl, #1
 8008f5e:	d103      	bne.n	8008f68 <_strtod_l+0xa20>
 8008f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f43f ada5 	beq.w	8008ab2 <_strtod_l+0x56a>
 8008f68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009018 <_strtod_l+0xad0>
 8008f6c:	4f35      	ldr	r7, [pc, #212]	@ (8009044 <_strtod_l+0xafc>)
 8008f6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f72:	2600      	movs	r6, #0
 8008f74:	e7b1      	b.n	8008eda <_strtod_l+0x992>
 8008f76:	4f34      	ldr	r7, [pc, #208]	@ (8009048 <_strtod_l+0xb00>)
 8008f78:	2600      	movs	r6, #0
 8008f7a:	e7aa      	b.n	8008ed2 <_strtod_l+0x98a>
 8008f7c:	4b32      	ldr	r3, [pc, #200]	@ (8009048 <_strtod_l+0xb00>)
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	2200      	movs	r2, #0
 8008f84:	f7f7 fb68 	bl	8000658 <__aeabi_dmul>
 8008f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d09f      	beq.n	8008ed2 <_strtod_l+0x98a>
 8008f92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f96:	e7a0      	b.n	8008eda <_strtod_l+0x992>
 8008f98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009020 <_strtod_l+0xad8>
 8008f9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fa0:	ec57 6b17 	vmov	r6, r7, d7
 8008fa4:	e799      	b.n	8008eda <_strtod_l+0x992>
 8008fa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1c1      	bne.n	8008f38 <_strtod_l+0x9f0>
 8008fb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fb8:	0d1b      	lsrs	r3, r3, #20
 8008fba:	051b      	lsls	r3, r3, #20
 8008fbc:	429d      	cmp	r5, r3
 8008fbe:	d1bb      	bne.n	8008f38 <_strtod_l+0x9f0>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 fea8 	bl	8000d18 <__aeabi_d2lz>
 8008fc8:	f7f7 fb18 	bl	80005fc <__aeabi_l2d>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 f988 	bl	80002e8 <__aeabi_dsub>
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4602      	mov	r2, r0
 8008fdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008fe0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fe6:	ea46 060a 	orr.w	r6, r6, sl
 8008fea:	431e      	orrs	r6, r3
 8008fec:	d06f      	beq.n	80090ce <_strtod_l+0xb86>
 8008fee:	a30e      	add	r3, pc, #56	@ (adr r3, 8009028 <_strtod_l+0xae0>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f7f7 fda2 	bl	8000b3c <__aeabi_dcmplt>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f47f accf 	bne.w	800899c <_strtod_l+0x454>
 8008ffe:	a30c      	add	r3, pc, #48	@ (adr r3, 8009030 <_strtod_l+0xae8>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009008:	f7f7 fdb6 	bl	8000b78 <__aeabi_dcmpgt>
 800900c:	2800      	cmp	r0, #0
 800900e:	d093      	beq.n	8008f38 <_strtod_l+0x9f0>
 8009010:	e4c4      	b.n	800899c <_strtod_l+0x454>
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
 8009018:	00000000 	.word	0x00000000
 800901c:	bff00000 	.word	0xbff00000
 8009020:	00000000 	.word	0x00000000
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	94a03595 	.word	0x94a03595
 800902c:	3fdfffff 	.word	0x3fdfffff
 8009030:	35afe535 	.word	0x35afe535
 8009034:	3fe00000 	.word	0x3fe00000
 8009038:	000fffff 	.word	0x000fffff
 800903c:	7ff00000 	.word	0x7ff00000
 8009040:	7fefffff 	.word	0x7fefffff
 8009044:	3ff00000 	.word	0x3ff00000
 8009048:	3fe00000 	.word	0x3fe00000
 800904c:	7fe00000 	.word	0x7fe00000
 8009050:	7c9fffff 	.word	0x7c9fffff
 8009054:	9b08      	ldr	r3, [sp, #32]
 8009056:	b323      	cbz	r3, 80090a2 <_strtod_l+0xb5a>
 8009058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800905c:	d821      	bhi.n	80090a2 <_strtod_l+0xb5a>
 800905e:	a328      	add	r3, pc, #160	@ (adr r3, 8009100 <_strtod_l+0xbb8>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 fd72 	bl	8000b50 <__aeabi_dcmple>
 800906c:	b1a0      	cbz	r0, 8009098 <_strtod_l+0xb50>
 800906e:	4639      	mov	r1, r7
 8009070:	4630      	mov	r0, r6
 8009072:	f7f7 fdc9 	bl	8000c08 <__aeabi_d2uiz>
 8009076:	2801      	cmp	r0, #1
 8009078:	bf38      	it	cc
 800907a:	2001      	movcc	r0, #1
 800907c:	f7f7 fa72 	bl	8000564 <__aeabi_ui2d>
 8009080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009082:	4606      	mov	r6, r0
 8009084:	460f      	mov	r7, r1
 8009086:	b9fb      	cbnz	r3, 80090c8 <_strtod_l+0xb80>
 8009088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800908c:	9014      	str	r0, [sp, #80]	@ 0x50
 800908e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800909a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800909e:	1b5b      	subs	r3, r3, r5
 80090a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80090a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80090aa:	f7ff f8f1 	bl	8008290 <__ulp>
 80090ae:	4650      	mov	r0, sl
 80090b0:	ec53 2b10 	vmov	r2, r3, d0
 80090b4:	4659      	mov	r1, fp
 80090b6:	f7f7 facf 	bl	8000658 <__aeabi_dmul>
 80090ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090be:	f7f7 f915 	bl	80002ec <__adddf3>
 80090c2:	4682      	mov	sl, r0
 80090c4:	468b      	mov	fp, r1
 80090c6:	e770      	b.n	8008faa <_strtod_l+0xa62>
 80090c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80090cc:	e7e0      	b.n	8009090 <_strtod_l+0xb48>
 80090ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009108 <_strtod_l+0xbc0>)
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f7f7 fd32 	bl	8000b3c <__aeabi_dcmplt>
 80090d8:	e798      	b.n	800900c <_strtod_l+0xac4>
 80090da:	2300      	movs	r3, #0
 80090dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	f7ff ba6d 	b.w	80085c2 <_strtod_l+0x7a>
 80090e8:	2a65      	cmp	r2, #101	@ 0x65
 80090ea:	f43f ab66 	beq.w	80087ba <_strtod_l+0x272>
 80090ee:	2a45      	cmp	r2, #69	@ 0x45
 80090f0:	f43f ab63 	beq.w	80087ba <_strtod_l+0x272>
 80090f4:	2301      	movs	r3, #1
 80090f6:	f7ff bb9e 	b.w	8008836 <_strtod_l+0x2ee>
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w
 8009100:	ffc00000 	.word	0xffc00000
 8009104:	41dfffff 	.word	0x41dfffff
 8009108:	94a03595 	.word	0x94a03595
 800910c:	3fcfffff 	.word	0x3fcfffff

08009110 <_strtod_r>:
 8009110:	4b01      	ldr	r3, [pc, #4]	@ (8009118 <_strtod_r+0x8>)
 8009112:	f7ff ba19 	b.w	8008548 <_strtod_l>
 8009116:	bf00      	nop
 8009118:	200001e0 	.word	0x200001e0

0800911c <_strtol_l.constprop.0>:
 800911c:	2b24      	cmp	r3, #36	@ 0x24
 800911e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009122:	4686      	mov	lr, r0
 8009124:	4690      	mov	r8, r2
 8009126:	d801      	bhi.n	800912c <_strtol_l.constprop.0+0x10>
 8009128:	2b01      	cmp	r3, #1
 800912a:	d106      	bne.n	800913a <_strtol_l.constprop.0+0x1e>
 800912c:	f7fd fdbc 	bl	8006ca8 <__errno>
 8009130:	2316      	movs	r3, #22
 8009132:	6003      	str	r3, [r0, #0]
 8009134:	2000      	movs	r0, #0
 8009136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913a:	4834      	ldr	r0, [pc, #208]	@ (800920c <_strtol_l.constprop.0+0xf0>)
 800913c:	460d      	mov	r5, r1
 800913e:	462a      	mov	r2, r5
 8009140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009144:	5d06      	ldrb	r6, [r0, r4]
 8009146:	f016 0608 	ands.w	r6, r6, #8
 800914a:	d1f8      	bne.n	800913e <_strtol_l.constprop.0+0x22>
 800914c:	2c2d      	cmp	r4, #45	@ 0x2d
 800914e:	d12d      	bne.n	80091ac <_strtol_l.constprop.0+0x90>
 8009150:	782c      	ldrb	r4, [r5, #0]
 8009152:	2601      	movs	r6, #1
 8009154:	1c95      	adds	r5, r2, #2
 8009156:	f033 0210 	bics.w	r2, r3, #16
 800915a:	d109      	bne.n	8009170 <_strtol_l.constprop.0+0x54>
 800915c:	2c30      	cmp	r4, #48	@ 0x30
 800915e:	d12a      	bne.n	80091b6 <_strtol_l.constprop.0+0x9a>
 8009160:	782a      	ldrb	r2, [r5, #0]
 8009162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009166:	2a58      	cmp	r2, #88	@ 0x58
 8009168:	d125      	bne.n	80091b6 <_strtol_l.constprop.0+0x9a>
 800916a:	786c      	ldrb	r4, [r5, #1]
 800916c:	2310      	movs	r3, #16
 800916e:	3502      	adds	r5, #2
 8009170:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009174:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009178:	2200      	movs	r2, #0
 800917a:	fbbc f9f3 	udiv	r9, ip, r3
 800917e:	4610      	mov	r0, r2
 8009180:	fb03 ca19 	mls	sl, r3, r9, ip
 8009184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009188:	2f09      	cmp	r7, #9
 800918a:	d81b      	bhi.n	80091c4 <_strtol_l.constprop.0+0xa8>
 800918c:	463c      	mov	r4, r7
 800918e:	42a3      	cmp	r3, r4
 8009190:	dd27      	ble.n	80091e2 <_strtol_l.constprop.0+0xc6>
 8009192:	1c57      	adds	r7, r2, #1
 8009194:	d007      	beq.n	80091a6 <_strtol_l.constprop.0+0x8a>
 8009196:	4581      	cmp	r9, r0
 8009198:	d320      	bcc.n	80091dc <_strtol_l.constprop.0+0xc0>
 800919a:	d101      	bne.n	80091a0 <_strtol_l.constprop.0+0x84>
 800919c:	45a2      	cmp	sl, r4
 800919e:	db1d      	blt.n	80091dc <_strtol_l.constprop.0+0xc0>
 80091a0:	fb00 4003 	mla	r0, r0, r3, r4
 80091a4:	2201      	movs	r2, #1
 80091a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091aa:	e7eb      	b.n	8009184 <_strtol_l.constprop.0+0x68>
 80091ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80091ae:	bf04      	itt	eq
 80091b0:	782c      	ldrbeq	r4, [r5, #0]
 80091b2:	1c95      	addeq	r5, r2, #2
 80091b4:	e7cf      	b.n	8009156 <_strtol_l.constprop.0+0x3a>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1da      	bne.n	8009170 <_strtol_l.constprop.0+0x54>
 80091ba:	2c30      	cmp	r4, #48	@ 0x30
 80091bc:	bf0c      	ite	eq
 80091be:	2308      	moveq	r3, #8
 80091c0:	230a      	movne	r3, #10
 80091c2:	e7d5      	b.n	8009170 <_strtol_l.constprop.0+0x54>
 80091c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80091c8:	2f19      	cmp	r7, #25
 80091ca:	d801      	bhi.n	80091d0 <_strtol_l.constprop.0+0xb4>
 80091cc:	3c37      	subs	r4, #55	@ 0x37
 80091ce:	e7de      	b.n	800918e <_strtol_l.constprop.0+0x72>
 80091d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80091d4:	2f19      	cmp	r7, #25
 80091d6:	d804      	bhi.n	80091e2 <_strtol_l.constprop.0+0xc6>
 80091d8:	3c57      	subs	r4, #87	@ 0x57
 80091da:	e7d8      	b.n	800918e <_strtol_l.constprop.0+0x72>
 80091dc:	f04f 32ff 	mov.w	r2, #4294967295
 80091e0:	e7e1      	b.n	80091a6 <_strtol_l.constprop.0+0x8a>
 80091e2:	1c53      	adds	r3, r2, #1
 80091e4:	d108      	bne.n	80091f8 <_strtol_l.constprop.0+0xdc>
 80091e6:	2322      	movs	r3, #34	@ 0x22
 80091e8:	f8ce 3000 	str.w	r3, [lr]
 80091ec:	4660      	mov	r0, ip
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	d0a0      	beq.n	8009136 <_strtol_l.constprop.0+0x1a>
 80091f4:	1e69      	subs	r1, r5, #1
 80091f6:	e006      	b.n	8009206 <_strtol_l.constprop.0+0xea>
 80091f8:	b106      	cbz	r6, 80091fc <_strtol_l.constprop.0+0xe0>
 80091fa:	4240      	negs	r0, r0
 80091fc:	f1b8 0f00 	cmp.w	r8, #0
 8009200:	d099      	beq.n	8009136 <_strtol_l.constprop.0+0x1a>
 8009202:	2a00      	cmp	r2, #0
 8009204:	d1f6      	bne.n	80091f4 <_strtol_l.constprop.0+0xd8>
 8009206:	f8c8 1000 	str.w	r1, [r8]
 800920a:	e794      	b.n	8009136 <_strtol_l.constprop.0+0x1a>
 800920c:	0800b699 	.word	0x0800b699

08009210 <_strtol_r>:
 8009210:	f7ff bf84 	b.w	800911c <_strtol_l.constprop.0>

08009214 <__ssputs_r>:
 8009214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	688e      	ldr	r6, [r1, #8]
 800921a:	461f      	mov	r7, r3
 800921c:	42be      	cmp	r6, r7
 800921e:	680b      	ldr	r3, [r1, #0]
 8009220:	4682      	mov	sl, r0
 8009222:	460c      	mov	r4, r1
 8009224:	4690      	mov	r8, r2
 8009226:	d82d      	bhi.n	8009284 <__ssputs_r+0x70>
 8009228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800922c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009230:	d026      	beq.n	8009280 <__ssputs_r+0x6c>
 8009232:	6965      	ldr	r5, [r4, #20]
 8009234:	6909      	ldr	r1, [r1, #16]
 8009236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800923a:	eba3 0901 	sub.w	r9, r3, r1
 800923e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009242:	1c7b      	adds	r3, r7, #1
 8009244:	444b      	add	r3, r9
 8009246:	106d      	asrs	r5, r5, #1
 8009248:	429d      	cmp	r5, r3
 800924a:	bf38      	it	cc
 800924c:	461d      	movcc	r5, r3
 800924e:	0553      	lsls	r3, r2, #21
 8009250:	d527      	bpl.n	80092a2 <__ssputs_r+0x8e>
 8009252:	4629      	mov	r1, r5
 8009254:	f7fe fc1c 	bl	8007a90 <_malloc_r>
 8009258:	4606      	mov	r6, r0
 800925a:	b360      	cbz	r0, 80092b6 <__ssputs_r+0xa2>
 800925c:	6921      	ldr	r1, [r4, #16]
 800925e:	464a      	mov	r2, r9
 8009260:	f000 fa9c 	bl	800979c <memcpy>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800926a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	6126      	str	r6, [r4, #16]
 8009272:	6165      	str	r5, [r4, #20]
 8009274:	444e      	add	r6, r9
 8009276:	eba5 0509 	sub.w	r5, r5, r9
 800927a:	6026      	str	r6, [r4, #0]
 800927c:	60a5      	str	r5, [r4, #8]
 800927e:	463e      	mov	r6, r7
 8009280:	42be      	cmp	r6, r7
 8009282:	d900      	bls.n	8009286 <__ssputs_r+0x72>
 8009284:	463e      	mov	r6, r7
 8009286:	6820      	ldr	r0, [r4, #0]
 8009288:	4632      	mov	r2, r6
 800928a:	4641      	mov	r1, r8
 800928c:	f000 fa28 	bl	80096e0 <memmove>
 8009290:	68a3      	ldr	r3, [r4, #8]
 8009292:	1b9b      	subs	r3, r3, r6
 8009294:	60a3      	str	r3, [r4, #8]
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	4433      	add	r3, r6
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	2000      	movs	r0, #0
 800929e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a2:	462a      	mov	r2, r5
 80092a4:	f000 fe0d 	bl	8009ec2 <_realloc_r>
 80092a8:	4606      	mov	r6, r0
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d1e0      	bne.n	8009270 <__ssputs_r+0x5c>
 80092ae:	6921      	ldr	r1, [r4, #16]
 80092b0:	4650      	mov	r0, sl
 80092b2:	f7fe fb79 	bl	80079a8 <_free_r>
 80092b6:	230c      	movs	r3, #12
 80092b8:	f8ca 3000 	str.w	r3, [sl]
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	e7e9      	b.n	800929e <__ssputs_r+0x8a>
	...

080092cc <_svfiprintf_r>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	4698      	mov	r8, r3
 80092d2:	898b      	ldrh	r3, [r1, #12]
 80092d4:	061b      	lsls	r3, r3, #24
 80092d6:	b09d      	sub	sp, #116	@ 0x74
 80092d8:	4607      	mov	r7, r0
 80092da:	460d      	mov	r5, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	d510      	bpl.n	8009302 <_svfiprintf_r+0x36>
 80092e0:	690b      	ldr	r3, [r1, #16]
 80092e2:	b973      	cbnz	r3, 8009302 <_svfiprintf_r+0x36>
 80092e4:	2140      	movs	r1, #64	@ 0x40
 80092e6:	f7fe fbd3 	bl	8007a90 <_malloc_r>
 80092ea:	6028      	str	r0, [r5, #0]
 80092ec:	6128      	str	r0, [r5, #16]
 80092ee:	b930      	cbnz	r0, 80092fe <_svfiprintf_r+0x32>
 80092f0:	230c      	movs	r3, #12
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	b01d      	add	sp, #116	@ 0x74
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	2340      	movs	r3, #64	@ 0x40
 8009300:	616b      	str	r3, [r5, #20]
 8009302:	2300      	movs	r3, #0
 8009304:	9309      	str	r3, [sp, #36]	@ 0x24
 8009306:	2320      	movs	r3, #32
 8009308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800930c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009310:	2330      	movs	r3, #48	@ 0x30
 8009312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094b0 <_svfiprintf_r+0x1e4>
 8009316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800931a:	f04f 0901 	mov.w	r9, #1
 800931e:	4623      	mov	r3, r4
 8009320:	469a      	mov	sl, r3
 8009322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009326:	b10a      	cbz	r2, 800932c <_svfiprintf_r+0x60>
 8009328:	2a25      	cmp	r2, #37	@ 0x25
 800932a:	d1f9      	bne.n	8009320 <_svfiprintf_r+0x54>
 800932c:	ebba 0b04 	subs.w	fp, sl, r4
 8009330:	d00b      	beq.n	800934a <_svfiprintf_r+0x7e>
 8009332:	465b      	mov	r3, fp
 8009334:	4622      	mov	r2, r4
 8009336:	4629      	mov	r1, r5
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ff6b 	bl	8009214 <__ssputs_r>
 800933e:	3001      	adds	r0, #1
 8009340:	f000 80a7 	beq.w	8009492 <_svfiprintf_r+0x1c6>
 8009344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009346:	445a      	add	r2, fp
 8009348:	9209      	str	r2, [sp, #36]	@ 0x24
 800934a:	f89a 3000 	ldrb.w	r3, [sl]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 809f 	beq.w	8009492 <_svfiprintf_r+0x1c6>
 8009354:	2300      	movs	r3, #0
 8009356:	f04f 32ff 	mov.w	r2, #4294967295
 800935a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935e:	f10a 0a01 	add.w	sl, sl, #1
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	9307      	str	r3, [sp, #28]
 8009366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800936a:	931a      	str	r3, [sp, #104]	@ 0x68
 800936c:	4654      	mov	r4, sl
 800936e:	2205      	movs	r2, #5
 8009370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009374:	484e      	ldr	r0, [pc, #312]	@ (80094b0 <_svfiprintf_r+0x1e4>)
 8009376:	f7f6 ff5b 	bl	8000230 <memchr>
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	b9d8      	cbnz	r0, 80093b6 <_svfiprintf_r+0xea>
 800937e:	06d0      	lsls	r0, r2, #27
 8009380:	bf44      	itt	mi
 8009382:	2320      	movmi	r3, #32
 8009384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009388:	0711      	lsls	r1, r2, #28
 800938a:	bf44      	itt	mi
 800938c:	232b      	movmi	r3, #43	@ 0x2b
 800938e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009392:	f89a 3000 	ldrb.w	r3, [sl]
 8009396:	2b2a      	cmp	r3, #42	@ 0x2a
 8009398:	d015      	beq.n	80093c6 <_svfiprintf_r+0xfa>
 800939a:	9a07      	ldr	r2, [sp, #28]
 800939c:	4654      	mov	r4, sl
 800939e:	2000      	movs	r0, #0
 80093a0:	f04f 0c0a 	mov.w	ip, #10
 80093a4:	4621      	mov	r1, r4
 80093a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093aa:	3b30      	subs	r3, #48	@ 0x30
 80093ac:	2b09      	cmp	r3, #9
 80093ae:	d94b      	bls.n	8009448 <_svfiprintf_r+0x17c>
 80093b0:	b1b0      	cbz	r0, 80093e0 <_svfiprintf_r+0x114>
 80093b2:	9207      	str	r2, [sp, #28]
 80093b4:	e014      	b.n	80093e0 <_svfiprintf_r+0x114>
 80093b6:	eba0 0308 	sub.w	r3, r0, r8
 80093ba:	fa09 f303 	lsl.w	r3, r9, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	46a2      	mov	sl, r4
 80093c4:	e7d2      	b.n	800936c <_svfiprintf_r+0xa0>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	1d19      	adds	r1, r3, #4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	9103      	str	r1, [sp, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfbb      	ittet	lt
 80093d2:	425b      	neglt	r3, r3
 80093d4:	f042 0202 	orrlt.w	r2, r2, #2
 80093d8:	9307      	strge	r3, [sp, #28]
 80093da:	9307      	strlt	r3, [sp, #28]
 80093dc:	bfb8      	it	lt
 80093de:	9204      	strlt	r2, [sp, #16]
 80093e0:	7823      	ldrb	r3, [r4, #0]
 80093e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093e4:	d10a      	bne.n	80093fc <_svfiprintf_r+0x130>
 80093e6:	7863      	ldrb	r3, [r4, #1]
 80093e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ea:	d132      	bne.n	8009452 <_svfiprintf_r+0x186>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	9203      	str	r2, [sp, #12]
 80093f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093f8:	3402      	adds	r4, #2
 80093fa:	9305      	str	r3, [sp, #20]
 80093fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094c0 <_svfiprintf_r+0x1f4>
 8009400:	7821      	ldrb	r1, [r4, #0]
 8009402:	2203      	movs	r2, #3
 8009404:	4650      	mov	r0, sl
 8009406:	f7f6 ff13 	bl	8000230 <memchr>
 800940a:	b138      	cbz	r0, 800941c <_svfiprintf_r+0x150>
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	eba0 000a 	sub.w	r0, r0, sl
 8009412:	2240      	movs	r2, #64	@ 0x40
 8009414:	4082      	lsls	r2, r0
 8009416:	4313      	orrs	r3, r2
 8009418:	3401      	adds	r4, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009420:	4824      	ldr	r0, [pc, #144]	@ (80094b4 <_svfiprintf_r+0x1e8>)
 8009422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009426:	2206      	movs	r2, #6
 8009428:	f7f6 ff02 	bl	8000230 <memchr>
 800942c:	2800      	cmp	r0, #0
 800942e:	d036      	beq.n	800949e <_svfiprintf_r+0x1d2>
 8009430:	4b21      	ldr	r3, [pc, #132]	@ (80094b8 <_svfiprintf_r+0x1ec>)
 8009432:	bb1b      	cbnz	r3, 800947c <_svfiprintf_r+0x1b0>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	3307      	adds	r3, #7
 8009438:	f023 0307 	bic.w	r3, r3, #7
 800943c:	3308      	adds	r3, #8
 800943e:	9303      	str	r3, [sp, #12]
 8009440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009442:	4433      	add	r3, r6
 8009444:	9309      	str	r3, [sp, #36]	@ 0x24
 8009446:	e76a      	b.n	800931e <_svfiprintf_r+0x52>
 8009448:	fb0c 3202 	mla	r2, ip, r2, r3
 800944c:	460c      	mov	r4, r1
 800944e:	2001      	movs	r0, #1
 8009450:	e7a8      	b.n	80093a4 <_svfiprintf_r+0xd8>
 8009452:	2300      	movs	r3, #0
 8009454:	3401      	adds	r4, #1
 8009456:	9305      	str	r3, [sp, #20]
 8009458:	4619      	mov	r1, r3
 800945a:	f04f 0c0a 	mov.w	ip, #10
 800945e:	4620      	mov	r0, r4
 8009460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009464:	3a30      	subs	r2, #48	@ 0x30
 8009466:	2a09      	cmp	r2, #9
 8009468:	d903      	bls.n	8009472 <_svfiprintf_r+0x1a6>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0c6      	beq.n	80093fc <_svfiprintf_r+0x130>
 800946e:	9105      	str	r1, [sp, #20]
 8009470:	e7c4      	b.n	80093fc <_svfiprintf_r+0x130>
 8009472:	fb0c 2101 	mla	r1, ip, r1, r2
 8009476:	4604      	mov	r4, r0
 8009478:	2301      	movs	r3, #1
 800947a:	e7f0      	b.n	800945e <_svfiprintf_r+0x192>
 800947c:	ab03      	add	r3, sp, #12
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	462a      	mov	r2, r5
 8009482:	4b0e      	ldr	r3, [pc, #56]	@ (80094bc <_svfiprintf_r+0x1f0>)
 8009484:	a904      	add	r1, sp, #16
 8009486:	4638      	mov	r0, r7
 8009488:	f7fc fc16 	bl	8005cb8 <_printf_float>
 800948c:	1c42      	adds	r2, r0, #1
 800948e:	4606      	mov	r6, r0
 8009490:	d1d6      	bne.n	8009440 <_svfiprintf_r+0x174>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	065b      	lsls	r3, r3, #25
 8009496:	f53f af2d 	bmi.w	80092f4 <_svfiprintf_r+0x28>
 800949a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800949c:	e72c      	b.n	80092f8 <_svfiprintf_r+0x2c>
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	462a      	mov	r2, r5
 80094a4:	4b05      	ldr	r3, [pc, #20]	@ (80094bc <_svfiprintf_r+0x1f0>)
 80094a6:	a904      	add	r1, sp, #16
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7fc fe9d 	bl	80061e8 <_printf_i>
 80094ae:	e7ed      	b.n	800948c <_svfiprintf_r+0x1c0>
 80094b0:	0800b799 	.word	0x0800b799
 80094b4:	0800b7a3 	.word	0x0800b7a3
 80094b8:	08005cb9 	.word	0x08005cb9
 80094bc:	08009215 	.word	0x08009215
 80094c0:	0800b79f 	.word	0x0800b79f

080094c4 <__sflush_r>:
 80094c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	0716      	lsls	r6, r2, #28
 80094ce:	4605      	mov	r5, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	d454      	bmi.n	800957e <__sflush_r+0xba>
 80094d4:	684b      	ldr	r3, [r1, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dc02      	bgt.n	80094e0 <__sflush_r+0x1c>
 80094da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd48      	ble.n	8009572 <__sflush_r+0xae>
 80094e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	d045      	beq.n	8009572 <__sflush_r+0xae>
 80094e6:	2300      	movs	r3, #0
 80094e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094ec:	682f      	ldr	r7, [r5, #0]
 80094ee:	6a21      	ldr	r1, [r4, #32]
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	d030      	beq.n	8009556 <__sflush_r+0x92>
 80094f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	0759      	lsls	r1, r3, #29
 80094fa:	d505      	bpl.n	8009508 <__sflush_r+0x44>
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009502:	b10b      	cbz	r3, 8009508 <__sflush_r+0x44>
 8009504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009506:	1ad2      	subs	r2, r2, r3
 8009508:	2300      	movs	r3, #0
 800950a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800950c:	6a21      	ldr	r1, [r4, #32]
 800950e:	4628      	mov	r0, r5
 8009510:	47b0      	blx	r6
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	d106      	bne.n	8009526 <__sflush_r+0x62>
 8009518:	6829      	ldr	r1, [r5, #0]
 800951a:	291d      	cmp	r1, #29
 800951c:	d82b      	bhi.n	8009576 <__sflush_r+0xb2>
 800951e:	4a2a      	ldr	r2, [pc, #168]	@ (80095c8 <__sflush_r+0x104>)
 8009520:	410a      	asrs	r2, r1
 8009522:	07d6      	lsls	r6, r2, #31
 8009524:	d427      	bmi.n	8009576 <__sflush_r+0xb2>
 8009526:	2200      	movs	r2, #0
 8009528:	6062      	str	r2, [r4, #4]
 800952a:	04d9      	lsls	r1, r3, #19
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	6022      	str	r2, [r4, #0]
 8009530:	d504      	bpl.n	800953c <__sflush_r+0x78>
 8009532:	1c42      	adds	r2, r0, #1
 8009534:	d101      	bne.n	800953a <__sflush_r+0x76>
 8009536:	682b      	ldr	r3, [r5, #0]
 8009538:	b903      	cbnz	r3, 800953c <__sflush_r+0x78>
 800953a:	6560      	str	r0, [r4, #84]	@ 0x54
 800953c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800953e:	602f      	str	r7, [r5, #0]
 8009540:	b1b9      	cbz	r1, 8009572 <__sflush_r+0xae>
 8009542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009546:	4299      	cmp	r1, r3
 8009548:	d002      	beq.n	8009550 <__sflush_r+0x8c>
 800954a:	4628      	mov	r0, r5
 800954c:	f7fe fa2c 	bl	80079a8 <_free_r>
 8009550:	2300      	movs	r3, #0
 8009552:	6363      	str	r3, [r4, #52]	@ 0x34
 8009554:	e00d      	b.n	8009572 <__sflush_r+0xae>
 8009556:	2301      	movs	r3, #1
 8009558:	4628      	mov	r0, r5
 800955a:	47b0      	blx	r6
 800955c:	4602      	mov	r2, r0
 800955e:	1c50      	adds	r0, r2, #1
 8009560:	d1c9      	bne.n	80094f6 <__sflush_r+0x32>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0c6      	beq.n	80094f6 <__sflush_r+0x32>
 8009568:	2b1d      	cmp	r3, #29
 800956a:	d001      	beq.n	8009570 <__sflush_r+0xac>
 800956c:	2b16      	cmp	r3, #22
 800956e:	d11e      	bne.n	80095ae <__sflush_r+0xea>
 8009570:	602f      	str	r7, [r5, #0]
 8009572:	2000      	movs	r0, #0
 8009574:	e022      	b.n	80095bc <__sflush_r+0xf8>
 8009576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957a:	b21b      	sxth	r3, r3
 800957c:	e01b      	b.n	80095b6 <__sflush_r+0xf2>
 800957e:	690f      	ldr	r7, [r1, #16]
 8009580:	2f00      	cmp	r7, #0
 8009582:	d0f6      	beq.n	8009572 <__sflush_r+0xae>
 8009584:	0793      	lsls	r3, r2, #30
 8009586:	680e      	ldr	r6, [r1, #0]
 8009588:	bf08      	it	eq
 800958a:	694b      	ldreq	r3, [r1, #20]
 800958c:	600f      	str	r7, [r1, #0]
 800958e:	bf18      	it	ne
 8009590:	2300      	movne	r3, #0
 8009592:	eba6 0807 	sub.w	r8, r6, r7
 8009596:	608b      	str	r3, [r1, #8]
 8009598:	f1b8 0f00 	cmp.w	r8, #0
 800959c:	dde9      	ble.n	8009572 <__sflush_r+0xae>
 800959e:	6a21      	ldr	r1, [r4, #32]
 80095a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095a2:	4643      	mov	r3, r8
 80095a4:	463a      	mov	r2, r7
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b0      	blx	r6
 80095aa:	2800      	cmp	r0, #0
 80095ac:	dc08      	bgt.n	80095c0 <__sflush_r+0xfc>
 80095ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295
 80095bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c0:	4407      	add	r7, r0
 80095c2:	eba8 0800 	sub.w	r8, r8, r0
 80095c6:	e7e7      	b.n	8009598 <__sflush_r+0xd4>
 80095c8:	dfbffffe 	.word	0xdfbffffe

080095cc <_fflush_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	690b      	ldr	r3, [r1, #16]
 80095d0:	4605      	mov	r5, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	b913      	cbnz	r3, 80095dc <_fflush_r+0x10>
 80095d6:	2500      	movs	r5, #0
 80095d8:	4628      	mov	r0, r5
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	b118      	cbz	r0, 80095e6 <_fflush_r+0x1a>
 80095de:	6a03      	ldr	r3, [r0, #32]
 80095e0:	b90b      	cbnz	r3, 80095e6 <_fflush_r+0x1a>
 80095e2:	f7fd f9c1 	bl	8006968 <__sinit>
 80095e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0f3      	beq.n	80095d6 <_fflush_r+0xa>
 80095ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095f0:	07d0      	lsls	r0, r2, #31
 80095f2:	d404      	bmi.n	80095fe <_fflush_r+0x32>
 80095f4:	0599      	lsls	r1, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_fflush_r+0x32>
 80095f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095fa:	f7fd fb80 	bl	8006cfe <__retarget_lock_acquire_recursive>
 80095fe:	4628      	mov	r0, r5
 8009600:	4621      	mov	r1, r4
 8009602:	f7ff ff5f 	bl	80094c4 <__sflush_r>
 8009606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009608:	07da      	lsls	r2, r3, #31
 800960a:	4605      	mov	r5, r0
 800960c:	d4e4      	bmi.n	80095d8 <_fflush_r+0xc>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	059b      	lsls	r3, r3, #22
 8009612:	d4e1      	bmi.n	80095d8 <_fflush_r+0xc>
 8009614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009616:	f7fd fb73 	bl	8006d00 <__retarget_lock_release_recursive>
 800961a:	e7dd      	b.n	80095d8 <_fflush_r+0xc>

0800961c <__swhatbuf_r>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	460c      	mov	r4, r1
 8009620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009624:	2900      	cmp	r1, #0
 8009626:	b096      	sub	sp, #88	@ 0x58
 8009628:	4615      	mov	r5, r2
 800962a:	461e      	mov	r6, r3
 800962c:	da0d      	bge.n	800964a <__swhatbuf_r+0x2e>
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009634:	f04f 0100 	mov.w	r1, #0
 8009638:	bf14      	ite	ne
 800963a:	2340      	movne	r3, #64	@ 0x40
 800963c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009640:	2000      	movs	r0, #0
 8009642:	6031      	str	r1, [r6, #0]
 8009644:	602b      	str	r3, [r5, #0]
 8009646:	b016      	add	sp, #88	@ 0x58
 8009648:	bd70      	pop	{r4, r5, r6, pc}
 800964a:	466a      	mov	r2, sp
 800964c:	f000 f874 	bl	8009738 <_fstat_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	dbec      	blt.n	800962e <__swhatbuf_r+0x12>
 8009654:	9901      	ldr	r1, [sp, #4]
 8009656:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800965a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800965e:	4259      	negs	r1, r3
 8009660:	4159      	adcs	r1, r3
 8009662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009666:	e7eb      	b.n	8009640 <__swhatbuf_r+0x24>

08009668 <__smakebuf_r>:
 8009668:	898b      	ldrh	r3, [r1, #12]
 800966a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800966c:	079d      	lsls	r5, r3, #30
 800966e:	4606      	mov	r6, r0
 8009670:	460c      	mov	r4, r1
 8009672:	d507      	bpl.n	8009684 <__smakebuf_r+0x1c>
 8009674:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	2301      	movs	r3, #1
 800967e:	6163      	str	r3, [r4, #20]
 8009680:	b003      	add	sp, #12
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009684:	ab01      	add	r3, sp, #4
 8009686:	466a      	mov	r2, sp
 8009688:	f7ff ffc8 	bl	800961c <__swhatbuf_r>
 800968c:	9f00      	ldr	r7, [sp, #0]
 800968e:	4605      	mov	r5, r0
 8009690:	4639      	mov	r1, r7
 8009692:	4630      	mov	r0, r6
 8009694:	f7fe f9fc 	bl	8007a90 <_malloc_r>
 8009698:	b948      	cbnz	r0, 80096ae <__smakebuf_r+0x46>
 800969a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800969e:	059a      	lsls	r2, r3, #22
 80096a0:	d4ee      	bmi.n	8009680 <__smakebuf_r+0x18>
 80096a2:	f023 0303 	bic.w	r3, r3, #3
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	e7e2      	b.n	8009674 <__smakebuf_r+0xc>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	6020      	str	r0, [r4, #0]
 80096b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	9b01      	ldr	r3, [sp, #4]
 80096ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096be:	b15b      	cbz	r3, 80096d8 <__smakebuf_r+0x70>
 80096c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c4:	4630      	mov	r0, r6
 80096c6:	f000 f849 	bl	800975c <_isatty_r>
 80096ca:	b128      	cbz	r0, 80096d8 <__smakebuf_r+0x70>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f023 0303 	bic.w	r3, r3, #3
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	431d      	orrs	r5, r3
 80096dc:	81a5      	strh	r5, [r4, #12]
 80096de:	e7cf      	b.n	8009680 <__smakebuf_r+0x18>

080096e0 <memmove>:
 80096e0:	4288      	cmp	r0, r1
 80096e2:	b510      	push	{r4, lr}
 80096e4:	eb01 0402 	add.w	r4, r1, r2
 80096e8:	d902      	bls.n	80096f0 <memmove+0x10>
 80096ea:	4284      	cmp	r4, r0
 80096ec:	4623      	mov	r3, r4
 80096ee:	d807      	bhi.n	8009700 <memmove+0x20>
 80096f0:	1e43      	subs	r3, r0, #1
 80096f2:	42a1      	cmp	r1, r4
 80096f4:	d008      	beq.n	8009708 <memmove+0x28>
 80096f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096fe:	e7f8      	b.n	80096f2 <memmove+0x12>
 8009700:	4402      	add	r2, r0
 8009702:	4601      	mov	r1, r0
 8009704:	428a      	cmp	r2, r1
 8009706:	d100      	bne.n	800970a <memmove+0x2a>
 8009708:	bd10      	pop	{r4, pc}
 800970a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800970e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009712:	e7f7      	b.n	8009704 <memmove+0x24>

08009714 <strncmp>:
 8009714:	b510      	push	{r4, lr}
 8009716:	b16a      	cbz	r2, 8009734 <strncmp+0x20>
 8009718:	3901      	subs	r1, #1
 800971a:	1884      	adds	r4, r0, r2
 800971c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009720:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009724:	429a      	cmp	r2, r3
 8009726:	d103      	bne.n	8009730 <strncmp+0x1c>
 8009728:	42a0      	cmp	r0, r4
 800972a:	d001      	beq.n	8009730 <strncmp+0x1c>
 800972c:	2a00      	cmp	r2, #0
 800972e:	d1f5      	bne.n	800971c <strncmp+0x8>
 8009730:	1ad0      	subs	r0, r2, r3
 8009732:	bd10      	pop	{r4, pc}
 8009734:	4610      	mov	r0, r2
 8009736:	e7fc      	b.n	8009732 <strncmp+0x1e>

08009738 <_fstat_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	@ (8009758 <_fstat_r+0x20>)
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7f8 f9d5 	bl	8001af4 <_fstat>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_fstat_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_fstat_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	20000c48 	.word	0x20000c48

0800975c <_isatty_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	@ (8009778 <_isatty_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f8 f9d4 	bl	8001b14 <_isatty>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_isatty_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_isatty_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000c48 	.word	0x20000c48

0800977c <_sbrk_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d06      	ldr	r5, [pc, #24]	@ (8009798 <_sbrk_r+0x1c>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7f8 f9dc 	bl	8001b44 <_sbrk>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_sbrk_r+0x1a>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_sbrk_r+0x1a>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20000c48 	.word	0x20000c48

0800979c <memcpy>:
 800979c:	440a      	add	r2, r1
 800979e:	4291      	cmp	r1, r2
 80097a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a4:	d100      	bne.n	80097a8 <memcpy+0xc>
 80097a6:	4770      	bx	lr
 80097a8:	b510      	push	{r4, lr}
 80097aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b2:	4291      	cmp	r1, r2
 80097b4:	d1f9      	bne.n	80097aa <memcpy+0xe>
 80097b6:	bd10      	pop	{r4, pc}

080097b8 <nan>:
 80097b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80097c0 <nan+0x8>
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	00000000 	.word	0x00000000
 80097c4:	7ff80000 	.word	0x7ff80000

080097c8 <__assert_func>:
 80097c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097ca:	4614      	mov	r4, r2
 80097cc:	461a      	mov	r2, r3
 80097ce:	4b09      	ldr	r3, [pc, #36]	@ (80097f4 <__assert_func+0x2c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4605      	mov	r5, r0
 80097d4:	68d8      	ldr	r0, [r3, #12]
 80097d6:	b954      	cbnz	r4, 80097ee <__assert_func+0x26>
 80097d8:	4b07      	ldr	r3, [pc, #28]	@ (80097f8 <__assert_func+0x30>)
 80097da:	461c      	mov	r4, r3
 80097dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097e0:	9100      	str	r1, [sp, #0]
 80097e2:	462b      	mov	r3, r5
 80097e4:	4905      	ldr	r1, [pc, #20]	@ (80097fc <__assert_func+0x34>)
 80097e6:	f000 fba7 	bl	8009f38 <fiprintf>
 80097ea:	f000 fbb7 	bl	8009f5c <abort>
 80097ee:	4b04      	ldr	r3, [pc, #16]	@ (8009800 <__assert_func+0x38>)
 80097f0:	e7f4      	b.n	80097dc <__assert_func+0x14>
 80097f2:	bf00      	nop
 80097f4:	20000190 	.word	0x20000190
 80097f8:	0800b7ed 	.word	0x0800b7ed
 80097fc:	0800b7bf 	.word	0x0800b7bf
 8009800:	0800b7b2 	.word	0x0800b7b2

08009804 <_calloc_r>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	fba1 5402 	umull	r5, r4, r1, r2
 800980a:	b93c      	cbnz	r4, 800981c <_calloc_r+0x18>
 800980c:	4629      	mov	r1, r5
 800980e:	f7fe f93f 	bl	8007a90 <_malloc_r>
 8009812:	4606      	mov	r6, r0
 8009814:	b928      	cbnz	r0, 8009822 <_calloc_r+0x1e>
 8009816:	2600      	movs	r6, #0
 8009818:	4630      	mov	r0, r6
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	220c      	movs	r2, #12
 800981e:	6002      	str	r2, [r0, #0]
 8009820:	e7f9      	b.n	8009816 <_calloc_r+0x12>
 8009822:	462a      	mov	r2, r5
 8009824:	4621      	mov	r1, r4
 8009826:	f7fd f9ec 	bl	8006c02 <memset>
 800982a:	e7f5      	b.n	8009818 <_calloc_r+0x14>

0800982c <rshift>:
 800982c:	6903      	ldr	r3, [r0, #16]
 800982e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009836:	ea4f 1261 	mov.w	r2, r1, asr #5
 800983a:	f100 0414 	add.w	r4, r0, #20
 800983e:	dd45      	ble.n	80098cc <rshift+0xa0>
 8009840:	f011 011f 	ands.w	r1, r1, #31
 8009844:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009848:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800984c:	d10c      	bne.n	8009868 <rshift+0x3c>
 800984e:	f100 0710 	add.w	r7, r0, #16
 8009852:	4629      	mov	r1, r5
 8009854:	42b1      	cmp	r1, r6
 8009856:	d334      	bcc.n	80098c2 <rshift+0x96>
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	1eea      	subs	r2, r5, #3
 800985e:	4296      	cmp	r6, r2
 8009860:	bf38      	it	cc
 8009862:	2300      	movcc	r3, #0
 8009864:	4423      	add	r3, r4
 8009866:	e015      	b.n	8009894 <rshift+0x68>
 8009868:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800986c:	f1c1 0820 	rsb	r8, r1, #32
 8009870:	40cf      	lsrs	r7, r1
 8009872:	f105 0e04 	add.w	lr, r5, #4
 8009876:	46a1      	mov	r9, r4
 8009878:	4576      	cmp	r6, lr
 800987a:	46f4      	mov	ip, lr
 800987c:	d815      	bhi.n	80098aa <rshift+0x7e>
 800987e:	1a9a      	subs	r2, r3, r2
 8009880:	0092      	lsls	r2, r2, #2
 8009882:	3a04      	subs	r2, #4
 8009884:	3501      	adds	r5, #1
 8009886:	42ae      	cmp	r6, r5
 8009888:	bf38      	it	cc
 800988a:	2200      	movcc	r2, #0
 800988c:	18a3      	adds	r3, r4, r2
 800988e:	50a7      	str	r7, [r4, r2]
 8009890:	b107      	cbz	r7, 8009894 <rshift+0x68>
 8009892:	3304      	adds	r3, #4
 8009894:	1b1a      	subs	r2, r3, r4
 8009896:	42a3      	cmp	r3, r4
 8009898:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800989c:	bf08      	it	eq
 800989e:	2300      	moveq	r3, #0
 80098a0:	6102      	str	r2, [r0, #16]
 80098a2:	bf08      	it	eq
 80098a4:	6143      	streq	r3, [r0, #20]
 80098a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098aa:	f8dc c000 	ldr.w	ip, [ip]
 80098ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80098b2:	ea4c 0707 	orr.w	r7, ip, r7
 80098b6:	f849 7b04 	str.w	r7, [r9], #4
 80098ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098be:	40cf      	lsrs	r7, r1
 80098c0:	e7da      	b.n	8009878 <rshift+0x4c>
 80098c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80098c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80098ca:	e7c3      	b.n	8009854 <rshift+0x28>
 80098cc:	4623      	mov	r3, r4
 80098ce:	e7e1      	b.n	8009894 <rshift+0x68>

080098d0 <__hexdig_fun>:
 80098d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80098d4:	2b09      	cmp	r3, #9
 80098d6:	d802      	bhi.n	80098de <__hexdig_fun+0xe>
 80098d8:	3820      	subs	r0, #32
 80098da:	b2c0      	uxtb	r0, r0
 80098dc:	4770      	bx	lr
 80098de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	d801      	bhi.n	80098ea <__hexdig_fun+0x1a>
 80098e6:	3847      	subs	r0, #71	@ 0x47
 80098e8:	e7f7      	b.n	80098da <__hexdig_fun+0xa>
 80098ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d801      	bhi.n	80098f6 <__hexdig_fun+0x26>
 80098f2:	3827      	subs	r0, #39	@ 0x27
 80098f4:	e7f1      	b.n	80098da <__hexdig_fun+0xa>
 80098f6:	2000      	movs	r0, #0
 80098f8:	4770      	bx	lr
	...

080098fc <__gethex>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	b085      	sub	sp, #20
 8009902:	468a      	mov	sl, r1
 8009904:	9302      	str	r3, [sp, #8]
 8009906:	680b      	ldr	r3, [r1, #0]
 8009908:	9001      	str	r0, [sp, #4]
 800990a:	4690      	mov	r8, r2
 800990c:	1c9c      	adds	r4, r3, #2
 800990e:	46a1      	mov	r9, r4
 8009910:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009914:	2830      	cmp	r0, #48	@ 0x30
 8009916:	d0fa      	beq.n	800990e <__gethex+0x12>
 8009918:	eba9 0303 	sub.w	r3, r9, r3
 800991c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009920:	f7ff ffd6 	bl	80098d0 <__hexdig_fun>
 8009924:	4605      	mov	r5, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	d168      	bne.n	80099fc <__gethex+0x100>
 800992a:	49a0      	ldr	r1, [pc, #640]	@ (8009bac <__gethex+0x2b0>)
 800992c:	2201      	movs	r2, #1
 800992e:	4648      	mov	r0, r9
 8009930:	f7ff fef0 	bl	8009714 <strncmp>
 8009934:	4607      	mov	r7, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	d167      	bne.n	8009a0a <__gethex+0x10e>
 800993a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800993e:	4626      	mov	r6, r4
 8009940:	f7ff ffc6 	bl	80098d0 <__hexdig_fun>
 8009944:	2800      	cmp	r0, #0
 8009946:	d062      	beq.n	8009a0e <__gethex+0x112>
 8009948:	4623      	mov	r3, r4
 800994a:	7818      	ldrb	r0, [r3, #0]
 800994c:	2830      	cmp	r0, #48	@ 0x30
 800994e:	4699      	mov	r9, r3
 8009950:	f103 0301 	add.w	r3, r3, #1
 8009954:	d0f9      	beq.n	800994a <__gethex+0x4e>
 8009956:	f7ff ffbb 	bl	80098d0 <__hexdig_fun>
 800995a:	fab0 f580 	clz	r5, r0
 800995e:	096d      	lsrs	r5, r5, #5
 8009960:	f04f 0b01 	mov.w	fp, #1
 8009964:	464a      	mov	r2, r9
 8009966:	4616      	mov	r6, r2
 8009968:	3201      	adds	r2, #1
 800996a:	7830      	ldrb	r0, [r6, #0]
 800996c:	f7ff ffb0 	bl	80098d0 <__hexdig_fun>
 8009970:	2800      	cmp	r0, #0
 8009972:	d1f8      	bne.n	8009966 <__gethex+0x6a>
 8009974:	498d      	ldr	r1, [pc, #564]	@ (8009bac <__gethex+0x2b0>)
 8009976:	2201      	movs	r2, #1
 8009978:	4630      	mov	r0, r6
 800997a:	f7ff fecb 	bl	8009714 <strncmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	d13f      	bne.n	8009a02 <__gethex+0x106>
 8009982:	b944      	cbnz	r4, 8009996 <__gethex+0x9a>
 8009984:	1c74      	adds	r4, r6, #1
 8009986:	4622      	mov	r2, r4
 8009988:	4616      	mov	r6, r2
 800998a:	3201      	adds	r2, #1
 800998c:	7830      	ldrb	r0, [r6, #0]
 800998e:	f7ff ff9f 	bl	80098d0 <__hexdig_fun>
 8009992:	2800      	cmp	r0, #0
 8009994:	d1f8      	bne.n	8009988 <__gethex+0x8c>
 8009996:	1ba4      	subs	r4, r4, r6
 8009998:	00a7      	lsls	r7, r4, #2
 800999a:	7833      	ldrb	r3, [r6, #0]
 800999c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80099a0:	2b50      	cmp	r3, #80	@ 0x50
 80099a2:	d13e      	bne.n	8009a22 <__gethex+0x126>
 80099a4:	7873      	ldrb	r3, [r6, #1]
 80099a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80099a8:	d033      	beq.n	8009a12 <__gethex+0x116>
 80099aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80099ac:	d034      	beq.n	8009a18 <__gethex+0x11c>
 80099ae:	1c71      	adds	r1, r6, #1
 80099b0:	2400      	movs	r4, #0
 80099b2:	7808      	ldrb	r0, [r1, #0]
 80099b4:	f7ff ff8c 	bl	80098d0 <__hexdig_fun>
 80099b8:	1e43      	subs	r3, r0, #1
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b18      	cmp	r3, #24
 80099be:	d830      	bhi.n	8009a22 <__gethex+0x126>
 80099c0:	f1a0 0210 	sub.w	r2, r0, #16
 80099c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099c8:	f7ff ff82 	bl	80098d0 <__hexdig_fun>
 80099cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80099d0:	fa5f fc8c 	uxtb.w	ip, ip
 80099d4:	f1bc 0f18 	cmp.w	ip, #24
 80099d8:	f04f 030a 	mov.w	r3, #10
 80099dc:	d91e      	bls.n	8009a1c <__gethex+0x120>
 80099de:	b104      	cbz	r4, 80099e2 <__gethex+0xe6>
 80099e0:	4252      	negs	r2, r2
 80099e2:	4417      	add	r7, r2
 80099e4:	f8ca 1000 	str.w	r1, [sl]
 80099e8:	b1ed      	cbz	r5, 8009a26 <__gethex+0x12a>
 80099ea:	f1bb 0f00 	cmp.w	fp, #0
 80099ee:	bf0c      	ite	eq
 80099f0:	2506      	moveq	r5, #6
 80099f2:	2500      	movne	r5, #0
 80099f4:	4628      	mov	r0, r5
 80099f6:	b005      	add	sp, #20
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	2500      	movs	r5, #0
 80099fe:	462c      	mov	r4, r5
 8009a00:	e7b0      	b.n	8009964 <__gethex+0x68>
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	d1c7      	bne.n	8009996 <__gethex+0x9a>
 8009a06:	4627      	mov	r7, r4
 8009a08:	e7c7      	b.n	800999a <__gethex+0x9e>
 8009a0a:	464e      	mov	r6, r9
 8009a0c:	462f      	mov	r7, r5
 8009a0e:	2501      	movs	r5, #1
 8009a10:	e7c3      	b.n	800999a <__gethex+0x9e>
 8009a12:	2400      	movs	r4, #0
 8009a14:	1cb1      	adds	r1, r6, #2
 8009a16:	e7cc      	b.n	80099b2 <__gethex+0xb6>
 8009a18:	2401      	movs	r4, #1
 8009a1a:	e7fb      	b.n	8009a14 <__gethex+0x118>
 8009a1c:	fb03 0002 	mla	r0, r3, r2, r0
 8009a20:	e7ce      	b.n	80099c0 <__gethex+0xc4>
 8009a22:	4631      	mov	r1, r6
 8009a24:	e7de      	b.n	80099e4 <__gethex+0xe8>
 8009a26:	eba6 0309 	sub.w	r3, r6, r9
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	2b07      	cmp	r3, #7
 8009a30:	dc0a      	bgt.n	8009a48 <__gethex+0x14c>
 8009a32:	9801      	ldr	r0, [sp, #4]
 8009a34:	f7fe f8b8 	bl	8007ba8 <_Balloc>
 8009a38:	4604      	mov	r4, r0
 8009a3a:	b940      	cbnz	r0, 8009a4e <__gethex+0x152>
 8009a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009bb0 <__gethex+0x2b4>)
 8009a3e:	4602      	mov	r2, r0
 8009a40:	21e4      	movs	r1, #228	@ 0xe4
 8009a42:	485c      	ldr	r0, [pc, #368]	@ (8009bb4 <__gethex+0x2b8>)
 8009a44:	f7ff fec0 	bl	80097c8 <__assert_func>
 8009a48:	3101      	adds	r1, #1
 8009a4a:	105b      	asrs	r3, r3, #1
 8009a4c:	e7ef      	b.n	8009a2e <__gethex+0x132>
 8009a4e:	f100 0a14 	add.w	sl, r0, #20
 8009a52:	2300      	movs	r3, #0
 8009a54:	4655      	mov	r5, sl
 8009a56:	469b      	mov	fp, r3
 8009a58:	45b1      	cmp	r9, r6
 8009a5a:	d337      	bcc.n	8009acc <__gethex+0x1d0>
 8009a5c:	f845 bb04 	str.w	fp, [r5], #4
 8009a60:	eba5 050a 	sub.w	r5, r5, sl
 8009a64:	10ad      	asrs	r5, r5, #2
 8009a66:	6125      	str	r5, [r4, #16]
 8009a68:	4658      	mov	r0, fp
 8009a6a:	f7fe f98f 	bl	8007d8c <__hi0bits>
 8009a6e:	016d      	lsls	r5, r5, #5
 8009a70:	f8d8 6000 	ldr.w	r6, [r8]
 8009a74:	1a2d      	subs	r5, r5, r0
 8009a76:	42b5      	cmp	r5, r6
 8009a78:	dd54      	ble.n	8009b24 <__gethex+0x228>
 8009a7a:	1bad      	subs	r5, r5, r6
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7fe fd23 	bl	80084ca <__any_on>
 8009a84:	4681      	mov	r9, r0
 8009a86:	b178      	cbz	r0, 8009aa8 <__gethex+0x1ac>
 8009a88:	1e6b      	subs	r3, r5, #1
 8009a8a:	1159      	asrs	r1, r3, #5
 8009a8c:	f003 021f 	and.w	r2, r3, #31
 8009a90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a94:	f04f 0901 	mov.w	r9, #1
 8009a98:	fa09 f202 	lsl.w	r2, r9, r2
 8009a9c:	420a      	tst	r2, r1
 8009a9e:	d003      	beq.n	8009aa8 <__gethex+0x1ac>
 8009aa0:	454b      	cmp	r3, r9
 8009aa2:	dc36      	bgt.n	8009b12 <__gethex+0x216>
 8009aa4:	f04f 0902 	mov.w	r9, #2
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7ff febe 	bl	800982c <rshift>
 8009ab0:	442f      	add	r7, r5
 8009ab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ab6:	42bb      	cmp	r3, r7
 8009ab8:	da42      	bge.n	8009b40 <__gethex+0x244>
 8009aba:	9801      	ldr	r0, [sp, #4]
 8009abc:	4621      	mov	r1, r4
 8009abe:	f7fe f8b3 	bl	8007c28 <_Bfree>
 8009ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	25a3      	movs	r5, #163	@ 0xa3
 8009aca:	e793      	b.n	80099f4 <__gethex+0xf8>
 8009acc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ad0:	2a2e      	cmp	r2, #46	@ 0x2e
 8009ad2:	d012      	beq.n	8009afa <__gethex+0x1fe>
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d104      	bne.n	8009ae2 <__gethex+0x1e6>
 8009ad8:	f845 bb04 	str.w	fp, [r5], #4
 8009adc:	f04f 0b00 	mov.w	fp, #0
 8009ae0:	465b      	mov	r3, fp
 8009ae2:	7830      	ldrb	r0, [r6, #0]
 8009ae4:	9303      	str	r3, [sp, #12]
 8009ae6:	f7ff fef3 	bl	80098d0 <__hexdig_fun>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	f000 000f 	and.w	r0, r0, #15
 8009af0:	4098      	lsls	r0, r3
 8009af2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009af6:	3304      	adds	r3, #4
 8009af8:	e7ae      	b.n	8009a58 <__gethex+0x15c>
 8009afa:	45b1      	cmp	r9, r6
 8009afc:	d8ea      	bhi.n	8009ad4 <__gethex+0x1d8>
 8009afe:	492b      	ldr	r1, [pc, #172]	@ (8009bac <__gethex+0x2b0>)
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff fe05 	bl	8009714 <strncmp>
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1e1      	bne.n	8009ad4 <__gethex+0x1d8>
 8009b10:	e7a2      	b.n	8009a58 <__gethex+0x15c>
 8009b12:	1ea9      	subs	r1, r5, #2
 8009b14:	4620      	mov	r0, r4
 8009b16:	f7fe fcd8 	bl	80084ca <__any_on>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d0c2      	beq.n	8009aa4 <__gethex+0x1a8>
 8009b1e:	f04f 0903 	mov.w	r9, #3
 8009b22:	e7c1      	b.n	8009aa8 <__gethex+0x1ac>
 8009b24:	da09      	bge.n	8009b3a <__gethex+0x23e>
 8009b26:	1b75      	subs	r5, r6, r5
 8009b28:	4621      	mov	r1, r4
 8009b2a:	9801      	ldr	r0, [sp, #4]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	f7fe fa93 	bl	8008058 <__lshift>
 8009b32:	1b7f      	subs	r7, r7, r5
 8009b34:	4604      	mov	r4, r0
 8009b36:	f100 0a14 	add.w	sl, r0, #20
 8009b3a:	f04f 0900 	mov.w	r9, #0
 8009b3e:	e7b8      	b.n	8009ab2 <__gethex+0x1b6>
 8009b40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b44:	42bd      	cmp	r5, r7
 8009b46:	dd6f      	ble.n	8009c28 <__gethex+0x32c>
 8009b48:	1bed      	subs	r5, r5, r7
 8009b4a:	42ae      	cmp	r6, r5
 8009b4c:	dc34      	bgt.n	8009bb8 <__gethex+0x2bc>
 8009b4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d022      	beq.n	8009b9c <__gethex+0x2a0>
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d024      	beq.n	8009ba4 <__gethex+0x2a8>
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d115      	bne.n	8009b8a <__gethex+0x28e>
 8009b5e:	42ae      	cmp	r6, r5
 8009b60:	d113      	bne.n	8009b8a <__gethex+0x28e>
 8009b62:	2e01      	cmp	r6, #1
 8009b64:	d10b      	bne.n	8009b7e <__gethex+0x282>
 8009b66:	9a02      	ldr	r2, [sp, #8]
 8009b68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	6123      	str	r3, [r4, #16]
 8009b72:	f8ca 3000 	str.w	r3, [sl]
 8009b76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b78:	2562      	movs	r5, #98	@ 0x62
 8009b7a:	601c      	str	r4, [r3, #0]
 8009b7c:	e73a      	b.n	80099f4 <__gethex+0xf8>
 8009b7e:	1e71      	subs	r1, r6, #1
 8009b80:	4620      	mov	r0, r4
 8009b82:	f7fe fca2 	bl	80084ca <__any_on>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d1ed      	bne.n	8009b66 <__gethex+0x26a>
 8009b8a:	9801      	ldr	r0, [sp, #4]
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	f7fe f84b 	bl	8007c28 <_Bfree>
 8009b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b94:	2300      	movs	r3, #0
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	2550      	movs	r5, #80	@ 0x50
 8009b9a:	e72b      	b.n	80099f4 <__gethex+0xf8>
 8009b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f3      	bne.n	8009b8a <__gethex+0x28e>
 8009ba2:	e7e0      	b.n	8009b66 <__gethex+0x26a>
 8009ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1dd      	bne.n	8009b66 <__gethex+0x26a>
 8009baa:	e7ee      	b.n	8009b8a <__gethex+0x28e>
 8009bac:	0800b640 	.word	0x0800b640
 8009bb0:	0800b4d9 	.word	0x0800b4d9
 8009bb4:	0800b7ee 	.word	0x0800b7ee
 8009bb8:	1e6f      	subs	r7, r5, #1
 8009bba:	f1b9 0f00 	cmp.w	r9, #0
 8009bbe:	d130      	bne.n	8009c22 <__gethex+0x326>
 8009bc0:	b127      	cbz	r7, 8009bcc <__gethex+0x2d0>
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f7fe fc80 	bl	80084ca <__any_on>
 8009bca:	4681      	mov	r9, r0
 8009bcc:	117a      	asrs	r2, r7, #5
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009bd4:	f007 071f 	and.w	r7, r7, #31
 8009bd8:	40bb      	lsls	r3, r7
 8009bda:	4213      	tst	r3, r2
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4620      	mov	r0, r4
 8009be0:	bf18      	it	ne
 8009be2:	f049 0902 	orrne.w	r9, r9, #2
 8009be6:	f7ff fe21 	bl	800982c <rshift>
 8009bea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009bee:	1b76      	subs	r6, r6, r5
 8009bf0:	2502      	movs	r5, #2
 8009bf2:	f1b9 0f00 	cmp.w	r9, #0
 8009bf6:	d047      	beq.n	8009c88 <__gethex+0x38c>
 8009bf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d015      	beq.n	8009c2c <__gethex+0x330>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d017      	beq.n	8009c34 <__gethex+0x338>
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d109      	bne.n	8009c1c <__gethex+0x320>
 8009c08:	f019 0f02 	tst.w	r9, #2
 8009c0c:	d006      	beq.n	8009c1c <__gethex+0x320>
 8009c0e:	f8da 3000 	ldr.w	r3, [sl]
 8009c12:	ea49 0903 	orr.w	r9, r9, r3
 8009c16:	f019 0f01 	tst.w	r9, #1
 8009c1a:	d10e      	bne.n	8009c3a <__gethex+0x33e>
 8009c1c:	f045 0510 	orr.w	r5, r5, #16
 8009c20:	e032      	b.n	8009c88 <__gethex+0x38c>
 8009c22:	f04f 0901 	mov.w	r9, #1
 8009c26:	e7d1      	b.n	8009bcc <__gethex+0x2d0>
 8009c28:	2501      	movs	r5, #1
 8009c2a:	e7e2      	b.n	8009bf2 <__gethex+0x2f6>
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2e:	f1c3 0301 	rsb	r3, r3, #1
 8009c32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0f0      	beq.n	8009c1c <__gethex+0x320>
 8009c3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c3e:	f104 0314 	add.w	r3, r4, #20
 8009c42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c4a:	f04f 0c00 	mov.w	ip, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c58:	d01b      	beq.n	8009c92 <__gethex+0x396>
 8009c5a:	3201      	adds	r2, #1
 8009c5c:	6002      	str	r2, [r0, #0]
 8009c5e:	2d02      	cmp	r5, #2
 8009c60:	f104 0314 	add.w	r3, r4, #20
 8009c64:	d13c      	bne.n	8009ce0 <__gethex+0x3e4>
 8009c66:	f8d8 2000 	ldr.w	r2, [r8]
 8009c6a:	3a01      	subs	r2, #1
 8009c6c:	42b2      	cmp	r2, r6
 8009c6e:	d109      	bne.n	8009c84 <__gethex+0x388>
 8009c70:	1171      	asrs	r1, r6, #5
 8009c72:	2201      	movs	r2, #1
 8009c74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c78:	f006 061f 	and.w	r6, r6, #31
 8009c7c:	fa02 f606 	lsl.w	r6, r2, r6
 8009c80:	421e      	tst	r6, r3
 8009c82:	d13a      	bne.n	8009cfa <__gethex+0x3fe>
 8009c84:	f045 0520 	orr.w	r5, r5, #32
 8009c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c8a:	601c      	str	r4, [r3, #0]
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	601f      	str	r7, [r3, #0]
 8009c90:	e6b0      	b.n	80099f4 <__gethex+0xf8>
 8009c92:	4299      	cmp	r1, r3
 8009c94:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c98:	d8d9      	bhi.n	8009c4e <__gethex+0x352>
 8009c9a:	68a3      	ldr	r3, [r4, #8]
 8009c9c:	459b      	cmp	fp, r3
 8009c9e:	db17      	blt.n	8009cd0 <__gethex+0x3d4>
 8009ca0:	6861      	ldr	r1, [r4, #4]
 8009ca2:	9801      	ldr	r0, [sp, #4]
 8009ca4:	3101      	adds	r1, #1
 8009ca6:	f7fd ff7f 	bl	8007ba8 <_Balloc>
 8009caa:	4681      	mov	r9, r0
 8009cac:	b918      	cbnz	r0, 8009cb6 <__gethex+0x3ba>
 8009cae:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <__gethex+0x41c>)
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	2184      	movs	r1, #132	@ 0x84
 8009cb4:	e6c5      	b.n	8009a42 <__gethex+0x146>
 8009cb6:	6922      	ldr	r2, [r4, #16]
 8009cb8:	3202      	adds	r2, #2
 8009cba:	f104 010c 	add.w	r1, r4, #12
 8009cbe:	0092      	lsls	r2, r2, #2
 8009cc0:	300c      	adds	r0, #12
 8009cc2:	f7ff fd6b 	bl	800979c <memcpy>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	9801      	ldr	r0, [sp, #4]
 8009cca:	f7fd ffad 	bl	8007c28 <_Bfree>
 8009cce:	464c      	mov	r4, r9
 8009cd0:	6923      	ldr	r3, [r4, #16]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cd8:	6122      	str	r2, [r4, #16]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	615a      	str	r2, [r3, #20]
 8009cde:	e7be      	b.n	8009c5e <__gethex+0x362>
 8009ce0:	6922      	ldr	r2, [r4, #16]
 8009ce2:	455a      	cmp	r2, fp
 8009ce4:	dd0b      	ble.n	8009cfe <__gethex+0x402>
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7ff fd9f 	bl	800982c <rshift>
 8009cee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cf2:	3701      	adds	r7, #1
 8009cf4:	42bb      	cmp	r3, r7
 8009cf6:	f6ff aee0 	blt.w	8009aba <__gethex+0x1be>
 8009cfa:	2501      	movs	r5, #1
 8009cfc:	e7c2      	b.n	8009c84 <__gethex+0x388>
 8009cfe:	f016 061f 	ands.w	r6, r6, #31
 8009d02:	d0fa      	beq.n	8009cfa <__gethex+0x3fe>
 8009d04:	4453      	add	r3, sl
 8009d06:	f1c6 0620 	rsb	r6, r6, #32
 8009d0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d0e:	f7fe f83d 	bl	8007d8c <__hi0bits>
 8009d12:	42b0      	cmp	r0, r6
 8009d14:	dbe7      	blt.n	8009ce6 <__gethex+0x3ea>
 8009d16:	e7f0      	b.n	8009cfa <__gethex+0x3fe>
 8009d18:	0800b4d9 	.word	0x0800b4d9

08009d1c <L_shift>:
 8009d1c:	f1c2 0208 	rsb	r2, r2, #8
 8009d20:	0092      	lsls	r2, r2, #2
 8009d22:	b570      	push	{r4, r5, r6, lr}
 8009d24:	f1c2 0620 	rsb	r6, r2, #32
 8009d28:	6843      	ldr	r3, [r0, #4]
 8009d2a:	6804      	ldr	r4, [r0, #0]
 8009d2c:	fa03 f506 	lsl.w	r5, r3, r6
 8009d30:	432c      	orrs	r4, r5
 8009d32:	40d3      	lsrs	r3, r2
 8009d34:	6004      	str	r4, [r0, #0]
 8009d36:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d3a:	4288      	cmp	r0, r1
 8009d3c:	d3f4      	bcc.n	8009d28 <L_shift+0xc>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}

08009d40 <__match>:
 8009d40:	b530      	push	{r4, r5, lr}
 8009d42:	6803      	ldr	r3, [r0, #0]
 8009d44:	3301      	adds	r3, #1
 8009d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d4a:	b914      	cbnz	r4, 8009d52 <__match+0x12>
 8009d4c:	6003      	str	r3, [r0, #0]
 8009d4e:	2001      	movs	r0, #1
 8009d50:	bd30      	pop	{r4, r5, pc}
 8009d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009d5a:	2d19      	cmp	r5, #25
 8009d5c:	bf98      	it	ls
 8009d5e:	3220      	addls	r2, #32
 8009d60:	42a2      	cmp	r2, r4
 8009d62:	d0f0      	beq.n	8009d46 <__match+0x6>
 8009d64:	2000      	movs	r0, #0
 8009d66:	e7f3      	b.n	8009d50 <__match+0x10>

08009d68 <__hexnan>:
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	680b      	ldr	r3, [r1, #0]
 8009d6e:	6801      	ldr	r1, [r0, #0]
 8009d70:	115e      	asrs	r6, r3, #5
 8009d72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d76:	f013 031f 	ands.w	r3, r3, #31
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	bf18      	it	ne
 8009d7e:	3604      	addne	r6, #4
 8009d80:	2500      	movs	r5, #0
 8009d82:	1f37      	subs	r7, r6, #4
 8009d84:	4682      	mov	sl, r0
 8009d86:	4690      	mov	r8, r2
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d8e:	46b9      	mov	r9, r7
 8009d90:	463c      	mov	r4, r7
 8009d92:	9502      	str	r5, [sp, #8]
 8009d94:	46ab      	mov	fp, r5
 8009d96:	784a      	ldrb	r2, [r1, #1]
 8009d98:	1c4b      	adds	r3, r1, #1
 8009d9a:	9303      	str	r3, [sp, #12]
 8009d9c:	b342      	cbz	r2, 8009df0 <__hexnan+0x88>
 8009d9e:	4610      	mov	r0, r2
 8009da0:	9105      	str	r1, [sp, #20]
 8009da2:	9204      	str	r2, [sp, #16]
 8009da4:	f7ff fd94 	bl	80098d0 <__hexdig_fun>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d151      	bne.n	8009e50 <__hexnan+0xe8>
 8009dac:	9a04      	ldr	r2, [sp, #16]
 8009dae:	9905      	ldr	r1, [sp, #20]
 8009db0:	2a20      	cmp	r2, #32
 8009db2:	d818      	bhi.n	8009de6 <__hexnan+0x7e>
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	459b      	cmp	fp, r3
 8009db8:	dd13      	ble.n	8009de2 <__hexnan+0x7a>
 8009dba:	454c      	cmp	r4, r9
 8009dbc:	d206      	bcs.n	8009dcc <__hexnan+0x64>
 8009dbe:	2d07      	cmp	r5, #7
 8009dc0:	dc04      	bgt.n	8009dcc <__hexnan+0x64>
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f7ff ffa8 	bl	8009d1c <L_shift>
 8009dcc:	4544      	cmp	r4, r8
 8009dce:	d952      	bls.n	8009e76 <__hexnan+0x10e>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f1a4 0904 	sub.w	r9, r4, #4
 8009dd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dda:	f8cd b008 	str.w	fp, [sp, #8]
 8009dde:	464c      	mov	r4, r9
 8009de0:	461d      	mov	r5, r3
 8009de2:	9903      	ldr	r1, [sp, #12]
 8009de4:	e7d7      	b.n	8009d96 <__hexnan+0x2e>
 8009de6:	2a29      	cmp	r2, #41	@ 0x29
 8009de8:	d157      	bne.n	8009e9a <__hexnan+0x132>
 8009dea:	3102      	adds	r1, #2
 8009dec:	f8ca 1000 	str.w	r1, [sl]
 8009df0:	f1bb 0f00 	cmp.w	fp, #0
 8009df4:	d051      	beq.n	8009e9a <__hexnan+0x132>
 8009df6:	454c      	cmp	r4, r9
 8009df8:	d206      	bcs.n	8009e08 <__hexnan+0xa0>
 8009dfa:	2d07      	cmp	r5, #7
 8009dfc:	dc04      	bgt.n	8009e08 <__hexnan+0xa0>
 8009dfe:	462a      	mov	r2, r5
 8009e00:	4649      	mov	r1, r9
 8009e02:	4620      	mov	r0, r4
 8009e04:	f7ff ff8a 	bl	8009d1c <L_shift>
 8009e08:	4544      	cmp	r4, r8
 8009e0a:	d936      	bls.n	8009e7a <__hexnan+0x112>
 8009e0c:	f1a8 0204 	sub.w	r2, r8, #4
 8009e10:	4623      	mov	r3, r4
 8009e12:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e16:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e1a:	429f      	cmp	r7, r3
 8009e1c:	d2f9      	bcs.n	8009e12 <__hexnan+0xaa>
 8009e1e:	1b3b      	subs	r3, r7, r4
 8009e20:	f023 0303 	bic.w	r3, r3, #3
 8009e24:	3304      	adds	r3, #4
 8009e26:	3401      	adds	r4, #1
 8009e28:	3e03      	subs	r6, #3
 8009e2a:	42b4      	cmp	r4, r6
 8009e2c:	bf88      	it	hi
 8009e2e:	2304      	movhi	r3, #4
 8009e30:	4443      	add	r3, r8
 8009e32:	2200      	movs	r2, #0
 8009e34:	f843 2b04 	str.w	r2, [r3], #4
 8009e38:	429f      	cmp	r7, r3
 8009e3a:	d2fb      	bcs.n	8009e34 <__hexnan+0xcc>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	b91b      	cbnz	r3, 8009e48 <__hexnan+0xe0>
 8009e40:	4547      	cmp	r7, r8
 8009e42:	d128      	bne.n	8009e96 <__hexnan+0x12e>
 8009e44:	2301      	movs	r3, #1
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	2005      	movs	r0, #5
 8009e4a:	b007      	add	sp, #28
 8009e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e50:	3501      	adds	r5, #1
 8009e52:	2d08      	cmp	r5, #8
 8009e54:	f10b 0b01 	add.w	fp, fp, #1
 8009e58:	dd06      	ble.n	8009e68 <__hexnan+0x100>
 8009e5a:	4544      	cmp	r4, r8
 8009e5c:	d9c1      	bls.n	8009de2 <__hexnan+0x7a>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e64:	2501      	movs	r5, #1
 8009e66:	3c04      	subs	r4, #4
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	f000 000f 	and.w	r0, r0, #15
 8009e6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	e7b5      	b.n	8009de2 <__hexnan+0x7a>
 8009e76:	2508      	movs	r5, #8
 8009e78:	e7b3      	b.n	8009de2 <__hexnan+0x7a>
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0dd      	beq.n	8009e3c <__hexnan+0xd4>
 8009e80:	f1c3 0320 	rsb	r3, r3, #32
 8009e84:	f04f 32ff 	mov.w	r2, #4294967295
 8009e88:	40da      	lsrs	r2, r3
 8009e8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e8e:	4013      	ands	r3, r2
 8009e90:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e94:	e7d2      	b.n	8009e3c <__hexnan+0xd4>
 8009e96:	3f04      	subs	r7, #4
 8009e98:	e7d0      	b.n	8009e3c <__hexnan+0xd4>
 8009e9a:	2004      	movs	r0, #4
 8009e9c:	e7d5      	b.n	8009e4a <__hexnan+0xe2>

08009e9e <__ascii_mbtowc>:
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	b901      	cbnz	r1, 8009ea4 <__ascii_mbtowc+0x6>
 8009ea2:	a901      	add	r1, sp, #4
 8009ea4:	b142      	cbz	r2, 8009eb8 <__ascii_mbtowc+0x1a>
 8009ea6:	b14b      	cbz	r3, 8009ebc <__ascii_mbtowc+0x1e>
 8009ea8:	7813      	ldrb	r3, [r2, #0]
 8009eaa:	600b      	str	r3, [r1, #0]
 8009eac:	7812      	ldrb	r2, [r2, #0]
 8009eae:	1e10      	subs	r0, r2, #0
 8009eb0:	bf18      	it	ne
 8009eb2:	2001      	movne	r0, #1
 8009eb4:	b002      	add	sp, #8
 8009eb6:	4770      	bx	lr
 8009eb8:	4610      	mov	r0, r2
 8009eba:	e7fb      	b.n	8009eb4 <__ascii_mbtowc+0x16>
 8009ebc:	f06f 0001 	mvn.w	r0, #1
 8009ec0:	e7f8      	b.n	8009eb4 <__ascii_mbtowc+0x16>

08009ec2 <_realloc_r>:
 8009ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	4615      	mov	r5, r2
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b921      	cbnz	r1, 8009ed8 <_realloc_r+0x16>
 8009ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	f7fd bddc 	b.w	8007a90 <_malloc_r>
 8009ed8:	b92a      	cbnz	r2, 8009ee6 <_realloc_r+0x24>
 8009eda:	f7fd fd65 	bl	80079a8 <_free_r>
 8009ede:	2400      	movs	r4, #0
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee6:	f000 f840 	bl	8009f6a <_malloc_usable_size_r>
 8009eea:	4285      	cmp	r5, r0
 8009eec:	4606      	mov	r6, r0
 8009eee:	d802      	bhi.n	8009ef6 <_realloc_r+0x34>
 8009ef0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ef4:	d8f4      	bhi.n	8009ee0 <_realloc_r+0x1e>
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	4640      	mov	r0, r8
 8009efa:	f7fd fdc9 	bl	8007a90 <_malloc_r>
 8009efe:	4607      	mov	r7, r0
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d0ec      	beq.n	8009ede <_realloc_r+0x1c>
 8009f04:	42b5      	cmp	r5, r6
 8009f06:	462a      	mov	r2, r5
 8009f08:	4621      	mov	r1, r4
 8009f0a:	bf28      	it	cs
 8009f0c:	4632      	movcs	r2, r6
 8009f0e:	f7ff fc45 	bl	800979c <memcpy>
 8009f12:	4621      	mov	r1, r4
 8009f14:	4640      	mov	r0, r8
 8009f16:	f7fd fd47 	bl	80079a8 <_free_r>
 8009f1a:	463c      	mov	r4, r7
 8009f1c:	e7e0      	b.n	8009ee0 <_realloc_r+0x1e>

08009f1e <__ascii_wctomb>:
 8009f1e:	4603      	mov	r3, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	b141      	cbz	r1, 8009f36 <__ascii_wctomb+0x18>
 8009f24:	2aff      	cmp	r2, #255	@ 0xff
 8009f26:	d904      	bls.n	8009f32 <__ascii_wctomb+0x14>
 8009f28:	228a      	movs	r2, #138	@ 0x8a
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	4770      	bx	lr
 8009f32:	700a      	strb	r2, [r1, #0]
 8009f34:	2001      	movs	r0, #1
 8009f36:	4770      	bx	lr

08009f38 <fiprintf>:
 8009f38:	b40e      	push	{r1, r2, r3}
 8009f3a:	b503      	push	{r0, r1, lr}
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	4805      	ldr	r0, [pc, #20]	@ (8009f58 <fiprintf+0x20>)
 8009f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f46:	6800      	ldr	r0, [r0, #0]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	f000 f83f 	bl	8009fcc <_vfiprintf_r>
 8009f4e:	b002      	add	sp, #8
 8009f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f54:	b003      	add	sp, #12
 8009f56:	4770      	bx	lr
 8009f58:	20000190 	.word	0x20000190

08009f5c <abort>:
 8009f5c:	b508      	push	{r3, lr}
 8009f5e:	2006      	movs	r0, #6
 8009f60:	f000 fa08 	bl	800a374 <raise>
 8009f64:	2001      	movs	r0, #1
 8009f66:	f7f7 fd75 	bl	8001a54 <_exit>

08009f6a <_malloc_usable_size_r>:
 8009f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6e:	1f18      	subs	r0, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bfbc      	itt	lt
 8009f74:	580b      	ldrlt	r3, [r1, r0]
 8009f76:	18c0      	addlt	r0, r0, r3
 8009f78:	4770      	bx	lr

08009f7a <__sfputc_r>:
 8009f7a:	6893      	ldr	r3, [r2, #8]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	b410      	push	{r4}
 8009f82:	6093      	str	r3, [r2, #8]
 8009f84:	da08      	bge.n	8009f98 <__sfputc_r+0x1e>
 8009f86:	6994      	ldr	r4, [r2, #24]
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	db01      	blt.n	8009f90 <__sfputc_r+0x16>
 8009f8c:	290a      	cmp	r1, #10
 8009f8e:	d103      	bne.n	8009f98 <__sfputc_r+0x1e>
 8009f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f94:	f000 b932 	b.w	800a1fc <__swbuf_r>
 8009f98:	6813      	ldr	r3, [r2, #0]
 8009f9a:	1c58      	adds	r0, r3, #1
 8009f9c:	6010      	str	r0, [r2, #0]
 8009f9e:	7019      	strb	r1, [r3, #0]
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <__sfputs_r>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	4606      	mov	r6, r0
 8009fac:	460f      	mov	r7, r1
 8009fae:	4614      	mov	r4, r2
 8009fb0:	18d5      	adds	r5, r2, r3
 8009fb2:	42ac      	cmp	r4, r5
 8009fb4:	d101      	bne.n	8009fba <__sfputs_r+0x12>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e007      	b.n	8009fca <__sfputs_r+0x22>
 8009fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbe:	463a      	mov	r2, r7
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff ffda 	bl	8009f7a <__sfputc_r>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d1f3      	bne.n	8009fb2 <__sfputs_r+0xa>
 8009fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fcc <_vfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	b09d      	sub	sp, #116	@ 0x74
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	4606      	mov	r6, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_vfiprintf_r+0x18>
 8009fdc:	6a03      	ldr	r3, [r0, #32]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_vfiprintf_r+0x18>
 8009fe0:	f7fc fcc2 	bl	8006968 <__sinit>
 8009fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fe6:	07d9      	lsls	r1, r3, #31
 8009fe8:	d405      	bmi.n	8009ff6 <_vfiprintf_r+0x2a>
 8009fea:	89ab      	ldrh	r3, [r5, #12]
 8009fec:	059a      	lsls	r2, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <_vfiprintf_r+0x2a>
 8009ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ff2:	f7fc fe84 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	071b      	lsls	r3, r3, #28
 8009ffa:	d501      	bpl.n	800a000 <_vfiprintf_r+0x34>
 8009ffc:	692b      	ldr	r3, [r5, #16]
 8009ffe:	b99b      	cbnz	r3, 800a028 <_vfiprintf_r+0x5c>
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f000 f938 	bl	800a278 <__swsetup_r>
 800a008:	b170      	cbz	r0, 800a028 <_vfiprintf_r+0x5c>
 800a00a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00c:	07dc      	lsls	r4, r3, #31
 800a00e:	d504      	bpl.n	800a01a <_vfiprintf_r+0x4e>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	b01d      	add	sp, #116	@ 0x74
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	0598      	lsls	r0, r3, #22
 800a01e:	d4f7      	bmi.n	800a010 <_vfiprintf_r+0x44>
 800a020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a022:	f7fc fe6d 	bl	8006d00 <__retarget_lock_release_recursive>
 800a026:	e7f3      	b.n	800a010 <_vfiprintf_r+0x44>
 800a028:	2300      	movs	r3, #0
 800a02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02c:	2320      	movs	r3, #32
 800a02e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a032:	f8cd 800c 	str.w	r8, [sp, #12]
 800a036:	2330      	movs	r3, #48	@ 0x30
 800a038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1e8 <_vfiprintf_r+0x21c>
 800a03c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a040:	f04f 0901 	mov.w	r9, #1
 800a044:	4623      	mov	r3, r4
 800a046:	469a      	mov	sl, r3
 800a048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a04c:	b10a      	cbz	r2, 800a052 <_vfiprintf_r+0x86>
 800a04e:	2a25      	cmp	r2, #37	@ 0x25
 800a050:	d1f9      	bne.n	800a046 <_vfiprintf_r+0x7a>
 800a052:	ebba 0b04 	subs.w	fp, sl, r4
 800a056:	d00b      	beq.n	800a070 <_vfiprintf_r+0xa4>
 800a058:	465b      	mov	r3, fp
 800a05a:	4622      	mov	r2, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ffa2 	bl	8009fa8 <__sfputs_r>
 800a064:	3001      	adds	r0, #1
 800a066:	f000 80a7 	beq.w	800a1b8 <_vfiprintf_r+0x1ec>
 800a06a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a06c:	445a      	add	r2, fp
 800a06e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 809f 	beq.w	800a1b8 <_vfiprintf_r+0x1ec>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	9307      	str	r3, [sp, #28]
 800a08c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a090:	931a      	str	r3, [sp, #104]	@ 0x68
 800a092:	4654      	mov	r4, sl
 800a094:	2205      	movs	r2, #5
 800a096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09a:	4853      	ldr	r0, [pc, #332]	@ (800a1e8 <_vfiprintf_r+0x21c>)
 800a09c:	f7f6 f8c8 	bl	8000230 <memchr>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	b9d8      	cbnz	r0, 800a0dc <_vfiprintf_r+0x110>
 800a0a4:	06d1      	lsls	r1, r2, #27
 800a0a6:	bf44      	itt	mi
 800a0a8:	2320      	movmi	r3, #32
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ae:	0713      	lsls	r3, r2, #28
 800a0b0:	bf44      	itt	mi
 800a0b2:	232b      	movmi	r3, #43	@ 0x2b
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0be:	d015      	beq.n	800a0ec <_vfiprintf_r+0x120>
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	4654      	mov	r4, sl
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f04f 0c0a 	mov.w	ip, #10
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d0:	3b30      	subs	r3, #48	@ 0x30
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d94b      	bls.n	800a16e <_vfiprintf_r+0x1a2>
 800a0d6:	b1b0      	cbz	r0, 800a106 <_vfiprintf_r+0x13a>
 800a0d8:	9207      	str	r2, [sp, #28]
 800a0da:	e014      	b.n	800a106 <_vfiprintf_r+0x13a>
 800a0dc:	eba0 0308 	sub.w	r3, r0, r8
 800a0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	46a2      	mov	sl, r4
 800a0ea:	e7d2      	b.n	800a092 <_vfiprintf_r+0xc6>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1d19      	adds	r1, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bfbb      	ittet	lt
 800a0f8:	425b      	neglt	r3, r3
 800a0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a0fe:	9307      	strge	r3, [sp, #28]
 800a100:	9307      	strlt	r3, [sp, #28]
 800a102:	bfb8      	it	lt
 800a104:	9204      	strlt	r2, [sp, #16]
 800a106:	7823      	ldrb	r3, [r4, #0]
 800a108:	2b2e      	cmp	r3, #46	@ 0x2e
 800a10a:	d10a      	bne.n	800a122 <_vfiprintf_r+0x156>
 800a10c:	7863      	ldrb	r3, [r4, #1]
 800a10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a110:	d132      	bne.n	800a178 <_vfiprintf_r+0x1ac>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	9203      	str	r2, [sp, #12]
 800a11a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a11e:	3402      	adds	r4, #2
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1f8 <_vfiprintf_r+0x22c>
 800a126:	7821      	ldrb	r1, [r4, #0]
 800a128:	2203      	movs	r2, #3
 800a12a:	4650      	mov	r0, sl
 800a12c:	f7f6 f880 	bl	8000230 <memchr>
 800a130:	b138      	cbz	r0, 800a142 <_vfiprintf_r+0x176>
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	eba0 000a 	sub.w	r0, r0, sl
 800a138:	2240      	movs	r2, #64	@ 0x40
 800a13a:	4082      	lsls	r2, r0
 800a13c:	4313      	orrs	r3, r2
 800a13e:	3401      	adds	r4, #1
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4829      	ldr	r0, [pc, #164]	@ (800a1ec <_vfiprintf_r+0x220>)
 800a148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a14c:	2206      	movs	r2, #6
 800a14e:	f7f6 f86f 	bl	8000230 <memchr>
 800a152:	2800      	cmp	r0, #0
 800a154:	d03f      	beq.n	800a1d6 <_vfiprintf_r+0x20a>
 800a156:	4b26      	ldr	r3, [pc, #152]	@ (800a1f0 <_vfiprintf_r+0x224>)
 800a158:	bb1b      	cbnz	r3, 800a1a2 <_vfiprintf_r+0x1d6>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	3307      	adds	r3, #7
 800a15e:	f023 0307 	bic.w	r3, r3, #7
 800a162:	3308      	adds	r3, #8
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	443b      	add	r3, r7
 800a16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16c:	e76a      	b.n	800a044 <_vfiprintf_r+0x78>
 800a16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a172:	460c      	mov	r4, r1
 800a174:	2001      	movs	r0, #1
 800a176:	e7a8      	b.n	800a0ca <_vfiprintf_r+0xfe>
 800a178:	2300      	movs	r3, #0
 800a17a:	3401      	adds	r4, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4619      	mov	r1, r3
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4620      	mov	r0, r4
 800a186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a18a:	3a30      	subs	r2, #48	@ 0x30
 800a18c:	2a09      	cmp	r2, #9
 800a18e:	d903      	bls.n	800a198 <_vfiprintf_r+0x1cc>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0c6      	beq.n	800a122 <_vfiprintf_r+0x156>
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	e7c4      	b.n	800a122 <_vfiprintf_r+0x156>
 800a198:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19c:	4604      	mov	r4, r0
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7f0      	b.n	800a184 <_vfiprintf_r+0x1b8>
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b12      	ldr	r3, [pc, #72]	@ (800a1f4 <_vfiprintf_r+0x228>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7fb fd83 	bl	8005cb8 <_printf_float>
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	1c78      	adds	r0, r7, #1
 800a1b6:	d1d6      	bne.n	800a166 <_vfiprintf_r+0x19a>
 800a1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1ba:	07d9      	lsls	r1, r3, #31
 800a1bc:	d405      	bmi.n	800a1ca <_vfiprintf_r+0x1fe>
 800a1be:	89ab      	ldrh	r3, [r5, #12]
 800a1c0:	059a      	lsls	r2, r3, #22
 800a1c2:	d402      	bmi.n	800a1ca <_vfiprintf_r+0x1fe>
 800a1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1c6:	f7fc fd9b 	bl	8006d00 <__retarget_lock_release_recursive>
 800a1ca:	89ab      	ldrh	r3, [r5, #12]
 800a1cc:	065b      	lsls	r3, r3, #25
 800a1ce:	f53f af1f 	bmi.w	800a010 <_vfiprintf_r+0x44>
 800a1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1d4:	e71e      	b.n	800a014 <_vfiprintf_r+0x48>
 800a1d6:	ab03      	add	r3, sp, #12
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4b05      	ldr	r3, [pc, #20]	@ (800a1f4 <_vfiprintf_r+0x228>)
 800a1de:	a904      	add	r1, sp, #16
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7fc f801 	bl	80061e8 <_printf_i>
 800a1e6:	e7e4      	b.n	800a1b2 <_vfiprintf_r+0x1e6>
 800a1e8:	0800b799 	.word	0x0800b799
 800a1ec:	0800b7a3 	.word	0x0800b7a3
 800a1f0:	08005cb9 	.word	0x08005cb9
 800a1f4:	08009fa9 	.word	0x08009fa9
 800a1f8:	0800b79f 	.word	0x0800b79f

0800a1fc <__swbuf_r>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	460e      	mov	r6, r1
 800a200:	4614      	mov	r4, r2
 800a202:	4605      	mov	r5, r0
 800a204:	b118      	cbz	r0, 800a20e <__swbuf_r+0x12>
 800a206:	6a03      	ldr	r3, [r0, #32]
 800a208:	b90b      	cbnz	r3, 800a20e <__swbuf_r+0x12>
 800a20a:	f7fc fbad 	bl	8006968 <__sinit>
 800a20e:	69a3      	ldr	r3, [r4, #24]
 800a210:	60a3      	str	r3, [r4, #8]
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	071a      	lsls	r2, r3, #28
 800a216:	d501      	bpl.n	800a21c <__swbuf_r+0x20>
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	b943      	cbnz	r3, 800a22e <__swbuf_r+0x32>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f82a 	bl	800a278 <__swsetup_r>
 800a224:	b118      	cbz	r0, 800a22e <__swbuf_r+0x32>
 800a226:	f04f 37ff 	mov.w	r7, #4294967295
 800a22a:	4638      	mov	r0, r7
 800a22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	1a98      	subs	r0, r3, r2
 800a234:	6963      	ldr	r3, [r4, #20]
 800a236:	b2f6      	uxtb	r6, r6
 800a238:	4283      	cmp	r3, r0
 800a23a:	4637      	mov	r7, r6
 800a23c:	dc05      	bgt.n	800a24a <__swbuf_r+0x4e>
 800a23e:	4621      	mov	r1, r4
 800a240:	4628      	mov	r0, r5
 800a242:	f7ff f9c3 	bl	80095cc <_fflush_r>
 800a246:	2800      	cmp	r0, #0
 800a248:	d1ed      	bne.n	800a226 <__swbuf_r+0x2a>
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	60a3      	str	r3, [r4, #8]
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	701e      	strb	r6, [r3, #0]
 800a258:	6962      	ldr	r2, [r4, #20]
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d004      	beq.n	800a26a <__swbuf_r+0x6e>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	07db      	lsls	r3, r3, #31
 800a264:	d5e1      	bpl.n	800a22a <__swbuf_r+0x2e>
 800a266:	2e0a      	cmp	r6, #10
 800a268:	d1df      	bne.n	800a22a <__swbuf_r+0x2e>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4628      	mov	r0, r5
 800a26e:	f7ff f9ad 	bl	80095cc <_fflush_r>
 800a272:	2800      	cmp	r0, #0
 800a274:	d0d9      	beq.n	800a22a <__swbuf_r+0x2e>
 800a276:	e7d6      	b.n	800a226 <__swbuf_r+0x2a>

0800a278 <__swsetup_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4b29      	ldr	r3, [pc, #164]	@ (800a320 <__swsetup_r+0xa8>)
 800a27c:	4605      	mov	r5, r0
 800a27e:	6818      	ldr	r0, [r3, #0]
 800a280:	460c      	mov	r4, r1
 800a282:	b118      	cbz	r0, 800a28c <__swsetup_r+0x14>
 800a284:	6a03      	ldr	r3, [r0, #32]
 800a286:	b90b      	cbnz	r3, 800a28c <__swsetup_r+0x14>
 800a288:	f7fc fb6e 	bl	8006968 <__sinit>
 800a28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a290:	0719      	lsls	r1, r3, #28
 800a292:	d422      	bmi.n	800a2da <__swsetup_r+0x62>
 800a294:	06da      	lsls	r2, r3, #27
 800a296:	d407      	bmi.n	800a2a8 <__swsetup_r+0x30>
 800a298:	2209      	movs	r2, #9
 800a29a:	602a      	str	r2, [r5, #0]
 800a29c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a6:	e033      	b.n	800a310 <__swsetup_r+0x98>
 800a2a8:	0758      	lsls	r0, r3, #29
 800a2aa:	d512      	bpl.n	800a2d2 <__swsetup_r+0x5a>
 800a2ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2ae:	b141      	cbz	r1, 800a2c2 <__swsetup_r+0x4a>
 800a2b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2b4:	4299      	cmp	r1, r3
 800a2b6:	d002      	beq.n	800a2be <__swsetup_r+0x46>
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f7fd fb75 	bl	80079a8 <_free_r>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	f043 0308 	orr.w	r3, r3, #8
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	b94b      	cbnz	r3, 800a2f2 <__swsetup_r+0x7a>
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e8:	d003      	beq.n	800a2f2 <__swsetup_r+0x7a>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f7ff f9bb 	bl	8009668 <__smakebuf_r>
 800a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f6:	f013 0201 	ands.w	r2, r3, #1
 800a2fa:	d00a      	beq.n	800a312 <__swsetup_r+0x9a>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	60a2      	str	r2, [r4, #8]
 800a300:	6962      	ldr	r2, [r4, #20]
 800a302:	4252      	negs	r2, r2
 800a304:	61a2      	str	r2, [r4, #24]
 800a306:	6922      	ldr	r2, [r4, #16]
 800a308:	b942      	cbnz	r2, 800a31c <__swsetup_r+0xa4>
 800a30a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a30e:	d1c5      	bne.n	800a29c <__swsetup_r+0x24>
 800a310:	bd38      	pop	{r3, r4, r5, pc}
 800a312:	0799      	lsls	r1, r3, #30
 800a314:	bf58      	it	pl
 800a316:	6962      	ldrpl	r2, [r4, #20]
 800a318:	60a2      	str	r2, [r4, #8]
 800a31a:	e7f4      	b.n	800a306 <__swsetup_r+0x8e>
 800a31c:	2000      	movs	r0, #0
 800a31e:	e7f7      	b.n	800a310 <__swsetup_r+0x98>
 800a320:	20000190 	.word	0x20000190

0800a324 <_raise_r>:
 800a324:	291f      	cmp	r1, #31
 800a326:	b538      	push	{r3, r4, r5, lr}
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	d904      	bls.n	800a338 <_raise_r+0x14>
 800a32e:	2316      	movs	r3, #22
 800a330:	6003      	str	r3, [r0, #0]
 800a332:	f04f 30ff 	mov.w	r0, #4294967295
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a33a:	b112      	cbz	r2, 800a342 <_raise_r+0x1e>
 800a33c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a340:	b94b      	cbnz	r3, 800a356 <_raise_r+0x32>
 800a342:	4628      	mov	r0, r5
 800a344:	f000 f830 	bl	800a3a8 <_getpid_r>
 800a348:	4622      	mov	r2, r4
 800a34a:	4601      	mov	r1, r0
 800a34c:	4628      	mov	r0, r5
 800a34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a352:	f000 b817 	b.w	800a384 <_kill_r>
 800a356:	2b01      	cmp	r3, #1
 800a358:	d00a      	beq.n	800a370 <_raise_r+0x4c>
 800a35a:	1c59      	adds	r1, r3, #1
 800a35c:	d103      	bne.n	800a366 <_raise_r+0x42>
 800a35e:	2316      	movs	r3, #22
 800a360:	6003      	str	r3, [r0, #0]
 800a362:	2001      	movs	r0, #1
 800a364:	e7e7      	b.n	800a336 <_raise_r+0x12>
 800a366:	2100      	movs	r1, #0
 800a368:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a36c:	4620      	mov	r0, r4
 800a36e:	4798      	blx	r3
 800a370:	2000      	movs	r0, #0
 800a372:	e7e0      	b.n	800a336 <_raise_r+0x12>

0800a374 <raise>:
 800a374:	4b02      	ldr	r3, [pc, #8]	@ (800a380 <raise+0xc>)
 800a376:	4601      	mov	r1, r0
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	f7ff bfd3 	b.w	800a324 <_raise_r>
 800a37e:	bf00      	nop
 800a380:	20000190 	.word	0x20000190

0800a384 <_kill_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	@ (800a3a4 <_kill_r+0x20>)
 800a388:	2300      	movs	r3, #0
 800a38a:	4604      	mov	r4, r0
 800a38c:	4608      	mov	r0, r1
 800a38e:	4611      	mov	r1, r2
 800a390:	602b      	str	r3, [r5, #0]
 800a392:	f7f7 fb4f 	bl	8001a34 <_kill>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d102      	bne.n	800a3a0 <_kill_r+0x1c>
 800a39a:	682b      	ldr	r3, [r5, #0]
 800a39c:	b103      	cbz	r3, 800a3a0 <_kill_r+0x1c>
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	bd38      	pop	{r3, r4, r5, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000c48 	.word	0x20000c48

0800a3a8 <_getpid_r>:
 800a3a8:	f7f7 bb3c 	b.w	8001a24 <_getpid>

0800a3ac <pow>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	ed2d 8b02 	vpush	{d8}
 800a3b2:	eeb0 8a40 	vmov.f32	s16, s0
 800a3b6:	eef0 8a60 	vmov.f32	s17, s1
 800a3ba:	ec55 4b11 	vmov	r4, r5, d1
 800a3be:	f000 f873 	bl	800a4a8 <__ieee754_pow>
 800a3c2:	4622      	mov	r2, r4
 800a3c4:	462b      	mov	r3, r5
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	ec57 6b10 	vmov	r6, r7, d0
 800a3ce:	f7f6 fbdd 	bl	8000b8c <__aeabi_dcmpun>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d13b      	bne.n	800a44e <pow+0xa2>
 800a3d6:	ec51 0b18 	vmov	r0, r1, d8
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f7f6 fba3 	bl	8000b28 <__aeabi_dcmpeq>
 800a3e2:	b1b8      	cbz	r0, 800a414 <pow+0x68>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f6 fb9c 	bl	8000b28 <__aeabi_dcmpeq>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d146      	bne.n	800a482 <pow+0xd6>
 800a3f4:	ec45 4b10 	vmov	d0, r4, r5
 800a3f8:	f000 f848 	bl	800a48c <finite>
 800a3fc:	b338      	cbz	r0, 800a44e <pow+0xa2>
 800a3fe:	2200      	movs	r2, #0
 800a400:	2300      	movs	r3, #0
 800a402:	4620      	mov	r0, r4
 800a404:	4629      	mov	r1, r5
 800a406:	f7f6 fb99 	bl	8000b3c <__aeabi_dcmplt>
 800a40a:	b300      	cbz	r0, 800a44e <pow+0xa2>
 800a40c:	f7fc fc4c 	bl	8006ca8 <__errno>
 800a410:	2322      	movs	r3, #34	@ 0x22
 800a412:	e01b      	b.n	800a44c <pow+0xa0>
 800a414:	ec47 6b10 	vmov	d0, r6, r7
 800a418:	f000 f838 	bl	800a48c <finite>
 800a41c:	b9e0      	cbnz	r0, 800a458 <pow+0xac>
 800a41e:	eeb0 0a48 	vmov.f32	s0, s16
 800a422:	eef0 0a68 	vmov.f32	s1, s17
 800a426:	f000 f831 	bl	800a48c <finite>
 800a42a:	b1a8      	cbz	r0, 800a458 <pow+0xac>
 800a42c:	ec45 4b10 	vmov	d0, r4, r5
 800a430:	f000 f82c 	bl	800a48c <finite>
 800a434:	b180      	cbz	r0, 800a458 <pow+0xac>
 800a436:	4632      	mov	r2, r6
 800a438:	463b      	mov	r3, r7
 800a43a:	4630      	mov	r0, r6
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f6 fba5 	bl	8000b8c <__aeabi_dcmpun>
 800a442:	2800      	cmp	r0, #0
 800a444:	d0e2      	beq.n	800a40c <pow+0x60>
 800a446:	f7fc fc2f 	bl	8006ca8 <__errno>
 800a44a:	2321      	movs	r3, #33	@ 0x21
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	ecbd 8b02 	vpop	{d8}
 800a452:	ec47 6b10 	vmov	d0, r6, r7
 800a456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	4630      	mov	r0, r6
 800a45e:	4639      	mov	r1, r7
 800a460:	f7f6 fb62 	bl	8000b28 <__aeabi_dcmpeq>
 800a464:	2800      	cmp	r0, #0
 800a466:	d0f2      	beq.n	800a44e <pow+0xa2>
 800a468:	eeb0 0a48 	vmov.f32	s0, s16
 800a46c:	eef0 0a68 	vmov.f32	s1, s17
 800a470:	f000 f80c 	bl	800a48c <finite>
 800a474:	2800      	cmp	r0, #0
 800a476:	d0ea      	beq.n	800a44e <pow+0xa2>
 800a478:	ec45 4b10 	vmov	d0, r4, r5
 800a47c:	f000 f806 	bl	800a48c <finite>
 800a480:	e7c3      	b.n	800a40a <pow+0x5e>
 800a482:	4f01      	ldr	r7, [pc, #4]	@ (800a488 <pow+0xdc>)
 800a484:	2600      	movs	r6, #0
 800a486:	e7e2      	b.n	800a44e <pow+0xa2>
 800a488:	3ff00000 	.word	0x3ff00000

0800a48c <finite>:
 800a48c:	b082      	sub	sp, #8
 800a48e:	ed8d 0b00 	vstr	d0, [sp]
 800a492:	9801      	ldr	r0, [sp, #4]
 800a494:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a498:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a49c:	0fc0      	lsrs	r0, r0, #31
 800a49e:	b002      	add	sp, #8
 800a4a0:	4770      	bx	lr
 800a4a2:	0000      	movs	r0, r0
 800a4a4:	0000      	movs	r0, r0
	...

0800a4a8 <__ieee754_pow>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	b091      	sub	sp, #68	@ 0x44
 800a4ae:	ed8d 1b00 	vstr	d1, [sp]
 800a4b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a4b6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a4ba:	ea5a 0001 	orrs.w	r0, sl, r1
 800a4be:	ec57 6b10 	vmov	r6, r7, d0
 800a4c2:	d113      	bne.n	800a4ec <__ieee754_pow+0x44>
 800a4c4:	19b3      	adds	r3, r6, r6
 800a4c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a4ca:	4152      	adcs	r2, r2
 800a4cc:	4298      	cmp	r0, r3
 800a4ce:	4b98      	ldr	r3, [pc, #608]	@ (800a730 <__ieee754_pow+0x288>)
 800a4d0:	4193      	sbcs	r3, r2
 800a4d2:	f080 84ea 	bcs.w	800aeaa <__ieee754_pow+0xa02>
 800a4d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	f7f5 ff05 	bl	80002ec <__adddf3>
 800a4e2:	ec41 0b10 	vmov	d0, r0, r1
 800a4e6:	b011      	add	sp, #68	@ 0x44
 800a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ec:	4a91      	ldr	r2, [pc, #580]	@ (800a734 <__ieee754_pow+0x28c>)
 800a4ee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a4f2:	4590      	cmp	r8, r2
 800a4f4:	463d      	mov	r5, r7
 800a4f6:	4633      	mov	r3, r6
 800a4f8:	d806      	bhi.n	800a508 <__ieee754_pow+0x60>
 800a4fa:	d101      	bne.n	800a500 <__ieee754_pow+0x58>
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	d1ea      	bne.n	800a4d6 <__ieee754_pow+0x2e>
 800a500:	4592      	cmp	sl, r2
 800a502:	d801      	bhi.n	800a508 <__ieee754_pow+0x60>
 800a504:	d10e      	bne.n	800a524 <__ieee754_pow+0x7c>
 800a506:	b169      	cbz	r1, 800a524 <__ieee754_pow+0x7c>
 800a508:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a50c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a510:	431d      	orrs	r5, r3
 800a512:	d1e0      	bne.n	800a4d6 <__ieee754_pow+0x2e>
 800a514:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a518:	18db      	adds	r3, r3, r3
 800a51a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a51e:	4152      	adcs	r2, r2
 800a520:	429d      	cmp	r5, r3
 800a522:	e7d4      	b.n	800a4ce <__ieee754_pow+0x26>
 800a524:	2d00      	cmp	r5, #0
 800a526:	46c3      	mov	fp, r8
 800a528:	da3a      	bge.n	800a5a0 <__ieee754_pow+0xf8>
 800a52a:	4a83      	ldr	r2, [pc, #524]	@ (800a738 <__ieee754_pow+0x290>)
 800a52c:	4592      	cmp	sl, r2
 800a52e:	d84d      	bhi.n	800a5cc <__ieee754_pow+0x124>
 800a530:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a534:	4592      	cmp	sl, r2
 800a536:	f240 84c7 	bls.w	800aec8 <__ieee754_pow+0xa20>
 800a53a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a53e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a542:	2a14      	cmp	r2, #20
 800a544:	dd0f      	ble.n	800a566 <__ieee754_pow+0xbe>
 800a546:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a54a:	fa21 f402 	lsr.w	r4, r1, r2
 800a54e:	fa04 f202 	lsl.w	r2, r4, r2
 800a552:	428a      	cmp	r2, r1
 800a554:	f040 84b8 	bne.w	800aec8 <__ieee754_pow+0xa20>
 800a558:	f004 0401 	and.w	r4, r4, #1
 800a55c:	f1c4 0402 	rsb	r4, r4, #2
 800a560:	2900      	cmp	r1, #0
 800a562:	d158      	bne.n	800a616 <__ieee754_pow+0x16e>
 800a564:	e00e      	b.n	800a584 <__ieee754_pow+0xdc>
 800a566:	2900      	cmp	r1, #0
 800a568:	d154      	bne.n	800a614 <__ieee754_pow+0x16c>
 800a56a:	f1c2 0214 	rsb	r2, r2, #20
 800a56e:	fa4a f402 	asr.w	r4, sl, r2
 800a572:	fa04 f202 	lsl.w	r2, r4, r2
 800a576:	4552      	cmp	r2, sl
 800a578:	f040 84a3 	bne.w	800aec2 <__ieee754_pow+0xa1a>
 800a57c:	f004 0401 	and.w	r4, r4, #1
 800a580:	f1c4 0402 	rsb	r4, r4, #2
 800a584:	4a6d      	ldr	r2, [pc, #436]	@ (800a73c <__ieee754_pow+0x294>)
 800a586:	4592      	cmp	sl, r2
 800a588:	d12e      	bne.n	800a5e8 <__ieee754_pow+0x140>
 800a58a:	f1b9 0f00 	cmp.w	r9, #0
 800a58e:	f280 8494 	bge.w	800aeba <__ieee754_pow+0xa12>
 800a592:	496a      	ldr	r1, [pc, #424]	@ (800a73c <__ieee754_pow+0x294>)
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	2000      	movs	r0, #0
 800a59a:	f7f6 f987 	bl	80008ac <__aeabi_ddiv>
 800a59e:	e7a0      	b.n	800a4e2 <__ieee754_pow+0x3a>
 800a5a0:	2400      	movs	r4, #0
 800a5a2:	bbc1      	cbnz	r1, 800a616 <__ieee754_pow+0x16e>
 800a5a4:	4a63      	ldr	r2, [pc, #396]	@ (800a734 <__ieee754_pow+0x28c>)
 800a5a6:	4592      	cmp	sl, r2
 800a5a8:	d1ec      	bne.n	800a584 <__ieee754_pow+0xdc>
 800a5aa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a5ae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	f000 8479 	beq.w	800aeaa <__ieee754_pow+0xa02>
 800a5b8:	4b61      	ldr	r3, [pc, #388]	@ (800a740 <__ieee754_pow+0x298>)
 800a5ba:	4598      	cmp	r8, r3
 800a5bc:	d908      	bls.n	800a5d0 <__ieee754_pow+0x128>
 800a5be:	f1b9 0f00 	cmp.w	r9, #0
 800a5c2:	f2c0 8476 	blt.w	800aeb2 <__ieee754_pow+0xa0a>
 800a5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ca:	e78a      	b.n	800a4e2 <__ieee754_pow+0x3a>
 800a5cc:	2402      	movs	r4, #2
 800a5ce:	e7e8      	b.n	800a5a2 <__ieee754_pow+0xfa>
 800a5d0:	f1b9 0f00 	cmp.w	r9, #0
 800a5d4:	f04f 0000 	mov.w	r0, #0
 800a5d8:	f04f 0100 	mov.w	r1, #0
 800a5dc:	da81      	bge.n	800a4e2 <__ieee754_pow+0x3a>
 800a5de:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a5e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a5e6:	e77c      	b.n	800a4e2 <__ieee754_pow+0x3a>
 800a5e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a5ec:	d106      	bne.n	800a5fc <__ieee754_pow+0x154>
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	f7f6 f82f 	bl	8000658 <__aeabi_dmul>
 800a5fa:	e772      	b.n	800a4e2 <__ieee754_pow+0x3a>
 800a5fc:	4a51      	ldr	r2, [pc, #324]	@ (800a744 <__ieee754_pow+0x29c>)
 800a5fe:	4591      	cmp	r9, r2
 800a600:	d109      	bne.n	800a616 <__ieee754_pow+0x16e>
 800a602:	2d00      	cmp	r5, #0
 800a604:	db07      	blt.n	800a616 <__ieee754_pow+0x16e>
 800a606:	ec47 6b10 	vmov	d0, r6, r7
 800a60a:	b011      	add	sp, #68	@ 0x44
 800a60c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	f000 bd52 	b.w	800b0b8 <__ieee754_sqrt>
 800a614:	2400      	movs	r4, #0
 800a616:	ec47 6b10 	vmov	d0, r6, r7
 800a61a:	9302      	str	r3, [sp, #8]
 800a61c:	f000 fc88 	bl	800af30 <fabs>
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	ec51 0b10 	vmov	r0, r1, d0
 800a626:	bb53      	cbnz	r3, 800a67e <__ieee754_pow+0x1d6>
 800a628:	4b44      	ldr	r3, [pc, #272]	@ (800a73c <__ieee754_pow+0x294>)
 800a62a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a62e:	429a      	cmp	r2, r3
 800a630:	d002      	beq.n	800a638 <__ieee754_pow+0x190>
 800a632:	f1b8 0f00 	cmp.w	r8, #0
 800a636:	d122      	bne.n	800a67e <__ieee754_pow+0x1d6>
 800a638:	f1b9 0f00 	cmp.w	r9, #0
 800a63c:	da05      	bge.n	800a64a <__ieee754_pow+0x1a2>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	2000      	movs	r0, #0
 800a644:	493d      	ldr	r1, [pc, #244]	@ (800a73c <__ieee754_pow+0x294>)
 800a646:	f7f6 f931 	bl	80008ac <__aeabi_ddiv>
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	f6bf af49 	bge.w	800a4e2 <__ieee754_pow+0x3a>
 800a650:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a654:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a658:	ea58 0804 	orrs.w	r8, r8, r4
 800a65c:	d108      	bne.n	800a670 <__ieee754_pow+0x1c8>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	4610      	mov	r0, r2
 800a664:	4619      	mov	r1, r3
 800a666:	f7f5 fe3f 	bl	80002e8 <__aeabi_dsub>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	e794      	b.n	800a59a <__ieee754_pow+0xf2>
 800a670:	2c01      	cmp	r4, #1
 800a672:	f47f af36 	bne.w	800a4e2 <__ieee754_pow+0x3a>
 800a676:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a67a:	4619      	mov	r1, r3
 800a67c:	e731      	b.n	800a4e2 <__ieee754_pow+0x3a>
 800a67e:	0feb      	lsrs	r3, r5, #31
 800a680:	3b01      	subs	r3, #1
 800a682:	ea53 0204 	orrs.w	r2, r3, r4
 800a686:	d102      	bne.n	800a68e <__ieee754_pow+0x1e6>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	e7e9      	b.n	800a662 <__ieee754_pow+0x1ba>
 800a68e:	3c01      	subs	r4, #1
 800a690:	431c      	orrs	r4, r3
 800a692:	d016      	beq.n	800a6c2 <__ieee754_pow+0x21a>
 800a694:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a720 <__ieee754_pow+0x278>
 800a698:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a69c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6a0:	f240 8112 	bls.w	800a8c8 <__ieee754_pow+0x420>
 800a6a4:	4b28      	ldr	r3, [pc, #160]	@ (800a748 <__ieee754_pow+0x2a0>)
 800a6a6:	459a      	cmp	sl, r3
 800a6a8:	4b25      	ldr	r3, [pc, #148]	@ (800a740 <__ieee754_pow+0x298>)
 800a6aa:	d916      	bls.n	800a6da <__ieee754_pow+0x232>
 800a6ac:	4598      	cmp	r8, r3
 800a6ae:	d80b      	bhi.n	800a6c8 <__ieee754_pow+0x220>
 800a6b0:	f1b9 0f00 	cmp.w	r9, #0
 800a6b4:	da0b      	bge.n	800a6ce <__ieee754_pow+0x226>
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	b011      	add	sp, #68	@ 0x44
 800a6ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6be:	f000 bcf3 	b.w	800b0a8 <__math_oflow>
 800a6c2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a728 <__ieee754_pow+0x280>
 800a6c6:	e7e7      	b.n	800a698 <__ieee754_pow+0x1f0>
 800a6c8:	f1b9 0f00 	cmp.w	r9, #0
 800a6cc:	dcf3      	bgt.n	800a6b6 <__ieee754_pow+0x20e>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	b011      	add	sp, #68	@ 0x44
 800a6d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d6:	f000 bcdf 	b.w	800b098 <__math_uflow>
 800a6da:	4598      	cmp	r8, r3
 800a6dc:	d20c      	bcs.n	800a6f8 <__ieee754_pow+0x250>
 800a6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f7f6 fa29 	bl	8000b3c <__aeabi_dcmplt>
 800a6ea:	3800      	subs	r0, #0
 800a6ec:	bf18      	it	ne
 800a6ee:	2001      	movne	r0, #1
 800a6f0:	f1b9 0f00 	cmp.w	r9, #0
 800a6f4:	daec      	bge.n	800a6d0 <__ieee754_pow+0x228>
 800a6f6:	e7df      	b.n	800a6b8 <__ieee754_pow+0x210>
 800a6f8:	4b10      	ldr	r3, [pc, #64]	@ (800a73c <__ieee754_pow+0x294>)
 800a6fa:	4598      	cmp	r8, r3
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	d924      	bls.n	800a74c <__ieee754_pow+0x2a4>
 800a702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a706:	2300      	movs	r3, #0
 800a708:	f7f6 fa18 	bl	8000b3c <__aeabi_dcmplt>
 800a70c:	3800      	subs	r0, #0
 800a70e:	bf18      	it	ne
 800a710:	2001      	movne	r0, #1
 800a712:	f1b9 0f00 	cmp.w	r9, #0
 800a716:	dccf      	bgt.n	800a6b8 <__ieee754_pow+0x210>
 800a718:	e7da      	b.n	800a6d0 <__ieee754_pow+0x228>
 800a71a:	bf00      	nop
 800a71c:	f3af 8000 	nop.w
 800a720:	00000000 	.word	0x00000000
 800a724:	3ff00000 	.word	0x3ff00000
 800a728:	00000000 	.word	0x00000000
 800a72c:	bff00000 	.word	0xbff00000
 800a730:	fff00000 	.word	0xfff00000
 800a734:	7ff00000 	.word	0x7ff00000
 800a738:	433fffff 	.word	0x433fffff
 800a73c:	3ff00000 	.word	0x3ff00000
 800a740:	3fefffff 	.word	0x3fefffff
 800a744:	3fe00000 	.word	0x3fe00000
 800a748:	43f00000 	.word	0x43f00000
 800a74c:	4b5a      	ldr	r3, [pc, #360]	@ (800a8b8 <__ieee754_pow+0x410>)
 800a74e:	f7f5 fdcb 	bl	80002e8 <__aeabi_dsub>
 800a752:	a351      	add	r3, pc, #324	@ (adr r3, 800a898 <__ieee754_pow+0x3f0>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	f7f5 ff7c 	bl	8000658 <__aeabi_dmul>
 800a760:	a34f      	add	r3, pc, #316	@ (adr r3, 800a8a0 <__ieee754_pow+0x3f8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	4620      	mov	r0, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7f5 ff73 	bl	8000658 <__aeabi_dmul>
 800a772:	4b52      	ldr	r3, [pc, #328]	@ (800a8bc <__ieee754_pow+0x414>)
 800a774:	4682      	mov	sl, r0
 800a776:	468b      	mov	fp, r1
 800a778:	2200      	movs	r2, #0
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f5 ff6b 	bl	8000658 <__aeabi_dmul>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	a148      	add	r1, pc, #288	@ (adr r1, 800a8a8 <__ieee754_pow+0x400>)
 800a788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a78c:	f7f5 fdac 	bl	80002e8 <__aeabi_dsub>
 800a790:	4622      	mov	r2, r4
 800a792:	462b      	mov	r3, r5
 800a794:	f7f5 ff60 	bl	8000658 <__aeabi_dmul>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	2000      	movs	r0, #0
 800a79e:	4948      	ldr	r1, [pc, #288]	@ (800a8c0 <__ieee754_pow+0x418>)
 800a7a0:	f7f5 fda2 	bl	80002e8 <__aeabi_dsub>
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	4689      	mov	r9, r1
 800a7aa:	462b      	mov	r3, r5
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	f7f5 ff52 	bl	8000658 <__aeabi_dmul>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	f7f5 ff4c 	bl	8000658 <__aeabi_dmul>
 800a7c0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a8b0 <__ieee754_pow+0x408>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f7f5 ff47 	bl	8000658 <__aeabi_dmul>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	f7f5 fd89 	bl	80002e8 <__aeabi_dsub>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4680      	mov	r8, r0
 800a7dc:	4689      	mov	r9, r1
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f5 fd83 	bl	80002ec <__adddf3>
 800a7e6:	2400      	movs	r4, #0
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	f7f5 fd7a 	bl	80002e8 <__aeabi_dsub>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f5 fd74 	bl	80002e8 <__aeabi_dsub>
 800a800:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a808:	2300      	movs	r3, #0
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	4652      	mov	r2, sl
 800a816:	465b      	mov	r3, fp
 800a818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a81c:	f7f5 fd64 	bl	80002e8 <__aeabi_dsub>
 800a820:	4622      	mov	r2, r4
 800a822:	462b      	mov	r3, r5
 800a824:	f7f5 ff18 	bl	8000658 <__aeabi_dmul>
 800a828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a82c:	4680      	mov	r8, r0
 800a82e:	4689      	mov	r9, r1
 800a830:	4630      	mov	r0, r6
 800a832:	4639      	mov	r1, r7
 800a834:	f7f5 ff10 	bl	8000658 <__aeabi_dmul>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4640      	mov	r0, r8
 800a83e:	4649      	mov	r1, r9
 800a840:	f7f5 fd54 	bl	80002ec <__adddf3>
 800a844:	4652      	mov	r2, sl
 800a846:	465b      	mov	r3, fp
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	4620      	mov	r0, r4
 800a84e:	4629      	mov	r1, r5
 800a850:	f7f5 ff02 	bl	8000658 <__aeabi_dmul>
 800a854:	460b      	mov	r3, r1
 800a856:	4602      	mov	r2, r0
 800a858:	4680      	mov	r8, r0
 800a85a:	4689      	mov	r9, r1
 800a85c:	4630      	mov	r0, r6
 800a85e:	4639      	mov	r1, r7
 800a860:	f7f5 fd44 	bl	80002ec <__adddf3>
 800a864:	4b17      	ldr	r3, [pc, #92]	@ (800a8c4 <__ieee754_pow+0x41c>)
 800a866:	4299      	cmp	r1, r3
 800a868:	4604      	mov	r4, r0
 800a86a:	460d      	mov	r5, r1
 800a86c:	468a      	mov	sl, r1
 800a86e:	468b      	mov	fp, r1
 800a870:	f340 82ef 	ble.w	800ae52 <__ieee754_pow+0x9aa>
 800a874:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a878:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a87c:	4303      	orrs	r3, r0
 800a87e:	f000 81e8 	beq.w	800ac52 <__ieee754_pow+0x7aa>
 800a882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a886:	2200      	movs	r2, #0
 800a888:	2300      	movs	r3, #0
 800a88a:	f7f6 f957 	bl	8000b3c <__aeabi_dcmplt>
 800a88e:	3800      	subs	r0, #0
 800a890:	bf18      	it	ne
 800a892:	2001      	movne	r0, #1
 800a894:	e710      	b.n	800a6b8 <__ieee754_pow+0x210>
 800a896:	bf00      	nop
 800a898:	60000000 	.word	0x60000000
 800a89c:	3ff71547 	.word	0x3ff71547
 800a8a0:	f85ddf44 	.word	0xf85ddf44
 800a8a4:	3e54ae0b 	.word	0x3e54ae0b
 800a8a8:	55555555 	.word	0x55555555
 800a8ac:	3fd55555 	.word	0x3fd55555
 800a8b0:	652b82fe 	.word	0x652b82fe
 800a8b4:	3ff71547 	.word	0x3ff71547
 800a8b8:	3ff00000 	.word	0x3ff00000
 800a8bc:	3fd00000 	.word	0x3fd00000
 800a8c0:	3fe00000 	.word	0x3fe00000
 800a8c4:	408fffff 	.word	0x408fffff
 800a8c8:	4bd5      	ldr	r3, [pc, #852]	@ (800ac20 <__ieee754_pow+0x778>)
 800a8ca:	402b      	ands	r3, r5
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	b92b      	cbnz	r3, 800a8dc <__ieee754_pow+0x434>
 800a8d0:	4bd4      	ldr	r3, [pc, #848]	@ (800ac24 <__ieee754_pow+0x77c>)
 800a8d2:	f7f5 fec1 	bl	8000658 <__aeabi_dmul>
 800a8d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a8da:	468b      	mov	fp, r1
 800a8dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a8e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a8e4:	4413      	add	r3, r2
 800a8e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8e8:	4bcf      	ldr	r3, [pc, #828]	@ (800ac28 <__ieee754_pow+0x780>)
 800a8ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a8ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a8f2:	459b      	cmp	fp, r3
 800a8f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a8f8:	dd08      	ble.n	800a90c <__ieee754_pow+0x464>
 800a8fa:	4bcc      	ldr	r3, [pc, #816]	@ (800ac2c <__ieee754_pow+0x784>)
 800a8fc:	459b      	cmp	fp, r3
 800a8fe:	f340 81a5 	ble.w	800ac4c <__ieee754_pow+0x7a4>
 800a902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a904:	3301      	adds	r3, #1
 800a906:	930a      	str	r3, [sp, #40]	@ 0x28
 800a908:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a90c:	f04f 0a00 	mov.w	sl, #0
 800a910:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a914:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a916:	4bc6      	ldr	r3, [pc, #792]	@ (800ac30 <__ieee754_pow+0x788>)
 800a918:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a91c:	ed93 7b00 	vldr	d7, [r3]
 800a920:	4629      	mov	r1, r5
 800a922:	ec53 2b17 	vmov	r2, r3, d7
 800a926:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a92a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a92e:	f7f5 fcdb 	bl	80002e8 <__aeabi_dsub>
 800a932:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a93e:	f7f5 fcd5 	bl	80002ec <__adddf3>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	2000      	movs	r0, #0
 800a948:	49ba      	ldr	r1, [pc, #744]	@ (800ac34 <__ieee754_pow+0x78c>)
 800a94a:	f7f5 ffaf 	bl	80008ac <__aeabi_ddiv>
 800a94e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4630      	mov	r0, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	f7f5 fe7d 	bl	8000658 <__aeabi_dmul>
 800a95e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a962:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a966:	106d      	asrs	r5, r5, #1
 800a968:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a96c:	f04f 0b00 	mov.w	fp, #0
 800a970:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a974:	4661      	mov	r1, ip
 800a976:	2200      	movs	r2, #0
 800a978:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a97c:	4658      	mov	r0, fp
 800a97e:	46e1      	mov	r9, ip
 800a980:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a984:	4614      	mov	r4, r2
 800a986:	461d      	mov	r5, r3
 800a988:	f7f5 fe66 	bl	8000658 <__aeabi_dmul>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f5 fca8 	bl	80002e8 <__aeabi_dsub>
 800a998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a99c:	4606      	mov	r6, r0
 800a99e:	460f      	mov	r7, r1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f5 fca0 	bl	80002e8 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9b0:	f7f5 fc9a 	bl	80002e8 <__aeabi_dsub>
 800a9b4:	465a      	mov	r2, fp
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	f7f5 fe4e 	bl	8000658 <__aeabi_dmul>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f5 fc90 	bl	80002e8 <__aeabi_dsub>
 800a9c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9cc:	f7f5 fe44 	bl	8000658 <__aeabi_dmul>
 800a9d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f7f5 fe3c 	bl	8000658 <__aeabi_dmul>
 800a9e0:	a37d      	add	r3, pc, #500	@ (adr r3, 800abd8 <__ieee754_pow+0x730>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	f7f5 fe35 	bl	8000658 <__aeabi_dmul>
 800a9ee:	a37c      	add	r3, pc, #496	@ (adr r3, 800abe0 <__ieee754_pow+0x738>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fc7a 	bl	80002ec <__adddf3>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	f7f5 fe2c 	bl	8000658 <__aeabi_dmul>
 800aa00:	a379      	add	r3, pc, #484	@ (adr r3, 800abe8 <__ieee754_pow+0x740>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fc71 	bl	80002ec <__adddf3>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	f7f5 fe23 	bl	8000658 <__aeabi_dmul>
 800aa12:	a377      	add	r3, pc, #476	@ (adr r3, 800abf0 <__ieee754_pow+0x748>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	f7f5 fc68 	bl	80002ec <__adddf3>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	462b      	mov	r3, r5
 800aa20:	f7f5 fe1a 	bl	8000658 <__aeabi_dmul>
 800aa24:	a374      	add	r3, pc, #464	@ (adr r3, 800abf8 <__ieee754_pow+0x750>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fc5f 	bl	80002ec <__adddf3>
 800aa2e:	4622      	mov	r2, r4
 800aa30:	462b      	mov	r3, r5
 800aa32:	f7f5 fe11 	bl	8000658 <__aeabi_dmul>
 800aa36:	a372      	add	r3, pc, #456	@ (adr r3, 800ac00 <__ieee754_pow+0x758>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f7f5 fc56 	bl	80002ec <__adddf3>
 800aa40:	4622      	mov	r2, r4
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	462b      	mov	r3, r5
 800aa48:	4620      	mov	r0, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	f7f5 fe04 	bl	8000658 <__aeabi_dmul>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4630      	mov	r0, r6
 800aa56:	4639      	mov	r1, r7
 800aa58:	f7f5 fdfe 	bl	8000658 <__aeabi_dmul>
 800aa5c:	465a      	mov	r2, fp
 800aa5e:	4604      	mov	r4, r0
 800aa60:	460d      	mov	r5, r1
 800aa62:	464b      	mov	r3, r9
 800aa64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa68:	f7f5 fc40 	bl	80002ec <__adddf3>
 800aa6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa70:	f7f5 fdf2 	bl	8000658 <__aeabi_dmul>
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f5 fc38 	bl	80002ec <__adddf3>
 800aa7c:	465a      	mov	r2, fp
 800aa7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa82:	464b      	mov	r3, r9
 800aa84:	4658      	mov	r0, fp
 800aa86:	4649      	mov	r1, r9
 800aa88:	f7f5 fde6 	bl	8000658 <__aeabi_dmul>
 800aa8c:	4b6a      	ldr	r3, [pc, #424]	@ (800ac38 <__ieee754_pow+0x790>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4606      	mov	r6, r0
 800aa92:	460f      	mov	r7, r1
 800aa94:	f7f5 fc2a 	bl	80002ec <__adddf3>
 800aa98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa9c:	f7f5 fc26 	bl	80002ec <__adddf3>
 800aaa0:	46d8      	mov	r8, fp
 800aaa2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	465a      	mov	r2, fp
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800aab4:	f7f5 fdd0 	bl	8000658 <__aeabi_dmul>
 800aab8:	465c      	mov	r4, fp
 800aaba:	4680      	mov	r8, r0
 800aabc:	4689      	mov	r9, r1
 800aabe:	4b5e      	ldr	r3, [pc, #376]	@ (800ac38 <__ieee754_pow+0x790>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	4620      	mov	r0, r4
 800aac4:	4629      	mov	r1, r5
 800aac6:	f7f5 fc0f 	bl	80002e8 <__aeabi_dsub>
 800aaca:	4632      	mov	r2, r6
 800aacc:	463b      	mov	r3, r7
 800aace:	f7f5 fc0b 	bl	80002e8 <__aeabi_dsub>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aada:	f7f5 fc05 	bl	80002e8 <__aeabi_dsub>
 800aade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae2:	f7f5 fdb9 	bl	8000658 <__aeabi_dmul>
 800aae6:	4622      	mov	r2, r4
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	462b      	mov	r3, r5
 800aaee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaf2:	f7f5 fdb1 	bl	8000658 <__aeabi_dmul>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fbf5 	bl	80002ec <__adddf3>
 800ab02:	4606      	mov	r6, r0
 800ab04:	460f      	mov	r7, r1
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fbed 	bl	80002ec <__adddf3>
 800ab12:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ab16:	a33c      	add	r3, pc, #240	@ (adr r3, 800ac08 <__ieee754_pow+0x760>)
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ab22:	460d      	mov	r5, r1
 800ab24:	f7f5 fd98 	bl	8000658 <__aeabi_dmul>
 800ab28:	465c      	mov	r4, fp
 800ab2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab2e:	4642      	mov	r2, r8
 800ab30:	464b      	mov	r3, r9
 800ab32:	4620      	mov	r0, r4
 800ab34:	4629      	mov	r1, r5
 800ab36:	f7f5 fbd7 	bl	80002e8 <__aeabi_dsub>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4630      	mov	r0, r6
 800ab40:	4639      	mov	r1, r7
 800ab42:	f7f5 fbd1 	bl	80002e8 <__aeabi_dsub>
 800ab46:	a332      	add	r3, pc, #200	@ (adr r3, 800ac10 <__ieee754_pow+0x768>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f7f5 fd84 	bl	8000658 <__aeabi_dmul>
 800ab50:	a331      	add	r3, pc, #196	@ (adr r3, 800ac18 <__ieee754_pow+0x770>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	4606      	mov	r6, r0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f7f5 fd7b 	bl	8000658 <__aeabi_dmul>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4630      	mov	r0, r6
 800ab68:	4639      	mov	r1, r7
 800ab6a:	f7f5 fbbf 	bl	80002ec <__adddf3>
 800ab6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab70:	4b32      	ldr	r3, [pc, #200]	@ (800ac3c <__ieee754_pow+0x794>)
 800ab72:	4413      	add	r3, r2
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fbb8 	bl	80002ec <__adddf3>
 800ab7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab82:	f7f5 fcff 	bl	8000584 <__aeabi_i2d>
 800ab86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab88:	4b2d      	ldr	r3, [pc, #180]	@ (800ac40 <__ieee754_pow+0x798>)
 800ab8a:	4413      	add	r3, r2
 800ab8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab90:	4606      	mov	r6, r0
 800ab92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab96:	460f      	mov	r7, r1
 800ab98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab9c:	f7f5 fba6 	bl	80002ec <__adddf3>
 800aba0:	4642      	mov	r2, r8
 800aba2:	464b      	mov	r3, r9
 800aba4:	f7f5 fba2 	bl	80002ec <__adddf3>
 800aba8:	4632      	mov	r2, r6
 800abaa:	463b      	mov	r3, r7
 800abac:	f7f5 fb9e 	bl	80002ec <__adddf3>
 800abb0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800abb4:	4632      	mov	r2, r6
 800abb6:	463b      	mov	r3, r7
 800abb8:	4658      	mov	r0, fp
 800abba:	460d      	mov	r5, r1
 800abbc:	f7f5 fb94 	bl	80002e8 <__aeabi_dsub>
 800abc0:	4642      	mov	r2, r8
 800abc2:	464b      	mov	r3, r9
 800abc4:	f7f5 fb90 	bl	80002e8 <__aeabi_dsub>
 800abc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abcc:	f7f5 fb8c 	bl	80002e8 <__aeabi_dsub>
 800abd0:	465c      	mov	r4, fp
 800abd2:	4602      	mov	r2, r0
 800abd4:	e036      	b.n	800ac44 <__ieee754_pow+0x79c>
 800abd6:	bf00      	nop
 800abd8:	4a454eef 	.word	0x4a454eef
 800abdc:	3fca7e28 	.word	0x3fca7e28
 800abe0:	93c9db65 	.word	0x93c9db65
 800abe4:	3fcd864a 	.word	0x3fcd864a
 800abe8:	a91d4101 	.word	0xa91d4101
 800abec:	3fd17460 	.word	0x3fd17460
 800abf0:	518f264d 	.word	0x518f264d
 800abf4:	3fd55555 	.word	0x3fd55555
 800abf8:	db6fabff 	.word	0xdb6fabff
 800abfc:	3fdb6db6 	.word	0x3fdb6db6
 800ac00:	33333303 	.word	0x33333303
 800ac04:	3fe33333 	.word	0x3fe33333
 800ac08:	e0000000 	.word	0xe0000000
 800ac0c:	3feec709 	.word	0x3feec709
 800ac10:	dc3a03fd 	.word	0xdc3a03fd
 800ac14:	3feec709 	.word	0x3feec709
 800ac18:	145b01f5 	.word	0x145b01f5
 800ac1c:	be3e2fe0 	.word	0xbe3e2fe0
 800ac20:	7ff00000 	.word	0x7ff00000
 800ac24:	43400000 	.word	0x43400000
 800ac28:	0003988e 	.word	0x0003988e
 800ac2c:	000bb679 	.word	0x000bb679
 800ac30:	0800b870 	.word	0x0800b870
 800ac34:	3ff00000 	.word	0x3ff00000
 800ac38:	40080000 	.word	0x40080000
 800ac3c:	0800b850 	.word	0x0800b850
 800ac40:	0800b860 	.word	0x0800b860
 800ac44:	460b      	mov	r3, r1
 800ac46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac4a:	e5d7      	b.n	800a7fc <__ieee754_pow+0x354>
 800ac4c:	f04f 0a01 	mov.w	sl, #1
 800ac50:	e65e      	b.n	800a910 <__ieee754_pow+0x468>
 800ac52:	a3b4      	add	r3, pc, #720	@ (adr r3, 800af24 <__ieee754_pow+0xa7c>)
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 fb46 	bl	80002ec <__adddf3>
 800ac60:	4642      	mov	r2, r8
 800ac62:	e9cd 0100 	strd	r0, r1, [sp]
 800ac66:	464b      	mov	r3, r9
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7f5 fb3c 	bl	80002e8 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac78:	f7f5 ff7e 	bl	8000b78 <__aeabi_dcmpgt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f47f ae00 	bne.w	800a882 <__ieee754_pow+0x3da>
 800ac82:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ac86:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ac8a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ac8e:	fa43 fa0a 	asr.w	sl, r3, sl
 800ac92:	44da      	add	sl, fp
 800ac94:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ac98:	489d      	ldr	r0, [pc, #628]	@ (800af10 <__ieee754_pow+0xa68>)
 800ac9a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ac9e:	4108      	asrs	r0, r1
 800aca0:	ea00 030a 	and.w	r3, r0, sl
 800aca4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800aca8:	f1c1 0114 	rsb	r1, r1, #20
 800acac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800acb0:	fa4a fa01 	asr.w	sl, sl, r1
 800acb4:	f1bb 0f00 	cmp.w	fp, #0
 800acb8:	4640      	mov	r0, r8
 800acba:	4649      	mov	r1, r9
 800acbc:	f04f 0200 	mov.w	r2, #0
 800acc0:	bfb8      	it	lt
 800acc2:	f1ca 0a00 	rsblt	sl, sl, #0
 800acc6:	f7f5 fb0f 	bl	80002e8 <__aeabi_dsub>
 800acca:	4680      	mov	r8, r0
 800accc:	4689      	mov	r9, r1
 800acce:	4632      	mov	r2, r6
 800acd0:	463b      	mov	r3, r7
 800acd2:	4640      	mov	r0, r8
 800acd4:	4649      	mov	r1, r9
 800acd6:	f7f5 fb09 	bl	80002ec <__adddf3>
 800acda:	2400      	movs	r4, #0
 800acdc:	a37c      	add	r3, pc, #496	@ (adr r3, 800aed0 <__ieee754_pow+0xa28>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	4620      	mov	r0, r4
 800ace4:	460d      	mov	r5, r1
 800ace6:	f7f5 fcb7 	bl	8000658 <__aeabi_dmul>
 800acea:	4642      	mov	r2, r8
 800acec:	e9cd 0100 	strd	r0, r1, [sp]
 800acf0:	464b      	mov	r3, r9
 800acf2:	4620      	mov	r0, r4
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7f5 faf7 	bl	80002e8 <__aeabi_dsub>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4630      	mov	r0, r6
 800ad00:	4639      	mov	r1, r7
 800ad02:	f7f5 faf1 	bl	80002e8 <__aeabi_dsub>
 800ad06:	a374      	add	r3, pc, #464	@ (adr r3, 800aed8 <__ieee754_pow+0xa30>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fca4 	bl	8000658 <__aeabi_dmul>
 800ad10:	a373      	add	r3, pc, #460	@ (adr r3, 800aee0 <__ieee754_pow+0xa38>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	4680      	mov	r8, r0
 800ad18:	4689      	mov	r9, r1
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	f7f5 fc9b 	bl	8000658 <__aeabi_dmul>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fadf 	bl	80002ec <__adddf3>
 800ad2e:	4604      	mov	r4, r0
 800ad30:	460d      	mov	r5, r1
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad3a:	f7f5 fad7 	bl	80002ec <__adddf3>
 800ad3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad42:	4680      	mov	r8, r0
 800ad44:	4689      	mov	r9, r1
 800ad46:	f7f5 facf 	bl	80002e8 <__aeabi_dsub>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fac9 	bl	80002e8 <__aeabi_dsub>
 800ad56:	4642      	mov	r2, r8
 800ad58:	4606      	mov	r6, r0
 800ad5a:	460f      	mov	r7, r1
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	4640      	mov	r0, r8
 800ad60:	4649      	mov	r1, r9
 800ad62:	f7f5 fc79 	bl	8000658 <__aeabi_dmul>
 800ad66:	a360      	add	r3, pc, #384	@ (adr r3, 800aee8 <__ieee754_pow+0xa40>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	f7f5 fc72 	bl	8000658 <__aeabi_dmul>
 800ad74:	a35e      	add	r3, pc, #376	@ (adr r3, 800aef0 <__ieee754_pow+0xa48>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f7f5 fab5 	bl	80002e8 <__aeabi_dsub>
 800ad7e:	4622      	mov	r2, r4
 800ad80:	462b      	mov	r3, r5
 800ad82:	f7f5 fc69 	bl	8000658 <__aeabi_dmul>
 800ad86:	a35c      	add	r3, pc, #368	@ (adr r3, 800aef8 <__ieee754_pow+0xa50>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f7f5 faae 	bl	80002ec <__adddf3>
 800ad90:	4622      	mov	r2, r4
 800ad92:	462b      	mov	r3, r5
 800ad94:	f7f5 fc60 	bl	8000658 <__aeabi_dmul>
 800ad98:	a359      	add	r3, pc, #356	@ (adr r3, 800af00 <__ieee754_pow+0xa58>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 faa3 	bl	80002e8 <__aeabi_dsub>
 800ada2:	4622      	mov	r2, r4
 800ada4:	462b      	mov	r3, r5
 800ada6:	f7f5 fc57 	bl	8000658 <__aeabi_dmul>
 800adaa:	a357      	add	r3, pc, #348	@ (adr r3, 800af08 <__ieee754_pow+0xa60>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f7f5 fa9c 	bl	80002ec <__adddf3>
 800adb4:	4622      	mov	r2, r4
 800adb6:	462b      	mov	r3, r5
 800adb8:	f7f5 fc4e 	bl	8000658 <__aeabi_dmul>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4640      	mov	r0, r8
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 fa90 	bl	80002e8 <__aeabi_dsub>
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4640      	mov	r0, r8
 800add2:	4649      	mov	r1, r9
 800add4:	f7f5 fc40 	bl	8000658 <__aeabi_dmul>
 800add8:	2200      	movs	r2, #0
 800adda:	e9cd 0100 	strd	r0, r1, [sp]
 800adde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fa7f 	bl	80002e8 <__aeabi_dsub>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf2:	f7f5 fd5b 	bl	80008ac <__aeabi_ddiv>
 800adf6:	4632      	mov	r2, r6
 800adf8:	4604      	mov	r4, r0
 800adfa:	460d      	mov	r5, r1
 800adfc:	463b      	mov	r3, r7
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 fc29 	bl	8000658 <__aeabi_dmul>
 800ae06:	4632      	mov	r2, r6
 800ae08:	463b      	mov	r3, r7
 800ae0a:	f7f5 fa6f 	bl	80002ec <__adddf3>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	4620      	mov	r0, r4
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7f5 fa67 	bl	80002e8 <__aeabi_dsub>
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	f7f5 fa63 	bl	80002e8 <__aeabi_dsub>
 800ae22:	460b      	mov	r3, r1
 800ae24:	4602      	mov	r2, r0
 800ae26:	493b      	ldr	r1, [pc, #236]	@ (800af14 <__ieee754_pow+0xa6c>)
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f7f5 fa5d 	bl	80002e8 <__aeabi_dsub>
 800ae2e:	ec41 0b10 	vmov	d0, r0, r1
 800ae32:	ee10 3a90 	vmov	r3, s1
 800ae36:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ae3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae3e:	da30      	bge.n	800aea2 <__ieee754_pow+0x9fa>
 800ae40:	4650      	mov	r0, sl
 800ae42:	f000 f87d 	bl	800af40 <scalbn>
 800ae46:	ec51 0b10 	vmov	r0, r1, d0
 800ae4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae4e:	f7ff bbd2 	b.w	800a5f6 <__ieee754_pow+0x14e>
 800ae52:	4c31      	ldr	r4, [pc, #196]	@ (800af18 <__ieee754_pow+0xa70>)
 800ae54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d91a      	bls.n	800ae92 <__ieee754_pow+0x9ea>
 800ae5c:	4b2f      	ldr	r3, [pc, #188]	@ (800af1c <__ieee754_pow+0xa74>)
 800ae5e:	440b      	add	r3, r1
 800ae60:	4303      	orrs	r3, r0
 800ae62:	d009      	beq.n	800ae78 <__ieee754_pow+0x9d0>
 800ae64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f7f5 fe66 	bl	8000b3c <__aeabi_dcmplt>
 800ae70:	3800      	subs	r0, #0
 800ae72:	bf18      	it	ne
 800ae74:	2001      	movne	r0, #1
 800ae76:	e42b      	b.n	800a6d0 <__ieee754_pow+0x228>
 800ae78:	4642      	mov	r2, r8
 800ae7a:	464b      	mov	r3, r9
 800ae7c:	f7f5 fa34 	bl	80002e8 <__aeabi_dsub>
 800ae80:	4632      	mov	r2, r6
 800ae82:	463b      	mov	r3, r7
 800ae84:	f7f5 fe6e 	bl	8000b64 <__aeabi_dcmpge>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d1eb      	bne.n	800ae64 <__ieee754_pow+0x9bc>
 800ae8c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800af2c <__ieee754_pow+0xa84>
 800ae90:	e6f7      	b.n	800ac82 <__ieee754_pow+0x7da>
 800ae92:	469a      	mov	sl, r3
 800ae94:	4b22      	ldr	r3, [pc, #136]	@ (800af20 <__ieee754_pow+0xa78>)
 800ae96:	459a      	cmp	sl, r3
 800ae98:	f63f aef3 	bhi.w	800ac82 <__ieee754_pow+0x7da>
 800ae9c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800aea0:	e715      	b.n	800acce <__ieee754_pow+0x826>
 800aea2:	ec51 0b10 	vmov	r0, r1, d0
 800aea6:	4619      	mov	r1, r3
 800aea8:	e7cf      	b.n	800ae4a <__ieee754_pow+0x9a2>
 800aeaa:	491a      	ldr	r1, [pc, #104]	@ (800af14 <__ieee754_pow+0xa6c>)
 800aeac:	2000      	movs	r0, #0
 800aeae:	f7ff bb18 	b.w	800a4e2 <__ieee754_pow+0x3a>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	f7ff bb14 	b.w	800a4e2 <__ieee754_pow+0x3a>
 800aeba:	4630      	mov	r0, r6
 800aebc:	4639      	mov	r1, r7
 800aebe:	f7ff bb10 	b.w	800a4e2 <__ieee754_pow+0x3a>
 800aec2:	460c      	mov	r4, r1
 800aec4:	f7ff bb5e 	b.w	800a584 <__ieee754_pow+0xdc>
 800aec8:	2400      	movs	r4, #0
 800aeca:	f7ff bb49 	b.w	800a560 <__ieee754_pow+0xb8>
 800aece:	bf00      	nop
 800aed0:	00000000 	.word	0x00000000
 800aed4:	3fe62e43 	.word	0x3fe62e43
 800aed8:	fefa39ef 	.word	0xfefa39ef
 800aedc:	3fe62e42 	.word	0x3fe62e42
 800aee0:	0ca86c39 	.word	0x0ca86c39
 800aee4:	be205c61 	.word	0xbe205c61
 800aee8:	72bea4d0 	.word	0x72bea4d0
 800aeec:	3e663769 	.word	0x3e663769
 800aef0:	c5d26bf1 	.word	0xc5d26bf1
 800aef4:	3ebbbd41 	.word	0x3ebbbd41
 800aef8:	af25de2c 	.word	0xaf25de2c
 800aefc:	3f11566a 	.word	0x3f11566a
 800af00:	16bebd93 	.word	0x16bebd93
 800af04:	3f66c16c 	.word	0x3f66c16c
 800af08:	5555553e 	.word	0x5555553e
 800af0c:	3fc55555 	.word	0x3fc55555
 800af10:	fff00000 	.word	0xfff00000
 800af14:	3ff00000 	.word	0x3ff00000
 800af18:	4090cbff 	.word	0x4090cbff
 800af1c:	3f6f3400 	.word	0x3f6f3400
 800af20:	3fe00000 	.word	0x3fe00000
 800af24:	652b82fe 	.word	0x652b82fe
 800af28:	3c971547 	.word	0x3c971547
 800af2c:	4090cc00 	.word	0x4090cc00

0800af30 <fabs>:
 800af30:	ec51 0b10 	vmov	r0, r1, d0
 800af34:	4602      	mov	r2, r0
 800af36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800af3a:	ec43 2b10 	vmov	d0, r2, r3
 800af3e:	4770      	bx	lr

0800af40 <scalbn>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	ec55 4b10 	vmov	r4, r5, d0
 800af46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800af4a:	4606      	mov	r6, r0
 800af4c:	462b      	mov	r3, r5
 800af4e:	b991      	cbnz	r1, 800af76 <scalbn+0x36>
 800af50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800af54:	4323      	orrs	r3, r4
 800af56:	d03d      	beq.n	800afd4 <scalbn+0x94>
 800af58:	4b35      	ldr	r3, [pc, #212]	@ (800b030 <scalbn+0xf0>)
 800af5a:	4620      	mov	r0, r4
 800af5c:	4629      	mov	r1, r5
 800af5e:	2200      	movs	r2, #0
 800af60:	f7f5 fb7a 	bl	8000658 <__aeabi_dmul>
 800af64:	4b33      	ldr	r3, [pc, #204]	@ (800b034 <scalbn+0xf4>)
 800af66:	429e      	cmp	r6, r3
 800af68:	4604      	mov	r4, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	da0f      	bge.n	800af8e <scalbn+0x4e>
 800af6e:	a328      	add	r3, pc, #160	@ (adr r3, 800b010 <scalbn+0xd0>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	e01e      	b.n	800afb4 <scalbn+0x74>
 800af76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800af7a:	4291      	cmp	r1, r2
 800af7c:	d10b      	bne.n	800af96 <scalbn+0x56>
 800af7e:	4622      	mov	r2, r4
 800af80:	4620      	mov	r0, r4
 800af82:	4629      	mov	r1, r5
 800af84:	f7f5 f9b2 	bl	80002ec <__adddf3>
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	e022      	b.n	800afd4 <scalbn+0x94>
 800af8e:	460b      	mov	r3, r1
 800af90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af94:	3936      	subs	r1, #54	@ 0x36
 800af96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800af9a:	4296      	cmp	r6, r2
 800af9c:	dd0d      	ble.n	800afba <scalbn+0x7a>
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b018 <scalbn+0xd8>)
 800afa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa6:	da02      	bge.n	800afae <scalbn+0x6e>
 800afa8:	a11d      	add	r1, pc, #116	@ (adr r1, 800b020 <scalbn+0xe0>)
 800afaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afae:	a31a      	add	r3, pc, #104	@ (adr r3, 800b018 <scalbn+0xd8>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 fb50 	bl	8000658 <__aeabi_dmul>
 800afb8:	e7e6      	b.n	800af88 <scalbn+0x48>
 800afba:	1872      	adds	r2, r6, r1
 800afbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800afc0:	428a      	cmp	r2, r1
 800afc2:	dcec      	bgt.n	800af9e <scalbn+0x5e>
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	dd08      	ble.n	800afda <scalbn+0x9a>
 800afc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800afcc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800afd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800afd4:	ec45 4b10 	vmov	d0, r4, r5
 800afd8:	bd70      	pop	{r4, r5, r6, pc}
 800afda:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800afde:	da08      	bge.n	800aff2 <scalbn+0xb2>
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	a10b      	add	r1, pc, #44	@ (adr r1, 800b010 <scalbn+0xd0>)
 800afe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe8:	dac1      	bge.n	800af6e <scalbn+0x2e>
 800afea:	a10f      	add	r1, pc, #60	@ (adr r1, 800b028 <scalbn+0xe8>)
 800afec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff0:	e7bd      	b.n	800af6e <scalbn+0x2e>
 800aff2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aff6:	3236      	adds	r2, #54	@ 0x36
 800aff8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800affc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b000:	4620      	mov	r0, r4
 800b002:	4b0d      	ldr	r3, [pc, #52]	@ (800b038 <scalbn+0xf8>)
 800b004:	4629      	mov	r1, r5
 800b006:	2200      	movs	r2, #0
 800b008:	e7d4      	b.n	800afb4 <scalbn+0x74>
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w
 800b010:	c2f8f359 	.word	0xc2f8f359
 800b014:	01a56e1f 	.word	0x01a56e1f
 800b018:	8800759c 	.word	0x8800759c
 800b01c:	7e37e43c 	.word	0x7e37e43c
 800b020:	8800759c 	.word	0x8800759c
 800b024:	fe37e43c 	.word	0xfe37e43c
 800b028:	c2f8f359 	.word	0xc2f8f359
 800b02c:	81a56e1f 	.word	0x81a56e1f
 800b030:	43500000 	.word	0x43500000
 800b034:	ffff3cb0 	.word	0xffff3cb0
 800b038:	3c900000 	.word	0x3c900000

0800b03c <with_errno>:
 800b03c:	b510      	push	{r4, lr}
 800b03e:	ed2d 8b02 	vpush	{d8}
 800b042:	eeb0 8a40 	vmov.f32	s16, s0
 800b046:	eef0 8a60 	vmov.f32	s17, s1
 800b04a:	4604      	mov	r4, r0
 800b04c:	f7fb fe2c 	bl	8006ca8 <__errno>
 800b050:	eeb0 0a48 	vmov.f32	s0, s16
 800b054:	eef0 0a68 	vmov.f32	s1, s17
 800b058:	ecbd 8b02 	vpop	{d8}
 800b05c:	6004      	str	r4, [r0, #0]
 800b05e:	bd10      	pop	{r4, pc}

0800b060 <xflow>:
 800b060:	4603      	mov	r3, r0
 800b062:	b507      	push	{r0, r1, r2, lr}
 800b064:	ec51 0b10 	vmov	r0, r1, d0
 800b068:	b183      	cbz	r3, 800b08c <xflow+0x2c>
 800b06a:	4602      	mov	r2, r0
 800b06c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b070:	e9cd 2300 	strd	r2, r3, [sp]
 800b074:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b078:	f7f5 faee 	bl	8000658 <__aeabi_dmul>
 800b07c:	ec41 0b10 	vmov	d0, r0, r1
 800b080:	2022      	movs	r0, #34	@ 0x22
 800b082:	b003      	add	sp, #12
 800b084:	f85d eb04 	ldr.w	lr, [sp], #4
 800b088:	f7ff bfd8 	b.w	800b03c <with_errno>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	e7ee      	b.n	800b070 <xflow+0x10>
 800b092:	0000      	movs	r0, r0
 800b094:	0000      	movs	r0, r0
	...

0800b098 <__math_uflow>:
 800b098:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b0a0 <__math_uflow+0x8>
 800b09c:	f7ff bfe0 	b.w	800b060 <xflow>
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	10000000 	.word	0x10000000

0800b0a8 <__math_oflow>:
 800b0a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b0b0 <__math_oflow+0x8>
 800b0ac:	f7ff bfd8 	b.w	800b060 <xflow>
 800b0b0:	00000000 	.word	0x00000000
 800b0b4:	70000000 	.word	0x70000000

0800b0b8 <__ieee754_sqrt>:
 800b0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	4a68      	ldr	r2, [pc, #416]	@ (800b260 <__ieee754_sqrt+0x1a8>)
 800b0be:	ec55 4b10 	vmov	r4, r5, d0
 800b0c2:	43aa      	bics	r2, r5
 800b0c4:	462b      	mov	r3, r5
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	d110      	bne.n	800b0ec <__ieee754_sqrt+0x34>
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 fac2 	bl	8000658 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4620      	mov	r0, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	f7f5 f906 	bl	80002ec <__adddf3>
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	ec45 4b10 	vmov	d0, r4, r5
 800b0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	2d00      	cmp	r5, #0
 800b0ee:	dc0e      	bgt.n	800b10e <__ieee754_sqrt+0x56>
 800b0f0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b0f4:	4322      	orrs	r2, r4
 800b0f6:	d0f5      	beq.n	800b0e4 <__ieee754_sqrt+0x2c>
 800b0f8:	b19d      	cbz	r5, 800b122 <__ieee754_sqrt+0x6a>
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 f8f2 	bl	80002e8 <__aeabi_dsub>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	f7f5 fbd0 	bl	80008ac <__aeabi_ddiv>
 800b10c:	e7e8      	b.n	800b0e0 <__ieee754_sqrt+0x28>
 800b10e:	152a      	asrs	r2, r5, #20
 800b110:	d115      	bne.n	800b13e <__ieee754_sqrt+0x86>
 800b112:	2000      	movs	r0, #0
 800b114:	e009      	b.n	800b12a <__ieee754_sqrt+0x72>
 800b116:	0acb      	lsrs	r3, r1, #11
 800b118:	3a15      	subs	r2, #21
 800b11a:	0549      	lsls	r1, r1, #21
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0fa      	beq.n	800b116 <__ieee754_sqrt+0x5e>
 800b120:	e7f7      	b.n	800b112 <__ieee754_sqrt+0x5a>
 800b122:	462a      	mov	r2, r5
 800b124:	e7fa      	b.n	800b11c <__ieee754_sqrt+0x64>
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	3001      	adds	r0, #1
 800b12a:	02dc      	lsls	r4, r3, #11
 800b12c:	d5fb      	bpl.n	800b126 <__ieee754_sqrt+0x6e>
 800b12e:	1e44      	subs	r4, r0, #1
 800b130:	1b12      	subs	r2, r2, r4
 800b132:	f1c0 0420 	rsb	r4, r0, #32
 800b136:	fa21 f404 	lsr.w	r4, r1, r4
 800b13a:	4323      	orrs	r3, r4
 800b13c:	4081      	lsls	r1, r0
 800b13e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b142:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b14a:	07d2      	lsls	r2, r2, #31
 800b14c:	bf5c      	itt	pl
 800b14e:	005b      	lslpl	r3, r3, #1
 800b150:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b154:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b158:	bf58      	it	pl
 800b15a:	0049      	lslpl	r1, r1, #1
 800b15c:	2600      	movs	r6, #0
 800b15e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b162:	106d      	asrs	r5, r5, #1
 800b164:	0049      	lsls	r1, r1, #1
 800b166:	2016      	movs	r0, #22
 800b168:	4632      	mov	r2, r6
 800b16a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b16e:	1917      	adds	r7, r2, r4
 800b170:	429f      	cmp	r7, r3
 800b172:	bfde      	ittt	le
 800b174:	193a      	addle	r2, r7, r4
 800b176:	1bdb      	suble	r3, r3, r7
 800b178:	1936      	addle	r6, r6, r4
 800b17a:	0fcf      	lsrs	r7, r1, #31
 800b17c:	3801      	subs	r0, #1
 800b17e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b182:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b186:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b18a:	d1f0      	bne.n	800b16e <__ieee754_sqrt+0xb6>
 800b18c:	4604      	mov	r4, r0
 800b18e:	2720      	movs	r7, #32
 800b190:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b194:	429a      	cmp	r2, r3
 800b196:	eb00 0e0c 	add.w	lr, r0, ip
 800b19a:	db02      	blt.n	800b1a2 <__ieee754_sqrt+0xea>
 800b19c:	d113      	bne.n	800b1c6 <__ieee754_sqrt+0x10e>
 800b19e:	458e      	cmp	lr, r1
 800b1a0:	d811      	bhi.n	800b1c6 <__ieee754_sqrt+0x10e>
 800b1a2:	f1be 0f00 	cmp.w	lr, #0
 800b1a6:	eb0e 000c 	add.w	r0, lr, ip
 800b1aa:	da42      	bge.n	800b232 <__ieee754_sqrt+0x17a>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	db40      	blt.n	800b232 <__ieee754_sqrt+0x17a>
 800b1b0:	f102 0801 	add.w	r8, r2, #1
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	458e      	cmp	lr, r1
 800b1b8:	bf88      	it	hi
 800b1ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b1be:	eba1 010e 	sub.w	r1, r1, lr
 800b1c2:	4464      	add	r4, ip
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b1ca:	3f01      	subs	r7, #1
 800b1cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b1d0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b1d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b1d8:	d1dc      	bne.n	800b194 <__ieee754_sqrt+0xdc>
 800b1da:	4319      	orrs	r1, r3
 800b1dc:	d01b      	beq.n	800b216 <__ieee754_sqrt+0x15e>
 800b1de:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b264 <__ieee754_sqrt+0x1ac>
 800b1e2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b268 <__ieee754_sqrt+0x1b0>
 800b1e6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b1ea:	e9db 2300 	ldrd	r2, r3, [fp]
 800b1ee:	f7f5 f87b 	bl	80002e8 <__aeabi_dsub>
 800b1f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	f7f5 fca7 	bl	8000b50 <__aeabi_dcmple>
 800b202:	b140      	cbz	r0, 800b216 <__ieee754_sqrt+0x15e>
 800b204:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b208:	e9da 0100 	ldrd	r0, r1, [sl]
 800b20c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b210:	d111      	bne.n	800b236 <__ieee754_sqrt+0x17e>
 800b212:	3601      	adds	r6, #1
 800b214:	463c      	mov	r4, r7
 800b216:	1072      	asrs	r2, r6, #1
 800b218:	0863      	lsrs	r3, r4, #1
 800b21a:	07f1      	lsls	r1, r6, #31
 800b21c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b220:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b224:	bf48      	it	mi
 800b226:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b22a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b22e:	4618      	mov	r0, r3
 800b230:	e756      	b.n	800b0e0 <__ieee754_sqrt+0x28>
 800b232:	4690      	mov	r8, r2
 800b234:	e7be      	b.n	800b1b4 <__ieee754_sqrt+0xfc>
 800b236:	f7f5 f859 	bl	80002ec <__adddf3>
 800b23a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4640      	mov	r0, r8
 800b244:	4649      	mov	r1, r9
 800b246:	f7f5 fc79 	bl	8000b3c <__aeabi_dcmplt>
 800b24a:	b120      	cbz	r0, 800b256 <__ieee754_sqrt+0x19e>
 800b24c:	1ca0      	adds	r0, r4, #2
 800b24e:	bf08      	it	eq
 800b250:	3601      	addeq	r6, #1
 800b252:	3402      	adds	r4, #2
 800b254:	e7df      	b.n	800b216 <__ieee754_sqrt+0x15e>
 800b256:	1c63      	adds	r3, r4, #1
 800b258:	f023 0401 	bic.w	r4, r3, #1
 800b25c:	e7db      	b.n	800b216 <__ieee754_sqrt+0x15e>
 800b25e:	bf00      	nop
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	20000358 	.word	0x20000358
 800b268:	20000350 	.word	0x20000350

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
